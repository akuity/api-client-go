// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: extension/v1/extension.proto

package extensionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExtensionService_ListAuditRecordForApplication_FullMethodName         = "/akuity.extension.v1.ExtensionService/ListAuditRecordForApplication"
	ExtensionService_GetSyncOperationsStatsForApplication_FullMethodName  = "/akuity.extension.v1.ExtensionService/GetSyncOperationsStatsForApplication"
	ExtensionService_GetSyncOperationsEventsForApplication_FullMethodName = "/akuity.extension.v1.ExtensionService/GetSyncOperationsEventsForApplication"
	ExtensionService_GetAssistantSuggestion_FullMethodName                = "/akuity.extension.v1.ExtensionService/GetAssistantSuggestion"
	ExtensionService_ResolveAssistantConversation_FullMethodName          = "/akuity.extension.v1.ExtensionService/ResolveAssistantConversation"
)

// ExtensionServiceClient is the client API for ExtensionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtensionServiceClient interface {
	ListAuditRecordForApplication(ctx context.Context, in *ListAuditRecordForApplicationRequest, opts ...grpc.CallOption) (*ListAuditRecordForApplicationResponse, error)
	GetSyncOperationsStatsForApplication(ctx context.Context, in *GetSyncOperationsStatsForApplicationRequest, opts ...grpc.CallOption) (*GetSyncOperationsStatsForApplicationResponse, error)
	GetSyncOperationsEventsForApplication(ctx context.Context, in *GetSyncOperationsEventsForApplicationRequest, opts ...grpc.CallOption) (*GetSyncOperationsEventsForApplicationResponse, error)
	GetAssistantSuggestion(ctx context.Context, in *GetAssistantSuggestionRequest, opts ...grpc.CallOption) (*GetAssistantSuggestionResponse, error)
	ResolveAssistantConversation(ctx context.Context, in *ResolveAssistantConversationRequest, opts ...grpc.CallOption) (*ResolveAssistantConversationResponse, error)
}

type extensionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtensionServiceClient(cc grpc.ClientConnInterface) ExtensionServiceClient {
	return &extensionServiceClient{cc}
}

func (c *extensionServiceClient) ListAuditRecordForApplication(ctx context.Context, in *ListAuditRecordForApplicationRequest, opts ...grpc.CallOption) (*ListAuditRecordForApplicationResponse, error) {
	out := new(ListAuditRecordForApplicationResponse)
	err := c.cc.Invoke(ctx, ExtensionService_ListAuditRecordForApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) GetSyncOperationsStatsForApplication(ctx context.Context, in *GetSyncOperationsStatsForApplicationRequest, opts ...grpc.CallOption) (*GetSyncOperationsStatsForApplicationResponse, error) {
	out := new(GetSyncOperationsStatsForApplicationResponse)
	err := c.cc.Invoke(ctx, ExtensionService_GetSyncOperationsStatsForApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) GetSyncOperationsEventsForApplication(ctx context.Context, in *GetSyncOperationsEventsForApplicationRequest, opts ...grpc.CallOption) (*GetSyncOperationsEventsForApplicationResponse, error) {
	out := new(GetSyncOperationsEventsForApplicationResponse)
	err := c.cc.Invoke(ctx, ExtensionService_GetSyncOperationsEventsForApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) GetAssistantSuggestion(ctx context.Context, in *GetAssistantSuggestionRequest, opts ...grpc.CallOption) (*GetAssistantSuggestionResponse, error) {
	out := new(GetAssistantSuggestionResponse)
	err := c.cc.Invoke(ctx, ExtensionService_GetAssistantSuggestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) ResolveAssistantConversation(ctx context.Context, in *ResolveAssistantConversationRequest, opts ...grpc.CallOption) (*ResolveAssistantConversationResponse, error) {
	out := new(ResolveAssistantConversationResponse)
	err := c.cc.Invoke(ctx, ExtensionService_ResolveAssistantConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtensionServiceServer is the server API for ExtensionService service.
// All implementations must embed UnimplementedExtensionServiceServer
// for forward compatibility
type ExtensionServiceServer interface {
	ListAuditRecordForApplication(context.Context, *ListAuditRecordForApplicationRequest) (*ListAuditRecordForApplicationResponse, error)
	GetSyncOperationsStatsForApplication(context.Context, *GetSyncOperationsStatsForApplicationRequest) (*GetSyncOperationsStatsForApplicationResponse, error)
	GetSyncOperationsEventsForApplication(context.Context, *GetSyncOperationsEventsForApplicationRequest) (*GetSyncOperationsEventsForApplicationResponse, error)
	GetAssistantSuggestion(context.Context, *GetAssistantSuggestionRequest) (*GetAssistantSuggestionResponse, error)
	ResolveAssistantConversation(context.Context, *ResolveAssistantConversationRequest) (*ResolveAssistantConversationResponse, error)
	mustEmbedUnimplementedExtensionServiceServer()
}

// UnimplementedExtensionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExtensionServiceServer struct {
}

func (UnimplementedExtensionServiceServer) ListAuditRecordForApplication(context.Context, *ListAuditRecordForApplicationRequest) (*ListAuditRecordForApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditRecordForApplication not implemented")
}
func (UnimplementedExtensionServiceServer) GetSyncOperationsStatsForApplication(context.Context, *GetSyncOperationsStatsForApplicationRequest) (*GetSyncOperationsStatsForApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncOperationsStatsForApplication not implemented")
}
func (UnimplementedExtensionServiceServer) GetSyncOperationsEventsForApplication(context.Context, *GetSyncOperationsEventsForApplicationRequest) (*GetSyncOperationsEventsForApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncOperationsEventsForApplication not implemented")
}
func (UnimplementedExtensionServiceServer) GetAssistantSuggestion(context.Context, *GetAssistantSuggestionRequest) (*GetAssistantSuggestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantSuggestion not implemented")
}
func (UnimplementedExtensionServiceServer) ResolveAssistantConversation(context.Context, *ResolveAssistantConversationRequest) (*ResolveAssistantConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveAssistantConversation not implemented")
}
func (UnimplementedExtensionServiceServer) mustEmbedUnimplementedExtensionServiceServer() {}

// UnsafeExtensionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtensionServiceServer will
// result in compilation errors.
type UnsafeExtensionServiceServer interface {
	mustEmbedUnimplementedExtensionServiceServer()
}

func RegisterExtensionServiceServer(s grpc.ServiceRegistrar, srv ExtensionServiceServer) {
	s.RegisterService(&ExtensionService_ServiceDesc, srv)
}

func _ExtensionService_ListAuditRecordForApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditRecordForApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).ListAuditRecordForApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_ListAuditRecordForApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).ListAuditRecordForApplication(ctx, req.(*ListAuditRecordForApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_GetSyncOperationsStatsForApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncOperationsStatsForApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).GetSyncOperationsStatsForApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_GetSyncOperationsStatsForApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).GetSyncOperationsStatsForApplication(ctx, req.(*GetSyncOperationsStatsForApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_GetSyncOperationsEventsForApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncOperationsEventsForApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).GetSyncOperationsEventsForApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_GetSyncOperationsEventsForApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).GetSyncOperationsEventsForApplication(ctx, req.(*GetSyncOperationsEventsForApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_GetAssistantSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantSuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).GetAssistantSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_GetAssistantSuggestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).GetAssistantSuggestion(ctx, req.(*GetAssistantSuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_ResolveAssistantConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAssistantConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).ResolveAssistantConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_ResolveAssistantConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).ResolveAssistantConversation(ctx, req.(*ResolveAssistantConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtensionService_ServiceDesc is the grpc.ServiceDesc for ExtensionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtensionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akuity.extension.v1.ExtensionService",
	HandlerType: (*ExtensionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAuditRecordForApplication",
			Handler:    _ExtensionService_ListAuditRecordForApplication_Handler,
		},
		{
			MethodName: "GetSyncOperationsStatsForApplication",
			Handler:    _ExtensionService_GetSyncOperationsStatsForApplication_Handler,
		},
		{
			MethodName: "GetSyncOperationsEventsForApplication",
			Handler:    _ExtensionService_GetSyncOperationsEventsForApplication_Handler,
		},
		{
			MethodName: "GetAssistantSuggestion",
			Handler:    _ExtensionService_GetAssistantSuggestion_Handler,
		},
		{
			MethodName: "ResolveAssistantConversation",
			Handler:    _ExtensionService_ResolveAssistantConversation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "extension/v1/extension.proto",
}
