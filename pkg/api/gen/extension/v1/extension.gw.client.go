// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: extension/v1/extension.proto

package extensionv1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
)

// ExtensionServiceGatewayClient is the interface for ExtensionService service client.
type ExtensionServiceGatewayClient interface {
	ListAuditRecordForApplication(context.Context, *ListAuditRecordForApplicationRequest) (*ListAuditRecordForApplicationResponse, error)
	GetSyncOperationsStatsForApplication(context.Context, *GetSyncOperationsStatsForApplicationRequest) (*GetSyncOperationsStatsForApplicationResponse, error)
	GetSyncOperationsEventsForApplication(context.Context, *GetSyncOperationsEventsForApplicationRequest) (*GetSyncOperationsEventsForApplicationResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetKargoAnalysisLogs(context.Context, *GetKargoAnalysisLogsRequest) (<-chan *httpbody.HttpBody, <-chan error, error)
}

func NewExtensionServiceGatewayClient(c gateway.Client) ExtensionServiceGatewayClient {
	return &extensionServiceGatewayClient{
		gwc: c,
	}
}

type extensionServiceGatewayClient struct {
	gwc gateway.Client
}

func (c *extensionServiceGatewayClient) ListAuditRecordForApplication(ctx context.Context, req *ListAuditRecordForApplicationRequest) (*ListAuditRecordForApplicationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/ext-api/v1/argocd/extensions/audit-records")
	gwReq.SetBody(req)
	return gateway.DoRequest[ListAuditRecordForApplicationResponse](ctx, gwReq)
}

func (c *extensionServiceGatewayClient) GetSyncOperationsStatsForApplication(ctx context.Context, req *GetSyncOperationsStatsForApplicationRequest) (*GetSyncOperationsStatsForApplicationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/ext-api/v1/argocd/extensions/sync-operations-stats")
	gwReq.SetBody(req)
	return gateway.DoRequest[GetSyncOperationsStatsForApplicationResponse](ctx, gwReq)
}

func (c *extensionServiceGatewayClient) GetSyncOperationsEventsForApplication(ctx context.Context, req *GetSyncOperationsEventsForApplicationRequest) (*GetSyncOperationsEventsForApplicationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/ext-api/v1/argocd/extensions/sync-operations-events")
	gwReq.SetBody(req)
	return gateway.DoRequest[GetSyncOperationsEventsForApplicationResponse](ctx, gwReq)
}

func (c *extensionServiceGatewayClient) GetKargoAnalysisLogs(ctx context.Context, req *GetKargoAnalysisLogsRequest) (<-chan *httpbody.HttpBody, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/ext-api/v1/kargo/extensions/logs/{project_name}/{analysis_run}/{container_name}")
	gwReq.SetPathParam("project_name", fmt.Sprintf("%v", req.ProjectName))
	gwReq.SetPathParam("analysis_run", fmt.Sprintf("%v", req.AnalysisRun))
	gwReq.SetPathParam("container_name", fmt.Sprintf("%v", req.ContainerName))
	return gateway.DoStreamingRequest[httpbody.HttpBody](ctx, c.gwc, gwReq)
}
