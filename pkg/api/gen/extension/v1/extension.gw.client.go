// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: extension/v1/extension.proto

package extensionv1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	url "net/url"
)

// ExtensionServiceGatewayClient is the interface for ExtensionService service client.
type ExtensionServiceGatewayClient interface {
	ListAuditRecordForApplication(context.Context, *ListAuditRecordForApplicationRequest) (*ListAuditRecordForApplicationResponse, error)
	GetSyncOperationsStatsForApplication(context.Context, *GetSyncOperationsStatsForApplicationRequest) (*GetSyncOperationsStatsForApplicationResponse, error)
	GetSyncOperationsEventsForApplication(context.Context, *GetSyncOperationsEventsForApplicationRequest) (*GetSyncOperationsEventsForApplicationResponse, error)
	GetAssistantSuggestion(context.Context, *GetAssistantSuggestionRequest) (*GetAssistantSuggestionResponse, error)
}

func NewExtensionServiceGatewayClient(c gateway.Client) ExtensionServiceGatewayClient {
	return &extensionServiceGatewayClient{
		gwc: c,
	}
}

type extensionServiceGatewayClient struct {
	gwc gateway.Client
}

func (c *extensionServiceGatewayClient) ListAuditRecordForApplication(ctx context.Context, req *ListAuditRecordForApplicationRequest) (*ListAuditRecordForApplicationResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/ext-api/v1/argocd/extensions/audit-records")
	q := url.Values{}
	for _, v := range req.Filters.ActorId {
		q.Add("filters.actorId", fmt.Sprintf("%v", v))
	}
	for _, v := range req.Filters.ObjectName {
		q.Add("filters.objectName", fmt.Sprintf("%v", v))
	}
	for _, v := range req.Filters.ObjectKind {
		q.Add("filters.objectKind", fmt.Sprintf("%v", v))
	}
	for _, v := range req.Filters.ObjectGroup {
		q.Add("filters.objectGroup", fmt.Sprintf("%v", v))
	}
	for _, v := range req.Filters.ObjectParentName {
		q.Add("filters.objectParentName", fmt.Sprintf("%v", v))
	}
	for _, v := range req.Filters.Action {
		q.Add("filters.action", fmt.Sprintf("%v", v))
	}
	for _, v := range req.Filters.ActorType {
		q.Add("filters.actorType", fmt.Sprintf("%v", v))
	}
	for _, v := range req.Filters.ObjectType {
		q.Add("filters.objectType", fmt.Sprintf("%v", v))
	}
	if req.Filters.StartTime != nil {
		q.Add("filters.startTime", fmt.Sprintf("%v", *req.Filters.StartTime))
	}
	if req.Filters.EndTime != nil {
		q.Add("filters.endTime", fmt.Sprintf("%v", *req.Filters.EndTime))
	}
	if req.Filters.Limit != nil {
		q.Add("filters.limit", fmt.Sprintf("%v", *req.Filters.Limit))
	}
	if req.Filters.Offset != nil {
		q.Add("filters.offset", fmt.Sprintf("%v", *req.Filters.Offset))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListAuditRecordForApplicationResponse](ctx, gwReq)
}

func (c *extensionServiceGatewayClient) GetSyncOperationsStatsForApplication(ctx context.Context, req *GetSyncOperationsStatsForApplicationRequest) (*GetSyncOperationsStatsForApplicationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/ext-api/v1/argocd/extensions/sync-operations-stats")
	gwReq.SetBody(req)
	return gateway.DoRequest[GetSyncOperationsStatsForApplicationResponse](ctx, gwReq)
}

func (c *extensionServiceGatewayClient) GetSyncOperationsEventsForApplication(ctx context.Context, req *GetSyncOperationsEventsForApplicationRequest) (*GetSyncOperationsEventsForApplicationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/ext-api/v1/argocd/extensions/sync-operations-events")
	gwReq.SetBody(req)
	return gateway.DoRequest[GetSyncOperationsEventsForApplicationResponse](ctx, gwReq)
}

func (c *extensionServiceGatewayClient) GetAssistantSuggestion(ctx context.Context, req *GetAssistantSuggestionRequest) (*GetAssistantSuggestionResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/ext-api/v1/argocd/extensions/assistant-suggestion")
	gwReq.SetBody(req)
	return gateway.DoRequest[GetAssistantSuggestionResponse](ctx, gwReq)
}
