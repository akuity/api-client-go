// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: types/features/v1/features.proto

package featuresv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureStatus int32

const (
	FeatureStatus_FEATURE_STATUS_UNSPECIFIED   FeatureStatus = 0
	FeatureStatus_FEATURE_STATUS_NOT_AVAILABLE FeatureStatus = 1
	FeatureStatus_FEATURE_STATUS_ENABLED       FeatureStatus = 2
	FeatureStatus_FEATURE_STATUS_DISABLED      FeatureStatus = 3
)

// Enum value maps for FeatureStatus.
var (
	FeatureStatus_name = map[int32]string{
		0: "FEATURE_STATUS_UNSPECIFIED",
		1: "FEATURE_STATUS_NOT_AVAILABLE",
		2: "FEATURE_STATUS_ENABLED",
		3: "FEATURE_STATUS_DISABLED",
	}
	FeatureStatus_value = map[string]int32{
		"FEATURE_STATUS_UNSPECIFIED":   0,
		"FEATURE_STATUS_NOT_AVAILABLE": 1,
		"FEATURE_STATUS_ENABLED":       2,
		"FEATURE_STATUS_DISABLED":      3,
	}
)

func (x FeatureStatus) Enum() *FeatureStatus {
	p := new(FeatureStatus)
	*p = x
	return p
}

func (x FeatureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_types_features_v1_features_proto_enumTypes[0].Descriptor()
}

func (FeatureStatus) Type() protoreflect.EnumType {
	return &file_types_features_v1_features_proto_enumTypes[0]
}

func (x FeatureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureStatus.Descriptor instead.
func (FeatureStatus) EnumDescriptor() ([]byte, []int) {
	return file_types_features_v1_features_proto_rawDescGZIP(), []int{0}
}

type SystemFeatureGates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sso                      bool `protobuf:"varint,1,opt,name=sso,proto3" json:"sso,omitempty"`
	Kargo                    bool `protobuf:"varint,2,opt,name=kargo,proto3" json:"kargo,omitempty"`
	Autoscaler               bool `protobuf:"varint,3,opt,name=autoscaler,proto3" json:"autoscaler,omitempty"`
	K3SProxyInformers        bool `protobuf:"varint,4,opt,name=k3s_proxy_informers,json=k3sProxyInformers,proto3" json:"k3s_proxy_informers,omitempty"`
	AiAssistantStats         bool `protobuf:"varint,5,opt,name=ai_assistant_stats,json=aiAssistantStats,proto3" json:"ai_assistant_stats,omitempty"`
	AgentPermissions         bool `protobuf:"varint,6,opt,name=agent_permissions,json=agentPermissions,proto3" json:"agent_permissions,omitempty"`
	Team                     bool `protobuf:"varint,7,opt,name=team,proto3" json:"team,omitempty"`
	SelfServeCancel          bool `protobuf:"varint,8,opt,name=self_serve_cancel,json=selfServeCancel,proto3" json:"self_serve_cancel,omitempty"`
	K3SCertCnReset           bool `protobuf:"varint,9,opt,name=k3s_cert_cn_reset,json=k3sCertCnReset,proto3" json:"k3s_cert_cn_reset,omitempty"`
	Notification             bool `protobuf:"varint,10,opt,name=notification,proto3" json:"notification,omitempty"`
	MultiClusterK8SDashboard bool `protobuf:"varint,11,opt,name=multi_cluster_k8s_dashboard,json=multiClusterK8sDashboard,proto3" json:"multi_cluster_k8s_dashboard,omitempty"`
	ClusterAutoscaler        bool `protobuf:"varint,12,opt,name=cluster_autoscaler,json=clusterAutoscaler,proto3" json:"cluster_autoscaler,omitempty"`
	FleetManagement          bool `protobuf:"varint,13,opt,name=fleet_management,json=fleetManagement,proto3" json:"fleet_management,omitempty"`
	AiSupportEngineer        bool `protobuf:"varint,14,opt,name=ai_support_engineer,json=aiSupportEngineer,proto3" json:"ai_support_engineer,omitempty"`
	SecretManagement         bool `protobuf:"varint,15,opt,name=secret_management,json=secretManagement,proto3" json:"secret_management,omitempty"`
	KargoEnterprise          bool `protobuf:"varint,16,opt,name=kargo_enterprise,json=kargoEnterprise,proto3" json:"kargo_enterprise,omitempty"`
	AkiPermissionModel       bool `protobuf:"varint,17,opt,name=aki_permission_model,json=akiPermissionModel,proto3" json:"aki_permission_model,omitempty"`
	DragonflyDb              bool `protobuf:"varint,18,opt,name=dragonfly_db,json=dragonflyDb,proto3" json:"dragonfly_db,omitempty"`
}

func (x *SystemFeatureGates) Reset() {
	*x = SystemFeatureGates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_features_v1_features_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemFeatureGates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemFeatureGates) ProtoMessage() {}

func (x *SystemFeatureGates) ProtoReflect() protoreflect.Message {
	mi := &file_types_features_v1_features_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemFeatureGates.ProtoReflect.Descriptor instead.
func (*SystemFeatureGates) Descriptor() ([]byte, []int) {
	return file_types_features_v1_features_proto_rawDescGZIP(), []int{0}
}

func (x *SystemFeatureGates) GetSso() bool {
	if x != nil {
		return x.Sso
	}
	return false
}

func (x *SystemFeatureGates) GetKargo() bool {
	if x != nil {
		return x.Kargo
	}
	return false
}

func (x *SystemFeatureGates) GetAutoscaler() bool {
	if x != nil {
		return x.Autoscaler
	}
	return false
}

func (x *SystemFeatureGates) GetK3SProxyInformers() bool {
	if x != nil {
		return x.K3SProxyInformers
	}
	return false
}

func (x *SystemFeatureGates) GetAiAssistantStats() bool {
	if x != nil {
		return x.AiAssistantStats
	}
	return false
}

func (x *SystemFeatureGates) GetAgentPermissions() bool {
	if x != nil {
		return x.AgentPermissions
	}
	return false
}

func (x *SystemFeatureGates) GetTeam() bool {
	if x != nil {
		return x.Team
	}
	return false
}

func (x *SystemFeatureGates) GetSelfServeCancel() bool {
	if x != nil {
		return x.SelfServeCancel
	}
	return false
}

func (x *SystemFeatureGates) GetK3SCertCnReset() bool {
	if x != nil {
		return x.K3SCertCnReset
	}
	return false
}

func (x *SystemFeatureGates) GetNotification() bool {
	if x != nil {
		return x.Notification
	}
	return false
}

func (x *SystemFeatureGates) GetMultiClusterK8SDashboard() bool {
	if x != nil {
		return x.MultiClusterK8SDashboard
	}
	return false
}

func (x *SystemFeatureGates) GetClusterAutoscaler() bool {
	if x != nil {
		return x.ClusterAutoscaler
	}
	return false
}

func (x *SystemFeatureGates) GetFleetManagement() bool {
	if x != nil {
		return x.FleetManagement
	}
	return false
}

func (x *SystemFeatureGates) GetAiSupportEngineer() bool {
	if x != nil {
		return x.AiSupportEngineer
	}
	return false
}

func (x *SystemFeatureGates) GetSecretManagement() bool {
	if x != nil {
		return x.SecretManagement
	}
	return false
}

func (x *SystemFeatureGates) GetKargoEnterprise() bool {
	if x != nil {
		return x.KargoEnterprise
	}
	return false
}

func (x *SystemFeatureGates) GetAkiPermissionModel() bool {
	if x != nil {
		return x.AkiPermissionModel
	}
	return false
}

func (x *SystemFeatureGates) GetDragonflyDb() bool {
	if x != nil {
		return x.DragonflyDb
	}
	return false
}

type OrganizationFeatureGates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sso                         *bool    `protobuf:"varint,1,opt,name=sso,proto3,oneof" json:"sso,omitempty"`
	Shards                      []string `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
	Kargo                       *bool    `protobuf:"varint,3,opt,name=kargo,proto3,oneof" json:"kargo,omitempty"`
	K3SProxyInformers           *bool    `protobuf:"varint,4,opt,name=k3s_proxy_informers,json=k3sProxyInformers,proto3,oneof" json:"k3s_proxy_informers,omitempty"`
	Team                        *bool    `protobuf:"varint,5,opt,name=team,proto3,oneof" json:"team,omitempty"`
	AuditRecordExport           *bool    `protobuf:"varint,6,opt,name=audit_record_export,json=auditRecordExport,proto3,oneof" json:"audit_record_export,omitempty"`
	Workspaces                  *bool    `protobuf:"varint,7,opt,name=workspaces,proto3,oneof" json:"workspaces,omitempty"`
	CustomRoles                 *bool    `protobuf:"varint,8,opt,name=custom_roles,json=customRoles,proto3,oneof" json:"custom_roles,omitempty"`
	ScopedApiKeys               *bool    `protobuf:"varint,9,opt,name=scoped_api_keys,json=scopedApiKeys,proto3,oneof" json:"scoped_api_keys,omitempty"`
	ArgocdSso                   *bool    `protobuf:"varint,10,opt,name=argocd_sso,json=argocdSso,proto3,oneof" json:"argocd_sso,omitempty"`
	ArgocdHaControlPlane        *bool    `protobuf:"varint,11,opt,name=argocd_ha_control_plane,json=argocdHaControlPlane,proto3,oneof" json:"argocd_ha_control_plane,omitempty"`
	AkuityArgocdExtensions      *bool    `protobuf:"varint,12,opt,name=akuity_argocd_extensions,json=akuityArgocdExtensions,proto3,oneof" json:"akuity_argocd_extensions,omitempty"`
	AppOfApps                   *bool    `protobuf:"varint,13,opt,name=app_of_apps,json=appOfApps,proto3,oneof" json:"app_of_apps,omitempty"`
	ApplicationSetController    *bool    `protobuf:"varint,14,opt,name=application_set_controller,json=applicationSetController,proto3,oneof" json:"application_set_controller,omitempty"`
	ArgocdCustomSubdomain       *bool    `protobuf:"varint,15,opt,name=argocd_custom_subdomain,json=argocdCustomSubdomain,proto3,oneof" json:"argocd_custom_subdomain,omitempty"`
	ArgocdCustomDomain          *bool    `protobuf:"varint,16,opt,name=argocd_custom_domain,json=argocdCustomDomain,proto3,oneof" json:"argocd_custom_domain,omitempty"`
	ArgocdFlexibleArchitecture  *bool    `protobuf:"varint,17,opt,name=argocd_flexible_architecture,json=argocdFlexibleArchitecture,proto3,oneof" json:"argocd_flexible_architecture,omitempty"`
	ArgocdAgentStateReplication *bool    `protobuf:"varint,18,opt,name=argocd_agent_state_replication,json=argocdAgentStateReplication,proto3,oneof" json:"argocd_agent_state_replication,omitempty"`
	ArgocdDeepLinks             *bool    `protobuf:"varint,19,opt,name=argocd_deep_links,json=argocdDeepLinks,proto3,oneof" json:"argocd_deep_links,omitempty"`
	ArgocdCustomStyles          *bool    `protobuf:"varint,20,opt,name=argocd_custom_styles,json=argocdCustomStyles,proto3,oneof" json:"argocd_custom_styles,omitempty"`
	ConfigManagementPlugins     *bool    `protobuf:"varint,21,opt,name=config_management_plugins,json=configManagementPlugins,proto3,oneof" json:"config_management_plugins,omitempty"`
	AuditArchive                *bool    `protobuf:"varint,22,opt,name=audit_archive,json=auditArchive,proto3,oneof" json:"audit_archive,omitempty"`
	MultiClusterK8SDashboard    *bool    `protobuf:"varint,23,opt,name=multi_cluster_k8s_dashboard,json=multiClusterK8sDashboard,proto3,oneof" json:"multi_cluster_k8s_dashboard,omitempty"`
	ArgocdClusterIntegration    *bool    `protobuf:"varint,24,opt,name=argocd_cluster_integration,json=argocdClusterIntegration,proto3,oneof" json:"argocd_cluster_integration,omitempty"`
	Notification                *bool    `protobuf:"varint,25,opt,name=notification,proto3,oneof" json:"notification,omitempty"`
	ClusterAutoscaler           *bool    `protobuf:"varint,26,opt,name=cluster_autoscaler,json=clusterAutoscaler,proto3,oneof" json:"cluster_autoscaler,omitempty"`
	FleetManagement             *bool    `protobuf:"varint,27,opt,name=fleet_management,json=fleetManagement,proto3,oneof" json:"fleet_management,omitempty"`
	Pgpool                      *bool    `protobuf:"varint,28,opt,name=pgpool,proto3,oneof" json:"pgpool,omitempty"`
	AiSupportEngineer           *bool    `protobuf:"varint,29,opt,name=ai_support_engineer,json=aiSupportEngineer,proto3,oneof" json:"ai_support_engineer,omitempty"`
	Pgbouncer                   *bool    `protobuf:"varint,30,opt,name=pgbouncer,proto3,oneof" json:"pgbouncer,omitempty"`
	MultiFactorAuth             *bool    `protobuf:"varint,31,opt,name=multi_factor_auth,json=multiFactorAuth,proto3,oneof" json:"multi_factor_auth,omitempty"`
	KargoAnalysisLogs           *bool    `protobuf:"varint,32,opt,name=kargo_analysis_logs,json=kargoAnalysisLogs,proto3,oneof" json:"kargo_analysis_logs,omitempty"`
	KargoEnterprise             *bool    `protobuf:"varint,33,opt,name=kargo_enterprise,json=kargoEnterprise,proto3,oneof" json:"kargo_enterprise,omitempty"`
	OidcMap                     *bool    `protobuf:"varint,34,opt,name=oidc_map,json=oidcMap,proto3,oneof" json:"oidc_map,omitempty"`
	EksAddon                    *bool    `protobuf:"varint,35,opt,name=eks_addon,json=eksAddon,proto3,oneof" json:"eks_addon,omitempty"`
	K3STrafficReduction         *bool    `protobuf:"varint,36,opt,name=k3s_traffic_reduction,json=k3sTrafficReduction,proto3,oneof" json:"k3s_traffic_reduction,omitempty"`
	RedisTrafficReduction       *bool    `protobuf:"varint,37,opt,name=redis_traffic_reduction,json=redisTrafficReduction,proto3,oneof" json:"redis_traffic_reduction,omitempty"`
	DragonflyDb                 *bool    `protobuf:"varint,38,opt,name=dragonfly_db,json=dragonflyDb,proto3,oneof" json:"dragonfly_db,omitempty"`
}

func (x *OrganizationFeatureGates) Reset() {
	*x = OrganizationFeatureGates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_features_v1_features_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationFeatureGates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationFeatureGates) ProtoMessage() {}

func (x *OrganizationFeatureGates) ProtoReflect() protoreflect.Message {
	mi := &file_types_features_v1_features_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationFeatureGates.ProtoReflect.Descriptor instead.
func (*OrganizationFeatureGates) Descriptor() ([]byte, []int) {
	return file_types_features_v1_features_proto_rawDescGZIP(), []int{1}
}

func (x *OrganizationFeatureGates) GetSso() bool {
	if x != nil && x.Sso != nil {
		return *x.Sso
	}
	return false
}

func (x *OrganizationFeatureGates) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *OrganizationFeatureGates) GetKargo() bool {
	if x != nil && x.Kargo != nil {
		return *x.Kargo
	}
	return false
}

func (x *OrganizationFeatureGates) GetK3SProxyInformers() bool {
	if x != nil && x.K3SProxyInformers != nil {
		return *x.K3SProxyInformers
	}
	return false
}

func (x *OrganizationFeatureGates) GetTeam() bool {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return false
}

func (x *OrganizationFeatureGates) GetAuditRecordExport() bool {
	if x != nil && x.AuditRecordExport != nil {
		return *x.AuditRecordExport
	}
	return false
}

func (x *OrganizationFeatureGates) GetWorkspaces() bool {
	if x != nil && x.Workspaces != nil {
		return *x.Workspaces
	}
	return false
}

func (x *OrganizationFeatureGates) GetCustomRoles() bool {
	if x != nil && x.CustomRoles != nil {
		return *x.CustomRoles
	}
	return false
}

func (x *OrganizationFeatureGates) GetScopedApiKeys() bool {
	if x != nil && x.ScopedApiKeys != nil {
		return *x.ScopedApiKeys
	}
	return false
}

func (x *OrganizationFeatureGates) GetArgocdSso() bool {
	if x != nil && x.ArgocdSso != nil {
		return *x.ArgocdSso
	}
	return false
}

func (x *OrganizationFeatureGates) GetArgocdHaControlPlane() bool {
	if x != nil && x.ArgocdHaControlPlane != nil {
		return *x.ArgocdHaControlPlane
	}
	return false
}

func (x *OrganizationFeatureGates) GetAkuityArgocdExtensions() bool {
	if x != nil && x.AkuityArgocdExtensions != nil {
		return *x.AkuityArgocdExtensions
	}
	return false
}

func (x *OrganizationFeatureGates) GetAppOfApps() bool {
	if x != nil && x.AppOfApps != nil {
		return *x.AppOfApps
	}
	return false
}

func (x *OrganizationFeatureGates) GetApplicationSetController() bool {
	if x != nil && x.ApplicationSetController != nil {
		return *x.ApplicationSetController
	}
	return false
}

func (x *OrganizationFeatureGates) GetArgocdCustomSubdomain() bool {
	if x != nil && x.ArgocdCustomSubdomain != nil {
		return *x.ArgocdCustomSubdomain
	}
	return false
}

func (x *OrganizationFeatureGates) GetArgocdCustomDomain() bool {
	if x != nil && x.ArgocdCustomDomain != nil {
		return *x.ArgocdCustomDomain
	}
	return false
}

func (x *OrganizationFeatureGates) GetArgocdFlexibleArchitecture() bool {
	if x != nil && x.ArgocdFlexibleArchitecture != nil {
		return *x.ArgocdFlexibleArchitecture
	}
	return false
}

func (x *OrganizationFeatureGates) GetArgocdAgentStateReplication() bool {
	if x != nil && x.ArgocdAgentStateReplication != nil {
		return *x.ArgocdAgentStateReplication
	}
	return false
}

func (x *OrganizationFeatureGates) GetArgocdDeepLinks() bool {
	if x != nil && x.ArgocdDeepLinks != nil {
		return *x.ArgocdDeepLinks
	}
	return false
}

func (x *OrganizationFeatureGates) GetArgocdCustomStyles() bool {
	if x != nil && x.ArgocdCustomStyles != nil {
		return *x.ArgocdCustomStyles
	}
	return false
}

func (x *OrganizationFeatureGates) GetConfigManagementPlugins() bool {
	if x != nil && x.ConfigManagementPlugins != nil {
		return *x.ConfigManagementPlugins
	}
	return false
}

func (x *OrganizationFeatureGates) GetAuditArchive() bool {
	if x != nil && x.AuditArchive != nil {
		return *x.AuditArchive
	}
	return false
}

func (x *OrganizationFeatureGates) GetMultiClusterK8SDashboard() bool {
	if x != nil && x.MultiClusterK8SDashboard != nil {
		return *x.MultiClusterK8SDashboard
	}
	return false
}

func (x *OrganizationFeatureGates) GetArgocdClusterIntegration() bool {
	if x != nil && x.ArgocdClusterIntegration != nil {
		return *x.ArgocdClusterIntegration
	}
	return false
}

func (x *OrganizationFeatureGates) GetNotification() bool {
	if x != nil && x.Notification != nil {
		return *x.Notification
	}
	return false
}

func (x *OrganizationFeatureGates) GetClusterAutoscaler() bool {
	if x != nil && x.ClusterAutoscaler != nil {
		return *x.ClusterAutoscaler
	}
	return false
}

func (x *OrganizationFeatureGates) GetFleetManagement() bool {
	if x != nil && x.FleetManagement != nil {
		return *x.FleetManagement
	}
	return false
}

func (x *OrganizationFeatureGates) GetPgpool() bool {
	if x != nil && x.Pgpool != nil {
		return *x.Pgpool
	}
	return false
}

func (x *OrganizationFeatureGates) GetAiSupportEngineer() bool {
	if x != nil && x.AiSupportEngineer != nil {
		return *x.AiSupportEngineer
	}
	return false
}

func (x *OrganizationFeatureGates) GetPgbouncer() bool {
	if x != nil && x.Pgbouncer != nil {
		return *x.Pgbouncer
	}
	return false
}

func (x *OrganizationFeatureGates) GetMultiFactorAuth() bool {
	if x != nil && x.MultiFactorAuth != nil {
		return *x.MultiFactorAuth
	}
	return false
}

func (x *OrganizationFeatureGates) GetKargoAnalysisLogs() bool {
	if x != nil && x.KargoAnalysisLogs != nil {
		return *x.KargoAnalysisLogs
	}
	return false
}

func (x *OrganizationFeatureGates) GetKargoEnterprise() bool {
	if x != nil && x.KargoEnterprise != nil {
		return *x.KargoEnterprise
	}
	return false
}

func (x *OrganizationFeatureGates) GetOidcMap() bool {
	if x != nil && x.OidcMap != nil {
		return *x.OidcMap
	}
	return false
}

func (x *OrganizationFeatureGates) GetEksAddon() bool {
	if x != nil && x.EksAddon != nil {
		return *x.EksAddon
	}
	return false
}

func (x *OrganizationFeatureGates) GetK3STrafficReduction() bool {
	if x != nil && x.K3STrafficReduction != nil {
		return *x.K3STrafficReduction
	}
	return false
}

func (x *OrganizationFeatureGates) GetRedisTrafficReduction() bool {
	if x != nil && x.RedisTrafficReduction != nil {
		return *x.RedisTrafficReduction
	}
	return false
}

func (x *OrganizationFeatureGates) GetDragonflyDb() bool {
	if x != nil && x.DragonflyDb != nil {
		return *x.DragonflyDb
	}
	return false
}

type FeatureStatuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sso                         FeatureStatus `protobuf:"varint,1,opt,name=sso,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"sso,omitempty"`
	Kargo                       FeatureStatus `protobuf:"varint,2,opt,name=kargo,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"kargo,omitempty"`
	Autoscaler                  FeatureStatus `protobuf:"varint,3,opt,name=autoscaler,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"autoscaler,omitempty"`
	K3SProxyInformers           FeatureStatus `protobuf:"varint,4,opt,name=k3s_proxy_informers,json=k3sProxyInformers,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"k3s_proxy_informers,omitempty"`
	AiAssistantStats            FeatureStatus `protobuf:"varint,5,opt,name=ai_assistant_stats,json=aiAssistantStats,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"ai_assistant_stats,omitempty"`
	AgentPermissions            FeatureStatus `protobuf:"varint,6,opt,name=agent_permissions,json=agentPermissions,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"agent_permissions,omitempty"`
	Team                        FeatureStatus `protobuf:"varint,7,opt,name=team,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"team,omitempty"`
	SelfServeCancel             FeatureStatus `protobuf:"varint,8,opt,name=self_serve_cancel,json=selfServeCancel,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"self_serve_cancel,omitempty"`
	K3SCertCnReset              FeatureStatus `protobuf:"varint,9,opt,name=k3s_cert_cn_reset,json=k3sCertCnReset,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"k3s_cert_cn_reset,omitempty"`
	Notification                FeatureStatus `protobuf:"varint,10,opt,name=notification,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"notification,omitempty"`
	MultiClusterK8SDashboard    FeatureStatus `protobuf:"varint,11,opt,name=multi_cluster_k8s_dashboard,json=multiClusterK8sDashboard,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"multi_cluster_k8s_dashboard,omitempty"`
	ClusterAutoscaler           FeatureStatus `protobuf:"varint,12,opt,name=cluster_autoscaler,json=clusterAutoscaler,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"cluster_autoscaler,omitempty"`
	FleetManagement             FeatureStatus `protobuf:"varint,13,opt,name=fleet_management,json=fleetManagement,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"fleet_management,omitempty"`
	AiSupportEngineer           FeatureStatus `protobuf:"varint,14,opt,name=ai_support_engineer,json=aiSupportEngineer,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"ai_support_engineer,omitempty"`
	SecretManagement            FeatureStatus `protobuf:"varint,15,opt,name=secret_management,json=secretManagement,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"secret_management,omitempty"`
	Shards                      []string      `protobuf:"bytes,16,rep,name=shards,proto3" json:"shards,omitempty"`
	AuditRecordExport           FeatureStatus `protobuf:"varint,17,opt,name=audit_record_export,json=auditRecordExport,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"audit_record_export,omitempty"`
	Workspaces                  FeatureStatus `protobuf:"varint,18,opt,name=workspaces,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"workspaces,omitempty"`
	CustomRoles                 FeatureStatus `protobuf:"varint,19,opt,name=custom_roles,json=customRoles,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"custom_roles,omitempty"`
	ScopedApiKeys               FeatureStatus `protobuf:"varint,20,opt,name=scoped_api_keys,json=scopedApiKeys,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"scoped_api_keys,omitempty"`
	ArgocdSso                   FeatureStatus `protobuf:"varint,21,opt,name=argocd_sso,json=argocdSso,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"argocd_sso,omitempty"`
	ArgocdHaControlPlane        FeatureStatus `protobuf:"varint,22,opt,name=argocd_ha_control_plane,json=argocdHaControlPlane,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"argocd_ha_control_plane,omitempty"`
	AkuityArgocdExtensions      FeatureStatus `protobuf:"varint,23,opt,name=akuity_argocd_extensions,json=akuityArgocdExtensions,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"akuity_argocd_extensions,omitempty"`
	AppOfApps                   FeatureStatus `protobuf:"varint,24,opt,name=app_of_apps,json=appOfApps,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"app_of_apps,omitempty"`
	ApplicationSetController    FeatureStatus `protobuf:"varint,25,opt,name=application_set_controller,json=applicationSetController,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"application_set_controller,omitempty"`
	ArgocdCustomSubdomain       FeatureStatus `protobuf:"varint,26,opt,name=argocd_custom_subdomain,json=argocdCustomSubdomain,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"argocd_custom_subdomain,omitempty"`
	ArgocdCustomDomain          FeatureStatus `protobuf:"varint,27,opt,name=argocd_custom_domain,json=argocdCustomDomain,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"argocd_custom_domain,omitempty"`
	ArgocdFlexibleArchitecture  FeatureStatus `protobuf:"varint,28,opt,name=argocd_flexible_architecture,json=argocdFlexibleArchitecture,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"argocd_flexible_architecture,omitempty"`
	ArgocdAgentStateReplication FeatureStatus `protobuf:"varint,29,opt,name=argocd_agent_state_replication,json=argocdAgentStateReplication,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"argocd_agent_state_replication,omitempty"`
	ArgocdDeepLinks             FeatureStatus `protobuf:"varint,30,opt,name=argocd_deep_links,json=argocdDeepLinks,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"argocd_deep_links,omitempty"`
	ArgocdCustomStyles          FeatureStatus `protobuf:"varint,31,opt,name=argocd_custom_styles,json=argocdCustomStyles,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"argocd_custom_styles,omitempty"`
	ConfigManagementPlugins     FeatureStatus `protobuf:"varint,32,opt,name=config_management_plugins,json=configManagementPlugins,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"config_management_plugins,omitempty"`
	AuditArchive                FeatureStatus `protobuf:"varint,33,opt,name=audit_archive,json=auditArchive,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"audit_archive,omitempty"`
	ArgocdClusterIntegration    FeatureStatus `protobuf:"varint,34,opt,name=argocd_cluster_integration,json=argocdClusterIntegration,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"argocd_cluster_integration,omitempty"`
	Pgpool                      FeatureStatus `protobuf:"varint,35,opt,name=pgpool,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"pgpool,omitempty"`
	Pgbouncer                   FeatureStatus `protobuf:"varint,36,opt,name=pgbouncer,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"pgbouncer,omitempty"`
	MultiFactorAuth             FeatureStatus `protobuf:"varint,37,opt,name=multi_factor_auth,json=multiFactorAuth,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"multi_factor_auth,omitempty"`
	KargoAnalysisLogs           FeatureStatus `protobuf:"varint,38,opt,name=kargo_analysis_logs,json=kargoAnalysisLogs,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"kargo_analysis_logs,omitempty"`
	KargoEnterprise             FeatureStatus `protobuf:"varint,39,opt,name=kargo_enterprise,json=kargoEnterprise,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"kargo_enterprise,omitempty"`
	OidcMap                     FeatureStatus `protobuf:"varint,40,opt,name=oidc_map,json=oidcMap,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"oidc_map,omitempty"`
	EksAddon                    FeatureStatus `protobuf:"varint,41,opt,name=eks_addon,json=eksAddon,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"eks_addon,omitempty"`
	K3STrafficReduction         FeatureStatus `protobuf:"varint,42,opt,name=k3s_traffic_reduction,json=k3sTrafficReduction,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"k3s_traffic_reduction,omitempty"`
	RedisTrafficReduction       FeatureStatus `protobuf:"varint,43,opt,name=redis_traffic_reduction,json=redisTrafficReduction,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"redis_traffic_reduction,omitempty"`
	AkiPermissionModel          FeatureStatus `protobuf:"varint,44,opt,name=aki_permission_model,json=akiPermissionModel,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"aki_permission_model,omitempty"`
	DragonflyDb                 FeatureStatus `protobuf:"varint,45,opt,name=dragonfly_db,json=dragonflyDb,proto3,enum=akuity.types.features.v1.FeatureStatus" json:"dragonfly_db,omitempty"`
}

func (x *FeatureStatuses) Reset() {
	*x = FeatureStatuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_features_v1_features_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureStatuses) ProtoMessage() {}

func (x *FeatureStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_types_features_v1_features_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureStatuses.ProtoReflect.Descriptor instead.
func (*FeatureStatuses) Descriptor() ([]byte, []int) {
	return file_types_features_v1_features_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureStatuses) GetSso() FeatureStatus {
	if x != nil {
		return x.Sso
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetKargo() FeatureStatus {
	if x != nil {
		return x.Kargo
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetAutoscaler() FeatureStatus {
	if x != nil {
		return x.Autoscaler
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetK3SProxyInformers() FeatureStatus {
	if x != nil {
		return x.K3SProxyInformers
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetAiAssistantStats() FeatureStatus {
	if x != nil {
		return x.AiAssistantStats
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetAgentPermissions() FeatureStatus {
	if x != nil {
		return x.AgentPermissions
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetTeam() FeatureStatus {
	if x != nil {
		return x.Team
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetSelfServeCancel() FeatureStatus {
	if x != nil {
		return x.SelfServeCancel
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetK3SCertCnReset() FeatureStatus {
	if x != nil {
		return x.K3SCertCnReset
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetNotification() FeatureStatus {
	if x != nil {
		return x.Notification
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetMultiClusterK8SDashboard() FeatureStatus {
	if x != nil {
		return x.MultiClusterK8SDashboard
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetClusterAutoscaler() FeatureStatus {
	if x != nil {
		return x.ClusterAutoscaler
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetFleetManagement() FeatureStatus {
	if x != nil {
		return x.FleetManagement
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetAiSupportEngineer() FeatureStatus {
	if x != nil {
		return x.AiSupportEngineer
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetSecretManagement() FeatureStatus {
	if x != nil {
		return x.SecretManagement
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *FeatureStatuses) GetAuditRecordExport() FeatureStatus {
	if x != nil {
		return x.AuditRecordExport
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetWorkspaces() FeatureStatus {
	if x != nil {
		return x.Workspaces
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetCustomRoles() FeatureStatus {
	if x != nil {
		return x.CustomRoles
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetScopedApiKeys() FeatureStatus {
	if x != nil {
		return x.ScopedApiKeys
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetArgocdSso() FeatureStatus {
	if x != nil {
		return x.ArgocdSso
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetArgocdHaControlPlane() FeatureStatus {
	if x != nil {
		return x.ArgocdHaControlPlane
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetAkuityArgocdExtensions() FeatureStatus {
	if x != nil {
		return x.AkuityArgocdExtensions
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetAppOfApps() FeatureStatus {
	if x != nil {
		return x.AppOfApps
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetApplicationSetController() FeatureStatus {
	if x != nil {
		return x.ApplicationSetController
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetArgocdCustomSubdomain() FeatureStatus {
	if x != nil {
		return x.ArgocdCustomSubdomain
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetArgocdCustomDomain() FeatureStatus {
	if x != nil {
		return x.ArgocdCustomDomain
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetArgocdFlexibleArchitecture() FeatureStatus {
	if x != nil {
		return x.ArgocdFlexibleArchitecture
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetArgocdAgentStateReplication() FeatureStatus {
	if x != nil {
		return x.ArgocdAgentStateReplication
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetArgocdDeepLinks() FeatureStatus {
	if x != nil {
		return x.ArgocdDeepLinks
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetArgocdCustomStyles() FeatureStatus {
	if x != nil {
		return x.ArgocdCustomStyles
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetConfigManagementPlugins() FeatureStatus {
	if x != nil {
		return x.ConfigManagementPlugins
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetAuditArchive() FeatureStatus {
	if x != nil {
		return x.AuditArchive
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetArgocdClusterIntegration() FeatureStatus {
	if x != nil {
		return x.ArgocdClusterIntegration
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetPgpool() FeatureStatus {
	if x != nil {
		return x.Pgpool
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetPgbouncer() FeatureStatus {
	if x != nil {
		return x.Pgbouncer
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetMultiFactorAuth() FeatureStatus {
	if x != nil {
		return x.MultiFactorAuth
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetKargoAnalysisLogs() FeatureStatus {
	if x != nil {
		return x.KargoAnalysisLogs
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetKargoEnterprise() FeatureStatus {
	if x != nil {
		return x.KargoEnterprise
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetOidcMap() FeatureStatus {
	if x != nil {
		return x.OidcMap
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetEksAddon() FeatureStatus {
	if x != nil {
		return x.EksAddon
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetK3STrafficReduction() FeatureStatus {
	if x != nil {
		return x.K3STrafficReduction
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetRedisTrafficReduction() FeatureStatus {
	if x != nil {
		return x.RedisTrafficReduction
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetAkiPermissionModel() FeatureStatus {
	if x != nil {
		return x.AkiPermissionModel
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

func (x *FeatureStatuses) GetDragonflyDb() FeatureStatus {
	if x != nil {
		return x.DragonflyDb
	}
	return FeatureStatus_FEATURE_STATUS_UNSPECIFIED
}

// OrganizationQuota is a quota for the given organization.
// NOTE: It is encouraged to define quota fields in `double` or `int64` to
// avoid type cast failure.
type OrganizationQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxInstances             int64   `protobuf:"varint,1,opt,name=max_instances,json=maxInstances,proto3" json:"max_instances,omitempty"`
	MaxClusters              int64   `protobuf:"varint,2,opt,name=max_clusters,json=maxClusters,proto3" json:"max_clusters,omitempty"`
	MaxApplications          int64   `protobuf:"varint,3,opt,name=max_applications,json=maxApplications,proto3" json:"max_applications,omitempty"`
	MaxKargoInstances        int64   `protobuf:"varint,4,opt,name=max_kargo_instances,json=maxKargoInstances,proto3" json:"max_kargo_instances,omitempty"`
	MaxKargoProjects         int64   `protobuf:"varint,5,opt,name=max_kargo_projects,json=maxKargoProjects,proto3" json:"max_kargo_projects,omitempty"` // Deprecated: we use stages now
	MaxKargoAgents           int64   `protobuf:"varint,6,opt,name=max_kargo_agents,json=maxKargoAgents,proto3" json:"max_kargo_agents,omitempty"`
	AuditRecordMonths        int64   `protobuf:"varint,7,opt,name=audit_record_months,json=auditRecordMonths,proto3" json:"audit_record_months,omitempty"`
	AuditRecordArchiveMonths int64   `protobuf:"varint,8,opt,name=audit_record_archive_months,json=auditRecordArchiveMonths,proto3" json:"audit_record_archive_months,omitempty"`
	MaxOrgMembers            int64   `protobuf:"varint,9,opt,name=max_org_members,json=maxOrgMembers,proto3" json:"max_org_members,omitempty"`
	MaxWorkspaces            int64   `protobuf:"varint,10,opt,name=max_workspaces,json=maxWorkspaces,proto3" json:"max_workspaces,omitempty"`
	MaxKargoStages           int64   `protobuf:"varint,11,opt,name=max_kargo_stages,json=maxKargoStages,proto3" json:"max_kargo_stages,omitempty"`
	MaxAiCostPerMonth        float64 `protobuf:"fixed64,12,opt,name=max_ai_cost_per_month,json=maxAiCostPerMonth,proto3" json:"max_ai_cost_per_month,omitempty"`
}

func (x *OrganizationQuota) Reset() {
	*x = OrganizationQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_features_v1_features_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationQuota) ProtoMessage() {}

func (x *OrganizationQuota) ProtoReflect() protoreflect.Message {
	mi := &file_types_features_v1_features_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationQuota.ProtoReflect.Descriptor instead.
func (*OrganizationQuota) Descriptor() ([]byte, []int) {
	return file_types_features_v1_features_proto_rawDescGZIP(), []int{3}
}

func (x *OrganizationQuota) GetMaxInstances() int64 {
	if x != nil {
		return x.MaxInstances
	}
	return 0
}

func (x *OrganizationQuota) GetMaxClusters() int64 {
	if x != nil {
		return x.MaxClusters
	}
	return 0
}

func (x *OrganizationQuota) GetMaxApplications() int64 {
	if x != nil {
		return x.MaxApplications
	}
	return 0
}

func (x *OrganizationQuota) GetMaxKargoInstances() int64 {
	if x != nil {
		return x.MaxKargoInstances
	}
	return 0
}

func (x *OrganizationQuota) GetMaxKargoProjects() int64 {
	if x != nil {
		return x.MaxKargoProjects
	}
	return 0
}

func (x *OrganizationQuota) GetMaxKargoAgents() int64 {
	if x != nil {
		return x.MaxKargoAgents
	}
	return 0
}

func (x *OrganizationQuota) GetAuditRecordMonths() int64 {
	if x != nil {
		return x.AuditRecordMonths
	}
	return 0
}

func (x *OrganizationQuota) GetAuditRecordArchiveMonths() int64 {
	if x != nil {
		return x.AuditRecordArchiveMonths
	}
	return 0
}

func (x *OrganizationQuota) GetMaxOrgMembers() int64 {
	if x != nil {
		return x.MaxOrgMembers
	}
	return 0
}

func (x *OrganizationQuota) GetMaxWorkspaces() int64 {
	if x != nil {
		return x.MaxWorkspaces
	}
	return 0
}

func (x *OrganizationQuota) GetMaxKargoStages() int64 {
	if x != nil {
		return x.MaxKargoStages
	}
	return 0
}

func (x *OrganizationQuota) GetMaxAiCostPerMonth() float64 {
	if x != nil {
		return x.MaxAiCostPerMonth
	}
	return 0
}

// OrganizationUsage is the usage of resources for the given organization.
type OrganizationUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentInstances                   int64   `protobuf:"varint,1,opt,name=current_instances,json=currentInstances,proto3" json:"current_instances,omitempty"`
	CurrentClusters                    int64   `protobuf:"varint,2,opt,name=current_clusters,json=currentClusters,proto3" json:"current_clusters,omitempty"`
	CurrentApplications                int64   `protobuf:"varint,3,opt,name=current_applications,json=currentApplications,proto3" json:"current_applications,omitempty"`
	CurrentKargoInstances              int64   `protobuf:"varint,4,opt,name=current_kargo_instances,json=currentKargoInstances,proto3" json:"current_kargo_instances,omitempty"`
	CurrentKargoProjects               int64   `protobuf:"varint,5,opt,name=current_kargo_projects,json=currentKargoProjects,proto3" json:"current_kargo_projects,omitempty"` // Deprecated: we use stages now
	CurrentKargoAgents                 int64   `protobuf:"varint,6,opt,name=current_kargo_agents,json=currentKargoAgents,proto3" json:"current_kargo_agents,omitempty"`
	CurrentOrgMembers                  int64   `protobuf:"varint,7,opt,name=current_org_members,json=currentOrgMembers,proto3" json:"current_org_members,omitempty"`
	CurrentWorkspaces                  int64   `protobuf:"varint,8,opt,name=current_workspaces,json=currentWorkspaces,proto3" json:"current_workspaces,omitempty"`
	CurrentKargoStages                 int64   `protobuf:"varint,9,opt,name=current_kargo_stages,json=currentKargoStages,proto3" json:"current_kargo_stages,omitempty"`
	CurrentAiInputTokensPerMonth       int64   `protobuf:"varint,10,opt,name=current_ai_input_tokens_per_month,json=currentAiInputTokensPerMonth,proto3" json:"current_ai_input_tokens_per_month,omitempty"`
	CurrentAiInputCachedTokensPerMonth int64   `protobuf:"varint,11,opt,name=current_ai_input_cached_tokens_per_month,json=currentAiInputCachedTokensPerMonth,proto3" json:"current_ai_input_cached_tokens_per_month,omitempty"`
	CurrentAiOutputTokensPerMonth      int64   `protobuf:"varint,12,opt,name=current_ai_output_tokens_per_month,json=currentAiOutputTokensPerMonth,proto3" json:"current_ai_output_tokens_per_month,omitempty"`
	CurrentAiCostPerMonth              float64 `protobuf:"fixed64,13,opt,name=current_ai_cost_per_month,json=currentAiCostPerMonth,proto3" json:"current_ai_cost_per_month,omitempty"`
}

func (x *OrganizationUsage) Reset() {
	*x = OrganizationUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_features_v1_features_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationUsage) ProtoMessage() {}

func (x *OrganizationUsage) ProtoReflect() protoreflect.Message {
	mi := &file_types_features_v1_features_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationUsage.ProtoReflect.Descriptor instead.
func (*OrganizationUsage) Descriptor() ([]byte, []int) {
	return file_types_features_v1_features_proto_rawDescGZIP(), []int{4}
}

func (x *OrganizationUsage) GetCurrentInstances() int64 {
	if x != nil {
		return x.CurrentInstances
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentClusters() int64 {
	if x != nil {
		return x.CurrentClusters
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentApplications() int64 {
	if x != nil {
		return x.CurrentApplications
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentKargoInstances() int64 {
	if x != nil {
		return x.CurrentKargoInstances
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentKargoProjects() int64 {
	if x != nil {
		return x.CurrentKargoProjects
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentKargoAgents() int64 {
	if x != nil {
		return x.CurrentKargoAgents
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentOrgMembers() int64 {
	if x != nil {
		return x.CurrentOrgMembers
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentWorkspaces() int64 {
	if x != nil {
		return x.CurrentWorkspaces
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentKargoStages() int64 {
	if x != nil {
		return x.CurrentKargoStages
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentAiInputTokensPerMonth() int64 {
	if x != nil {
		return x.CurrentAiInputTokensPerMonth
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentAiInputCachedTokensPerMonth() int64 {
	if x != nil {
		return x.CurrentAiInputCachedTokensPerMonth
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentAiOutputTokensPerMonth() int64 {
	if x != nil {
		return x.CurrentAiOutputTokensPerMonth
	}
	return 0
}

func (x *OrganizationUsage) GetCurrentAiCostPerMonth() float64 {
	if x != nil {
		return x.CurrentAiCostPerMonth
	}
	return 0
}

var File_types_features_v1_features_proto protoreflect.FileDescriptor

var file_types_features_v1_features_proto_rawDesc = []byte{
	0x0a, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xec, 0x05, 0x0a,
	0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x73, 0x73, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6b,
	0x33, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6b, 0x33, 0x73, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x69, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x69, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x6b, 0x33, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x6b, 0x33, 0x73, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x38, 0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x61, 0x69, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x69, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6b,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6b, 0x69, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6b, 0x69, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x66, 0x6c, 0x79, 0x5f, 0x64, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x66, 0x6c, 0x79, 0x44, 0x62, 0x22, 0xdf, 0x14, 0x0a, 0x18,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x73, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x73, 0x73, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6b, 0x61, 0x72, 0x67, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6b, 0x33, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x11, 0x6b, 0x33, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x06, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0d, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x73, 0x73, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x09, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x53, 0x73, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x68, 0x61,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x14, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x48, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x18, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0a, 0x52, 0x16, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x09, 0x61, 0x70, 0x70, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x15, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0e, 0x52, 0x12, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x5f, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0f, 0x52, 0x1a, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x1e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x1b, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x0f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x12, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6b, 0x38, 0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x18, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x17, 0x52, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x11, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x0f,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x1a, 0x52, 0x06, 0x70, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x61, 0x69, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x11,
	0x61, 0x69, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x67, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1c, 0x52, 0x09, 0x70, 0x67, 0x62, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x1d, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6b, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1e, 0x52, 0x11, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1f, 0x52, 0x0f, 0x6b, 0x61, 0x72, 0x67, 0x6f,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x20, 0x52, 0x07, 0x6f, 0x69, 0x64, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x65, 0x6b, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x21, 0x52, 0x08, 0x65, 0x6b, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x6b, 0x33, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x48, 0x22,
	0x52, 0x13, 0x6b, 0x33, 0x73, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x48, 0x23, 0x52, 0x15, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x66,
	0x6c, 0x79, 0x5f, 0x64, 0x62, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x48, 0x24, 0x52, 0x0b, 0x64,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x66, 0x6c, 0x79, 0x44, 0x62, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x73, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x6b, 0x33, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x73, 0x73, 0x6f, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x68, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x66, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x5f, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x38,
	0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x67, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6f, 0x69, 0x64, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6b, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6b, 0x33, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x66, 0x6c, 0x79, 0x5f, 0x64, 0x62, 0x22, 0xba, 0x1d,
	0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x73, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03, 0x73, 0x73, 0x6f, 0x12, 0x3d, 0x0a, 0x05,
	0x6b, 0x61, 0x72, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x12, 0x47, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x13, 0x6b, 0x33, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6b, 0x33, 0x73, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a,
	0x12, 0x61, 0x69, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x61, 0x69, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x6c,
	0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x52, 0x0a, 0x11,
	0x6b, 0x33, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0e, 0x6b, 0x33, 0x73, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x4b, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a,
	0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b,
	0x38, 0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x52, 0x0a,
	0x10, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x57, 0x0a, 0x13, 0x61, 0x69, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x61, 0x69, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x47, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x5f, 0x73, 0x73, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x53, 0x73, 0x6f, 0x12,
	0x5e, 0x0a, 0x17, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x68, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x48, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12,
	0x61, 0x0a, 0x18, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x16, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x73, 0x12, 0x65, 0x0a, 0x1a, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x5f, 0x0a, 0x17, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x14, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x69,
	0x0a, 0x1c, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x6c, 0x0a, 0x1e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1b, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x11, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x59, 0x0a, 0x14,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0d,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x65, 0x0a, 0x1a, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x70, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x67, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x70, 0x67, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x11, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x57,
	0x0a, 0x13, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x6b, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6b, 0x61, 0x72, 0x67,
	0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x6f,
	0x69, 0x64, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x6f, 0x69, 0x64, 0x63, 0x4d, 0x61, 0x70, 0x12,
	0x44, 0x0a, 0x09, 0x65, 0x6b, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x65, 0x6b, 0x73,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x15, 0x6b, 0x33, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6b,
	0x33, 0x73, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x14, 0x61, 0x6b, 0x69, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x6b, 0x69, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4a,
	0x0a, 0x0c, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x66, 0x6c, 0x79, 0x5f, 0x64, 0x62, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x64,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x66, 0x6c, 0x79, 0x44, 0x62, 0x22, 0xa8, 0x04, 0x0a, 0x11, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x4b, 0x61, 0x72, 0x67, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x6d, 0x61, 0x78, 0x4b, 0x61, 0x72, 0x67, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x4b, 0x61, 0x72, 0x67, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x61, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4b, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x69, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x41, 0x69, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xf3, 0x05, 0x0a, 0x11, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4b, 0x61, 0x72, 0x67, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x61, 0x72, 0x67, 0x6f, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x61, 0x72, 0x67, 0x6f,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x61, 0x72, 0x67,
	0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x21, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x69, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x69, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x54, 0x0a, 0x28, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x69, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x69, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x69, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x69, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x69, 0x43,
	0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x2a, 0x8a, 0x01, 0x0a, 0x0d,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x1a, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0xfe, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x69, 0x6f, 0x2f,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x54, 0x46, 0xaa, 0x02,
	0x18, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x41, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x5c, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x5c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x41, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_types_features_v1_features_proto_rawDescOnce sync.Once
	file_types_features_v1_features_proto_rawDescData = file_types_features_v1_features_proto_rawDesc
)

func file_types_features_v1_features_proto_rawDescGZIP() []byte {
	file_types_features_v1_features_proto_rawDescOnce.Do(func() {
		file_types_features_v1_features_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_features_v1_features_proto_rawDescData)
	})
	return file_types_features_v1_features_proto_rawDescData
}

var file_types_features_v1_features_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_types_features_v1_features_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_types_features_v1_features_proto_goTypes = []interface{}{
	(FeatureStatus)(0),               // 0: akuity.types.features.v1.FeatureStatus
	(*SystemFeatureGates)(nil),       // 1: akuity.types.features.v1.SystemFeatureGates
	(*OrganizationFeatureGates)(nil), // 2: akuity.types.features.v1.OrganizationFeatureGates
	(*FeatureStatuses)(nil),          // 3: akuity.types.features.v1.FeatureStatuses
	(*OrganizationQuota)(nil),        // 4: akuity.types.features.v1.OrganizationQuota
	(*OrganizationUsage)(nil),        // 5: akuity.types.features.v1.OrganizationUsage
}
var file_types_features_v1_features_proto_depIdxs = []int32{
	0,  // 0: akuity.types.features.v1.FeatureStatuses.sso:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 1: akuity.types.features.v1.FeatureStatuses.kargo:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 2: akuity.types.features.v1.FeatureStatuses.autoscaler:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 3: akuity.types.features.v1.FeatureStatuses.k3s_proxy_informers:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 4: akuity.types.features.v1.FeatureStatuses.ai_assistant_stats:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 5: akuity.types.features.v1.FeatureStatuses.agent_permissions:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 6: akuity.types.features.v1.FeatureStatuses.team:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 7: akuity.types.features.v1.FeatureStatuses.self_serve_cancel:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 8: akuity.types.features.v1.FeatureStatuses.k3s_cert_cn_reset:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 9: akuity.types.features.v1.FeatureStatuses.notification:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 10: akuity.types.features.v1.FeatureStatuses.multi_cluster_k8s_dashboard:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 11: akuity.types.features.v1.FeatureStatuses.cluster_autoscaler:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 12: akuity.types.features.v1.FeatureStatuses.fleet_management:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 13: akuity.types.features.v1.FeatureStatuses.ai_support_engineer:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 14: akuity.types.features.v1.FeatureStatuses.secret_management:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 15: akuity.types.features.v1.FeatureStatuses.audit_record_export:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 16: akuity.types.features.v1.FeatureStatuses.workspaces:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 17: akuity.types.features.v1.FeatureStatuses.custom_roles:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 18: akuity.types.features.v1.FeatureStatuses.scoped_api_keys:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 19: akuity.types.features.v1.FeatureStatuses.argocd_sso:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 20: akuity.types.features.v1.FeatureStatuses.argocd_ha_control_plane:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 21: akuity.types.features.v1.FeatureStatuses.akuity_argocd_extensions:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 22: akuity.types.features.v1.FeatureStatuses.app_of_apps:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 23: akuity.types.features.v1.FeatureStatuses.application_set_controller:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 24: akuity.types.features.v1.FeatureStatuses.argocd_custom_subdomain:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 25: akuity.types.features.v1.FeatureStatuses.argocd_custom_domain:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 26: akuity.types.features.v1.FeatureStatuses.argocd_flexible_architecture:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 27: akuity.types.features.v1.FeatureStatuses.argocd_agent_state_replication:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 28: akuity.types.features.v1.FeatureStatuses.argocd_deep_links:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 29: akuity.types.features.v1.FeatureStatuses.argocd_custom_styles:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 30: akuity.types.features.v1.FeatureStatuses.config_management_plugins:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 31: akuity.types.features.v1.FeatureStatuses.audit_archive:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 32: akuity.types.features.v1.FeatureStatuses.argocd_cluster_integration:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 33: akuity.types.features.v1.FeatureStatuses.pgpool:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 34: akuity.types.features.v1.FeatureStatuses.pgbouncer:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 35: akuity.types.features.v1.FeatureStatuses.multi_factor_auth:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 36: akuity.types.features.v1.FeatureStatuses.kargo_analysis_logs:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 37: akuity.types.features.v1.FeatureStatuses.kargo_enterprise:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 38: akuity.types.features.v1.FeatureStatuses.oidc_map:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 39: akuity.types.features.v1.FeatureStatuses.eks_addon:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 40: akuity.types.features.v1.FeatureStatuses.k3s_traffic_reduction:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 41: akuity.types.features.v1.FeatureStatuses.redis_traffic_reduction:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 42: akuity.types.features.v1.FeatureStatuses.aki_permission_model:type_name -> akuity.types.features.v1.FeatureStatus
	0,  // 43: akuity.types.features.v1.FeatureStatuses.dragonfly_db:type_name -> akuity.types.features.v1.FeatureStatus
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_types_features_v1_features_proto_init() }
func file_types_features_v1_features_proto_init() {
	if File_types_features_v1_features_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_features_v1_features_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemFeatureGates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_features_v1_features_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationFeatureGates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_features_v1_features_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureStatuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_features_v1_features_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_features_v1_features_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_features_v1_features_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_features_v1_features_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_features_v1_features_proto_goTypes,
		DependencyIndexes: file_types_features_v1_features_proto_depIdxs,
		EnumInfos:         file_types_features_v1_features_proto_enumTypes,
		MessageInfos:      file_types_features_v1_features_proto_msgTypes,
	}.Build()
	File_types_features_v1_features_proto = out.File
	file_types_features_v1_features_proto_rawDesc = nil
	file_types_features_v1_features_proto_goTypes = nil
	file_types_features_v1_features_proto_depIdxs = nil
}
