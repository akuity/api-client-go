// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: argocd/v1/argocd.proto

package argocdv1

import (
	v1 "github.com/akuity/api-client-go/pkg/api/gen/types/id/v1"
	v11 "github.com/akuity/api-client-go/pkg/api/gen/types/status/health/v1"
	v12 "github.com/akuity/api-client-go/pkg/api/gen/types/status/reconciliation/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterSize int32

const (
	ClusterSize_CLUSTER_SIZE_UNSPECIFIED ClusterSize = 0
	ClusterSize_CLUSTER_SIZE_SMALL       ClusterSize = 1
	ClusterSize_CLUSTER_SIZE_MEDIUM      ClusterSize = 2
	ClusterSize_CLUSTER_SIZE_LARGE       ClusterSize = 3
)

// Enum value maps for ClusterSize.
var (
	ClusterSize_name = map[int32]string{
		0: "CLUSTER_SIZE_UNSPECIFIED",
		1: "CLUSTER_SIZE_SMALL",
		2: "CLUSTER_SIZE_MEDIUM",
		3: "CLUSTER_SIZE_LARGE",
	}
	ClusterSize_value = map[string]int32{
		"CLUSTER_SIZE_UNSPECIFIED": 0,
		"CLUSTER_SIZE_SMALL":       1,
		"CLUSTER_SIZE_MEDIUM":      2,
		"CLUSTER_SIZE_LARGE":       3,
	}
)

func (x ClusterSize) Enum() *ClusterSize {
	p := new(ClusterSize)
	*p = x
	return p
}

func (x ClusterSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterSize) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[0].Descriptor()
}

func (ClusterSize) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[0]
}

func (x ClusterSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterSize.Descriptor instead.
func (ClusterSize) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{0}
}

type TenantPhase int32

const (
	TenantPhase_TENANT_PHASE_UNSPECIFIED TenantPhase = 0
	TenantPhase_TENANT_PHASE_HEALTHY     TenantPhase = 1
	TenantPhase_TENANT_PHASE_PROGRESSING TenantPhase = 2
	TenantPhase_TENANT_PHASE_DEGRADED    TenantPhase = 3
	TenantPhase_TENANT_PHASE_UNKNOWN     TenantPhase = 4
)

// Enum value maps for TenantPhase.
var (
	TenantPhase_name = map[int32]string{
		0: "TENANT_PHASE_UNSPECIFIED",
		1: "TENANT_PHASE_HEALTHY",
		2: "TENANT_PHASE_PROGRESSING",
		3: "TENANT_PHASE_DEGRADED",
		4: "TENANT_PHASE_UNKNOWN",
	}
	TenantPhase_value = map[string]int32{
		"TENANT_PHASE_UNSPECIFIED": 0,
		"TENANT_PHASE_HEALTHY":     1,
		"TENANT_PHASE_PROGRESSING": 2,
		"TENANT_PHASE_DEGRADED":    3,
		"TENANT_PHASE_UNKNOWN":     4,
	}
)

func (x TenantPhase) Enum() *TenantPhase {
	p := new(TenantPhase)
	*p = x
	return p
}

func (x TenantPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TenantPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[1].Descriptor()
}

func (TenantPhase) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[1]
}

func (x TenantPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TenantPhase.Descriptor instead.
func (TenantPhase) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{1}
}

type ListOrganizationInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ListOrganizationInstancesRequest) Reset() {
	*x = ListOrganizationInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationInstancesRequest) ProtoMessage() {}

func (x *ListOrganizationInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationInstancesRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{0}
}

func (x *ListOrganizationInstancesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type ListOrganizationInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ListOrganizationInstancesResponse) Reset() {
	*x = ListOrganizationInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationInstancesResponse) ProtoMessage() {}

func (x *ListOrganizationInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListOrganizationInstancesResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{1}
}

func (x *ListOrganizationInstancesResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type CreateOrganizationInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version        string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Description    *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *CreateOrganizationInstanceRequest) Reset() {
	*x = CreateOrganizationInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationInstanceRequest) ProtoMessage() {}

func (x *CreateOrganizationInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOrganizationInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateOrganizationInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationInstanceRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateOrganizationInstanceRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CreateOrganizationInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *CreateOrganizationInstanceResponse) Reset() {
	*x = CreateOrganizationInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationInstanceResponse) ProtoMessage() {}

func (x *CreateOrganizationInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateOrganizationInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrganizationInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type GetOrganizationInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	IdType         v1.Type `protobuf:"varint,2,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id             string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrganizationInstanceRequest) Reset() {
	*x = GetOrganizationInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationInstanceRequest) ProtoMessage() {}

func (x *GetOrganizationInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{4}
}

func (x *GetOrganizationInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetOrganizationInstanceRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *GetOrganizationInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrganizationInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *GetOrganizationInstanceResponse) Reset() {
	*x = GetOrganizationInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationInstanceResponse) ProtoMessage() {}

func (x *GetOrganizationInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationInstanceResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{5}
}

func (x *GetOrganizationInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type PatchOrganizationInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string           `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Patch          *structpb.Struct `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *PatchOrganizationInstanceRequest) Reset() {
	*x = PatchOrganizationInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationInstanceRequest) ProtoMessage() {}

func (x *PatchOrganizationInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationInstanceRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{6}
}

func (x *PatchOrganizationInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchOrganizationInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchOrganizationInstanceRequest) GetPatch() *structpb.Struct {
	if x != nil {
		return x.Patch
	}
	return nil
}

type PatchOrganizationInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *PatchOrganizationInstanceResponse) Reset() {
	*x = PatchOrganizationInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationInstanceResponse) ProtoMessage() {}

func (x *PatchOrganizationInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationInstanceResponse.ProtoReflect.Descriptor instead.
func (*PatchOrganizationInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{7}
}

func (x *PatchOrganizationInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type UpdateOrganizationInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string    `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Instance       *Instance `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *UpdateOrganizationInstanceRequest) Reset() {
	*x = UpdateOrganizationInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationInstanceRequest) ProtoMessage() {}

func (x *UpdateOrganizationInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationInstanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateOrganizationInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateOrganizationInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOrganizationInstanceRequest) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type UpdateOrganizationInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *UpdateOrganizationInstanceResponse) Reset() {
	*x = UpdateOrganizationInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationInstanceResponse) ProtoMessage() {}

func (x *UpdateOrganizationInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationInstanceResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateOrganizationInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type DeleteOrganizationInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteOrganizationInstanceRequest) Reset() {
	*x = DeleteOrganizationInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationInstanceRequest) ProtoMessage() {}

func (x *DeleteOrganizationInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteOrganizationInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteOrganizationInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteOrganizationInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOrganizationInstanceResponse) Reset() {
	*x = DeleteOrganizationInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationInstanceResponse) ProtoMessage() {}

func (x *DeleteOrganizationInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationInstanceResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{11}
}

type ListOrganizationInstanceClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *ListOrganizationInstanceClustersRequest) Reset() {
	*x = ListOrganizationInstanceClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationInstanceClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationInstanceClustersRequest) ProtoMessage() {}

func (x *ListOrganizationInstanceClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationInstanceClustersRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationInstanceClustersRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{12}
}

func (x *ListOrganizationInstanceClustersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListOrganizationInstanceClustersRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type ListOrganizationInstanceClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ListOrganizationInstanceClustersResponse) Reset() {
	*x = ListOrganizationInstanceClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationInstanceClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationInstanceClustersResponse) ProtoMessage() {}

func (x *ListOrganizationInstanceClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationInstanceClustersResponse.ProtoReflect.Descriptor instead.
func (*ListOrganizationInstanceClustersResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{13}
}

func (x *ListOrganizationInstanceClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type CreateOrganizationInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId  string       `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId      string       `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name            string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description     string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Namespace       string       `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceScoped bool         `protobuf:"varint,6,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"`
	Data            *ClusterData `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Upsert          bool         `protobuf:"varint,8,opt,name=upsert,proto3" json:"upsert,omitempty"`
}

func (x *CreateOrganizationInstanceClusterRequest) Reset() {
	*x = CreateOrganizationInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationInstanceClusterRequest) ProtoMessage() {}

func (x *CreateOrganizationInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{14}
}

func (x *CreateOrganizationInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateOrganizationInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateOrganizationInstanceClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationInstanceClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateOrganizationInstanceClusterRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateOrganizationInstanceClusterRequest) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *CreateOrganizationInstanceClusterRequest) GetData() *ClusterData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateOrganizationInstanceClusterRequest) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

type CreateOrganizationInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *CreateOrganizationInstanceClusterResponse) Reset() {
	*x = CreateOrganizationInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationInstanceClusterResponse) ProtoMessage() {}

func (x *CreateOrganizationInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateOrganizationInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{15}
}

func (x *CreateOrganizationInstanceClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type GetOrganizationInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string  `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	IdType         v1.Type `protobuf:"varint,3,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id             string  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrganizationInstanceClusterRequest) Reset() {
	*x = GetOrganizationInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationInstanceClusterRequest) ProtoMessage() {}

func (x *GetOrganizationInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{16}
}

func (x *GetOrganizationInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetOrganizationInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetOrganizationInstanceClusterRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *GetOrganizationInstanceClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrganizationInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *GetOrganizationInstanceClusterResponse) Reset() {
	*x = GetOrganizationInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationInstanceClusterResponse) ProtoMessage() {}

func (x *GetOrganizationInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{17}
}

func (x *GetOrganizationInstanceClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type GetOrganizationInstanceClusterManifestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrganizationInstanceClusterManifestsRequest) Reset() {
	*x = GetOrganizationInstanceClusterManifestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationInstanceClusterManifestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationInstanceClusterManifestsRequest) ProtoMessage() {}

func (x *GetOrganizationInstanceClusterManifestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationInstanceClusterManifestsRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationInstanceClusterManifestsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrganizationInstanceClusterManifestsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetOrganizationInstanceClusterManifestsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetOrganizationInstanceClusterManifestsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrganizationInstanceClusterManifestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manifests string `protobuf:"bytes,1,opt,name=manifests,proto3" json:"manifests,omitempty"`
}

func (x *GetOrganizationInstanceClusterManifestsResponse) Reset() {
	*x = GetOrganizationInstanceClusterManifestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationInstanceClusterManifestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationInstanceClusterManifestsResponse) ProtoMessage() {}

func (x *GetOrganizationInstanceClusterManifestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationInstanceClusterManifestsResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationInstanceClusterManifestsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{19}
}

func (x *GetOrganizationInstanceClusterManifestsResponse) GetManifests() string {
	if x != nil {
		return x.Manifests
	}
	return ""
}

type UpdateOrganizationInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string       `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string       `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Description    string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Data           *ClusterData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateOrganizationInstanceClusterRequest) Reset() {
	*x = UpdateOrganizationInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationInstanceClusterRequest) ProtoMessage() {}

func (x *UpdateOrganizationInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateOrganizationInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateOrganizationInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateOrganizationInstanceClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOrganizationInstanceClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateOrganizationInstanceClusterRequest) GetData() *ClusterData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateOrganizationInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *UpdateOrganizationInstanceClusterResponse) Reset() {
	*x = UpdateOrganizationInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationInstanceClusterResponse) ProtoMessage() {}

func (x *UpdateOrganizationInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateOrganizationInstanceClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type DeleteOrganizationInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteOrganizationInstanceClusterRequest) Reset() {
	*x = DeleteOrganizationInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationInstanceClusterRequest) ProtoMessage() {}

func (x *DeleteOrganizationInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteOrganizationInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteOrganizationInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeleteOrganizationInstanceClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteOrganizationInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOrganizationInstanceClusterResponse) Reset() {
	*x = DeleteOrganizationInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationInstanceClusterResponse) ProtoMessage() {}

func (x *DeleteOrganizationInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{23}
}

type ApplicationsHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthyCount     uint64 `protobuf:"varint,1,opt,name=healthy_count,json=healthyCount,proto3" json:"healthy_count,omitempty"`
	DegradedCount    uint64 `protobuf:"varint,2,opt,name=degraded_count,json=degradedCount,proto3" json:"degraded_count,omitempty"`
	ProgressingCount uint64 `protobuf:"varint,3,opt,name=progressing_count,json=progressingCount,proto3" json:"progressing_count,omitempty"`
	UnknownCount     uint64 `protobuf:"varint,4,opt,name=unknown_count,json=unknownCount,proto3" json:"unknown_count,omitempty"`
	SuspendedCount   uint64 `protobuf:"varint,5,opt,name=suspended_count,json=suspendedCount,proto3" json:"suspended_count,omitempty"`
	MissingCount     uint64 `protobuf:"varint,6,opt,name=missing_count,json=missingCount,proto3" json:"missing_count,omitempty"`
}

func (x *ApplicationsHealth) Reset() {
	*x = ApplicationsHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsHealth) ProtoMessage() {}

func (x *ApplicationsHealth) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsHealth.ProtoReflect.Descriptor instead.
func (*ApplicationsHealth) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{24}
}

func (x *ApplicationsHealth) GetHealthyCount() uint64 {
	if x != nil {
		return x.HealthyCount
	}
	return 0
}

func (x *ApplicationsHealth) GetDegradedCount() uint64 {
	if x != nil {
		return x.DegradedCount
	}
	return 0
}

func (x *ApplicationsHealth) GetProgressingCount() uint64 {
	if x != nil {
		return x.ProgressingCount
	}
	return 0
}

func (x *ApplicationsHealth) GetUnknownCount() uint64 {
	if x != nil {
		return x.UnknownCount
	}
	return 0
}

func (x *ApplicationsHealth) GetSuspendedCount() uint64 {
	if x != nil {
		return x.SuspendedCount
	}
	return 0
}

func (x *ApplicationsHealth) GetMissingCount() uint64 {
	if x != nil {
		return x.MissingCount
	}
	return 0
}

type ApplicationsSyncStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncedCount    uint64 `protobuf:"varint,1,opt,name=synced_count,json=syncedCount,proto3" json:"synced_count,omitempty"`
	OutOfSyncCount uint64 `protobuf:"varint,2,opt,name=out_of_sync_count,json=outOfSyncCount,proto3" json:"out_of_sync_count,omitempty"`
	UnknownCount   uint64 `protobuf:"varint,3,opt,name=unknown_count,json=unknownCount,proto3" json:"unknown_count,omitempty"`
}

func (x *ApplicationsSyncStatus) Reset() {
	*x = ApplicationsSyncStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsSyncStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsSyncStatus) ProtoMessage() {}

func (x *ApplicationsSyncStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsSyncStatus.ProtoReflect.Descriptor instead.
func (*ApplicationsSyncStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{25}
}

func (x *ApplicationsSyncStatus) GetSyncedCount() uint64 {
	if x != nil {
		return x.SyncedCount
	}
	return 0
}

func (x *ApplicationsSyncStatus) GetOutOfSyncCount() uint64 {
	if x != nil {
		return x.OutOfSyncCount
	}
	return 0
}

func (x *ApplicationsSyncStatus) GetUnknownCount() uint64 {
	if x != nil {
		return x.UnknownCount
	}
	return 0
}

type ApplicationsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationCount    uint64                  `protobuf:"varint,1,opt,name=application_count,json=applicationCount,proto3" json:"application_count,omitempty"`
	ResourcesCount      uint64                  `protobuf:"varint,2,opt,name=resources_count,json=resourcesCount,proto3" json:"resources_count,omitempty"`
	SyncInProgressCount uint64                  `protobuf:"varint,3,opt,name=sync_in_progress_count,json=syncInProgressCount,proto3" json:"sync_in_progress_count,omitempty"`
	WarningCount        uint64                  `protobuf:"varint,4,opt,name=warning_count,json=warningCount,proto3" json:"warning_count,omitempty"`
	ErrorCount          uint64                  `protobuf:"varint,5,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	Health              *ApplicationsHealth     `protobuf:"bytes,6,opt,name=health,proto3" json:"health,omitempty"`
	SyncStatus          *ApplicationsSyncStatus `protobuf:"bytes,7,opt,name=sync_status,json=syncStatus,proto3" json:"sync_status,omitempty"`
}

func (x *ApplicationsStatus) Reset() {
	*x = ApplicationsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsStatus) ProtoMessage() {}

func (x *ApplicationsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsStatus.ProtoReflect.Descriptor instead.
func (*ApplicationsStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{26}
}

func (x *ApplicationsStatus) GetApplicationCount() uint64 {
	if x != nil {
		return x.ApplicationCount
	}
	return 0
}

func (x *ApplicationsStatus) GetResourcesCount() uint64 {
	if x != nil {
		return x.ResourcesCount
	}
	return 0
}

func (x *ApplicationsStatus) GetSyncInProgressCount() uint64 {
	if x != nil {
		return x.SyncInProgressCount
	}
	return 0
}

func (x *ApplicationsStatus) GetWarningCount() uint64 {
	if x != nil {
		return x.WarningCount
	}
	return 0
}

func (x *ApplicationsStatus) GetErrorCount() uint64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *ApplicationsStatus) GetHealth() *ApplicationsHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *ApplicationsStatus) GetSyncStatus() *ApplicationsSyncStatus {
	if x != nil {
		return x.SyncStatus
	}
	return nil
}

type ArgoCDConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminEnabled          bool                         `protobuf:"varint,1,opt,name=admin_enabled,json=adminEnabled,proto3" json:"admin_enabled,omitempty"`
	StatusBadgeConfig     *ArgoCDStatusBadgeConfig     `protobuf:"bytes,2,opt,name=status_badge_config,json=statusBadgeConfig,proto3" json:"status_badge_config,omitempty"`
	GoogleAnalyticsConfig *ArgoCDGoogleAnalyticsConfig `protobuf:"bytes,3,opt,name=google_analytics_config,json=googleAnalyticsConfig,proto3" json:"google_analytics_config,omitempty"`
	AllowAnonymousUser    bool                         `protobuf:"varint,4,opt,name=allow_anonymous_user,json=allowAnonymousUser,proto3" json:"allow_anonymous_user,omitempty"`
	BannerConfig          *ArgoCDBannerConfig          `protobuf:"bytes,5,opt,name=banner_config,json=bannerConfig,proto3" json:"banner_config,omitempty"`
	AlertConfig           *ArgoCDAlertConfig           `protobuf:"bytes,6,opt,name=alert_config,json=alertConfig,proto3" json:"alert_config,omitempty"`
	InstanceLabelKey      string                       `protobuf:"bytes,7,opt,name=instance_label_key,json=instanceLabelKey,proto3" json:"instance_label_key,omitempty"`
	KustomizeSettings     *ArgoCDKustomizeSettings     `protobuf:"bytes,8,opt,name=kustomize_settings,json=kustomizeSettings,proto3" json:"kustomize_settings,omitempty"`
	HelmSettings          *ArgoCDHelmSettings          `protobuf:"bytes,9,opt,name=helm_settings,json=helmSettings,proto3" json:"helm_settings,omitempty"`
	ResourceSettings      *ArgoCDResourceSettings      `protobuf:"bytes,10,opt,name=resource_settings,json=resourceSettings,proto3" json:"resource_settings,omitempty"`
	UsersSessionDuration  string                       `protobuf:"bytes,11,opt,name=users_session_duration,json=usersSessionDuration,proto3" json:"users_session_duration,omitempty"`
	OidcConfig            string                       `protobuf:"bytes,12,opt,name=oidc_config,json=oidcConfig,proto3" json:"oidc_config,omitempty"`
	DexConfig             string                       `protobuf:"bytes,13,opt,name=dex_config,json=dexConfig,proto3" json:"dex_config,omitempty"`
	WebTerminalConfig     *ArgoCDWebTerminalConfig     `protobuf:"bytes,14,opt,name=web_terminal_config,json=webTerminalConfig,proto3" json:"web_terminal_config,omitempty"`
}

func (x *ArgoCDConfigMap) Reset() {
	*x = ArgoCDConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDConfigMap) ProtoMessage() {}

func (x *ArgoCDConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDConfigMap.ProtoReflect.Descriptor instead.
func (*ArgoCDConfigMap) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{27}
}

func (x *ArgoCDConfigMap) GetAdminEnabled() bool {
	if x != nil {
		return x.AdminEnabled
	}
	return false
}

func (x *ArgoCDConfigMap) GetStatusBadgeConfig() *ArgoCDStatusBadgeConfig {
	if x != nil {
		return x.StatusBadgeConfig
	}
	return nil
}

func (x *ArgoCDConfigMap) GetGoogleAnalyticsConfig() *ArgoCDGoogleAnalyticsConfig {
	if x != nil {
		return x.GoogleAnalyticsConfig
	}
	return nil
}

func (x *ArgoCDConfigMap) GetAllowAnonymousUser() bool {
	if x != nil {
		return x.AllowAnonymousUser
	}
	return false
}

func (x *ArgoCDConfigMap) GetBannerConfig() *ArgoCDBannerConfig {
	if x != nil {
		return x.BannerConfig
	}
	return nil
}

func (x *ArgoCDConfigMap) GetAlertConfig() *ArgoCDAlertConfig {
	if x != nil {
		return x.AlertConfig
	}
	return nil
}

func (x *ArgoCDConfigMap) GetInstanceLabelKey() string {
	if x != nil {
		return x.InstanceLabelKey
	}
	return ""
}

func (x *ArgoCDConfigMap) GetKustomizeSettings() *ArgoCDKustomizeSettings {
	if x != nil {
		return x.KustomizeSettings
	}
	return nil
}

func (x *ArgoCDConfigMap) GetHelmSettings() *ArgoCDHelmSettings {
	if x != nil {
		return x.HelmSettings
	}
	return nil
}

func (x *ArgoCDConfigMap) GetResourceSettings() *ArgoCDResourceSettings {
	if x != nil {
		return x.ResourceSettings
	}
	return nil
}

func (x *ArgoCDConfigMap) GetUsersSessionDuration() string {
	if x != nil {
		return x.UsersSessionDuration
	}
	return ""
}

func (x *ArgoCDConfigMap) GetOidcConfig() string {
	if x != nil {
		return x.OidcConfig
	}
	return ""
}

func (x *ArgoCDConfigMap) GetDexConfig() string {
	if x != nil {
		return x.DexConfig
	}
	return ""
}

func (x *ArgoCDConfigMap) GetWebTerminalConfig() *ArgoCDWebTerminalConfig {
	if x != nil {
		return x.WebTerminalConfig
	}
	return nil
}

type ArgoCDAlertConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ArgoCDAlertConfig) Reset() {
	*x = ArgoCDAlertConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDAlertConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDAlertConfig) ProtoMessage() {}

func (x *ArgoCDAlertConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDAlertConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDAlertConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{28}
}

func (x *ArgoCDAlertConfig) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ArgoCDAlertConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ArgoCDBannerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Permanent bool   `protobuf:"varint,3,opt,name=permanent,proto3" json:"permanent,omitempty"`
}

func (x *ArgoCDBannerConfig) Reset() {
	*x = ArgoCDBannerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDBannerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDBannerConfig) ProtoMessage() {}

func (x *ArgoCDBannerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDBannerConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDBannerConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{29}
}

func (x *ArgoCDBannerConfig) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ArgoCDBannerConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ArgoCDBannerConfig) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type ArgoCDExtensionInstallEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ArgoCDExtensionInstallEntry) Reset() {
	*x = ArgoCDExtensionInstallEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDExtensionInstallEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDExtensionInstallEntry) ProtoMessage() {}

func (x *ArgoCDExtensionInstallEntry) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDExtensionInstallEntry.ProtoReflect.Descriptor instead.
func (*ArgoCDExtensionInstallEntry) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{30}
}

func (x *ArgoCDExtensionInstallEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArgoCDExtensionInstallEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ArgoCDGoogleAnalyticsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId     string `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	AnonymizeUsers bool   `protobuf:"varint,2,opt,name=anonymize_users,json=anonymizeUsers,proto3" json:"anonymize_users,omitempty"`
}

func (x *ArgoCDGoogleAnalyticsConfig) Reset() {
	*x = ArgoCDGoogleAnalyticsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDGoogleAnalyticsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDGoogleAnalyticsConfig) ProtoMessage() {}

func (x *ArgoCDGoogleAnalyticsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDGoogleAnalyticsConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDGoogleAnalyticsConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{31}
}

func (x *ArgoCDGoogleAnalyticsConfig) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *ArgoCDGoogleAnalyticsConfig) GetAnonymizeUsers() bool {
	if x != nil {
		return x.AnonymizeUsers
	}
	return false
}

type ArgoCDHelmSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ValueFileSchemas string `protobuf:"bytes,2,opt,name=value_file_schemas,json=valueFileSchemas,proto3" json:"value_file_schemas,omitempty"`
}

func (x *ArgoCDHelmSettings) Reset() {
	*x = ArgoCDHelmSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDHelmSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDHelmSettings) ProtoMessage() {}

func (x *ArgoCDHelmSettings) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDHelmSettings.ProtoReflect.Descriptor instead.
func (*ArgoCDHelmSettings) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{32}
}

func (x *ArgoCDHelmSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ArgoCDHelmSettings) GetValueFileSchemas() string {
	if x != nil {
		return x.ValueFileSchemas
	}
	return ""
}

type ArgoCDKustomizeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	BuildOptions string `protobuf:"bytes,2,opt,name=build_options,json=buildOptions,proto3" json:"build_options,omitempty"`
}

func (x *ArgoCDKustomizeSettings) Reset() {
	*x = ArgoCDKustomizeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDKustomizeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDKustomizeSettings) ProtoMessage() {}

func (x *ArgoCDKustomizeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDKustomizeSettings.ProtoReflect.Descriptor instead.
func (*ArgoCDKustomizeSettings) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{33}
}

func (x *ArgoCDKustomizeSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ArgoCDKustomizeSettings) GetBuildOptions() string {
	if x != nil {
		return x.BuildOptions
	}
	return ""
}

type ArgoCDStatusBadgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ArgoCDStatusBadgeConfig) Reset() {
	*x = ArgoCDStatusBadgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDStatusBadgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDStatusBadgeConfig) ProtoMessage() {}

func (x *ArgoCDStatusBadgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDStatusBadgeConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDStatusBadgeConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{34}
}

func (x *ArgoCDStatusBadgeConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ArgoCDStatusBadgeConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ArgoCDRBACConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultPolicy string   `protobuf:"bytes,1,opt,name=default_policy,json=defaultPolicy,proto3" json:"default_policy,omitempty"`
	PolicyCsv     string   `protobuf:"bytes,2,opt,name=policy_csv,json=policyCsv,proto3" json:"policy_csv,omitempty"`
	Scopes        []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ArgoCDRBACConfigMap) Reset() {
	*x = ArgoCDRBACConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDRBACConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDRBACConfigMap) ProtoMessage() {}

func (x *ArgoCDRBACConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDRBACConfigMap.ProtoReflect.Descriptor instead.
func (*ArgoCDRBACConfigMap) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{35}
}

func (x *ArgoCDRBACConfigMap) GetDefaultPolicy() string {
	if x != nil {
		return x.DefaultPolicy
	}
	return ""
}

func (x *ArgoCDRBACConfigMap) GetPolicyCsv() string {
	if x != nil {
		return x.PolicyCsv
	}
	return ""
}

func (x *ArgoCDRBACConfigMap) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ArgoCDResourceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inclusions     string `protobuf:"bytes,1,opt,name=inclusions,proto3" json:"inclusions,omitempty"`
	Exclusions     string `protobuf:"bytes,2,opt,name=exclusions,proto3" json:"exclusions,omitempty"`
	CompareOptions string `protobuf:"bytes,3,opt,name=compare_options,json=compareOptions,proto3" json:"compare_options,omitempty"`
}

func (x *ArgoCDResourceSettings) Reset() {
	*x = ArgoCDResourceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDResourceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDResourceSettings) ProtoMessage() {}

func (x *ArgoCDResourceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDResourceSettings.ProtoReflect.Descriptor instead.
func (*ArgoCDResourceSettings) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{36}
}

func (x *ArgoCDResourceSettings) GetInclusions() string {
	if x != nil {
		return x.Inclusions
	}
	return ""
}

func (x *ArgoCDResourceSettings) GetExclusions() string {
	if x != nil {
		return x.Exclusions
	}
	return ""
}

func (x *ArgoCDResourceSettings) GetCompareOptions() string {
	if x != nil {
		return x.CompareOptions
	}
	return ""
}

type ArgoCDWebTerminalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Shells  string `protobuf:"bytes,2,opt,name=shells,proto3" json:"shells,omitempty"`
}

func (x *ArgoCDWebTerminalConfig) Reset() {
	*x = ArgoCDWebTerminalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDWebTerminalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDWebTerminalConfig) ProtoMessage() {}

func (x *ArgoCDWebTerminalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDWebTerminalConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDWebTerminalConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{37}
}

func (x *ArgoCDWebTerminalConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ArgoCDWebTerminalConfig) GetShells() string {
	if x != nil {
		return x.Shells
	}
	return ""
}

type ClusterCustomization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomImageRegistryArgoproj string `protobuf:"bytes,1,opt,name=custom_image_registry_argoproj,json=customImageRegistryArgoproj,proto3" json:"custom_image_registry_argoproj,omitempty"`
	CustomImageRegistryAkuity   string `protobuf:"bytes,2,opt,name=custom_image_registry_akuity,json=customImageRegistryAkuity,proto3" json:"custom_image_registry_akuity,omitempty"`
	AutoUpgradeDisabled         bool   `protobuf:"varint,3,opt,name=auto_upgrade_disabled,json=autoUpgradeDisabled,proto3" json:"auto_upgrade_disabled,omitempty"`
}

func (x *ClusterCustomization) Reset() {
	*x = ClusterCustomization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCustomization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCustomization) ProtoMessage() {}

func (x *ClusterCustomization) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCustomization.ProtoReflect.Descriptor instead.
func (*ClusterCustomization) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{38}
}

func (x *ClusterCustomization) GetCustomImageRegistryArgoproj() string {
	if x != nil {
		return x.CustomImageRegistryArgoproj
	}
	return ""
}

func (x *ClusterCustomization) GetCustomImageRegistryAkuity() string {
	if x != nil {
		return x.CustomImageRegistryAkuity
	}
	return ""
}

func (x *ClusterCustomization) GetAutoUpgradeDisabled() bool {
	if x != nil {
		return x.AutoUpgradeDisabled
	}
	return false
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Hostname               string                 `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ClusterCount           uint64                 `protobuf:"varint,4,opt,name=cluster_count,json=clusterCount,proto3" json:"cluster_count,omitempty"`
	Secrets                map[string]string      `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Generation             uint64                 `protobuf:"varint,6,opt,name=generation,proto3" json:"generation,omitempty"`
	RecentProcessedEventId uint64                 `protobuf:"varint,7,opt,name=recent_processed_event_id,json=recentProcessedEventId,proto3" json:"recent_processed_event_id,omitempty"`
	HealthStatus           *v11.Status            `protobuf:"bytes,8,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	ReconciliationStatus   *v12.Status            `protobuf:"bytes,9,opt,name=reconciliation_status,json=reconciliationStatus,proto3" json:"reconciliation_status,omitempty"`
	DeleteTime             *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`
	Data                   *InstanceData          `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	Info                   *InstanceInfo          `protobuf:"bytes,12,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{39}
}

func (x *Instance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instance) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Instance) GetClusterCount() uint64 {
	if x != nil {
		return x.ClusterCount
	}
	return 0
}

func (x *Instance) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Instance) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Instance) GetRecentProcessedEventId() uint64 {
	if x != nil {
		return x.RecentProcessedEventId
	}
	return 0
}

func (x *Instance) GetHealthStatus() *v11.Status {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *Instance) GetReconciliationStatus() *v12.Status {
	if x != nil {
		return x.ReconciliationStatus
	}
	return nil
}

func (x *Instance) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Instance) GetData() *InstanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Instance) GetInfo() *InstanceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type InstanceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerOrganizationName string               `protobuf:"bytes,1,opt,name=owner_organization_name,json=ownerOrganizationName,proto3" json:"owner_organization_name,omitempty"`
	Description           string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Version               string               `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Spec                  *InstanceSpec        `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	ConfigMap             *ArgoCDConfigMap     `protobuf:"bytes,6,opt,name=config_map,json=configMap,proto3,oneof" json:"config_map,omitempty"`
	RbacConfigMap         *ArgoCDRBACConfigMap `protobuf:"bytes,7,opt,name=rbac_config_map,json=rbacConfigMap,proto3,oneof" json:"rbac_config_map,omitempty"`
}

func (x *InstanceData) Reset() {
	*x = InstanceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceData) ProtoMessage() {}

func (x *InstanceData) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceData.ProtoReflect.Descriptor instead.
func (*InstanceData) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{40}
}

func (x *InstanceData) GetOwnerOrganizationName() string {
	if x != nil {
		return x.OwnerOrganizationName
	}
	return ""
}

func (x *InstanceData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstanceData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstanceData) GetSpec() *InstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *InstanceData) GetConfigMap() *ArgoCDConfigMap {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

func (x *InstanceData) GetRbacConfigMap() *ArgoCDRBACConfigMap {
	if x != nil {
		return x.RbacConfigMap
	}
	return nil
}

type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationStatus *ApplicationsStatus `protobuf:"bytes,1,opt,name=application_status,json=applicationStatus,proto3" json:"application_status,omitempty"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{41}
}

func (x *InstanceInfo) GetApplicationStatus() *ApplicationsStatus {
	if x != nil {
		return x.ApplicationStatus
	}
	return nil
}

type InstanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAllowList                  []*IPAllowListEntry            `protobuf:"bytes,1,rep,name=ip_allow_list,json=ipAllowList,proto3" json:"ip_allow_list,omitempty"`
	Subdomain                    string                         `protobuf:"bytes,2,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	DeclarativeManagementEnabled bool                           `protobuf:"varint,3,opt,name=declarative_management_enabled,json=declarativeManagementEnabled,proto3" json:"declarative_management_enabled,omitempty"`
	Extensions                   []*ArgoCDExtensionInstallEntry `protobuf:"bytes,4,rep,name=extensions,proto3" json:"extensions,omitempty"`
	ClusterCustomizationDefaults *ClusterCustomization          `protobuf:"bytes,5,opt,name=cluster_customization_defaults,json=clusterCustomizationDefaults,proto3" json:"cluster_customization_defaults,omitempty"`
}

func (x *InstanceSpec) Reset() {
	*x = InstanceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSpec) ProtoMessage() {}

func (x *InstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSpec.ProtoReflect.Descriptor instead.
func (*InstanceSpec) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{42}
}

func (x *InstanceSpec) GetIpAllowList() []*IPAllowListEntry {
	if x != nil {
		return x.IpAllowList
	}
	return nil
}

func (x *InstanceSpec) GetSubdomain() string {
	if x != nil {
		return x.Subdomain
	}
	return ""
}

func (x *InstanceSpec) GetDeclarativeManagementEnabled() bool {
	if x != nil {
		return x.DeclarativeManagementEnabled
	}
	return false
}

func (x *InstanceSpec) GetExtensions() []*ArgoCDExtensionInstallEntry {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *InstanceSpec) GetClusterCustomizationDefaults() *ClusterCustomization {
	if x != nil {
		return x.ClusterCustomizationDefaults
	}
	return nil
}

type IPAllowListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip          string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *IPAllowListEntry) Reset() {
	*x = IPAllowListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAllowListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAllowListEntry) ProtoMessage() {}

func (x *IPAllowListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAllowListEntry.ProtoReflect.Descriptor instead.
func (*IPAllowListEntry) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{43}
}

func (x *IPAllowListEntry) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPAllowListEntry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AgentHealthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservedGeneration uint64      `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	Status             TenantPhase `protobuf:"varint,2,opt,name=status,proto3,enum=akuity.argocd.v1.TenantPhase" json:"status,omitempty"`
	Message            string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AgentHealthStatus) Reset() {
	*x = AgentHealthStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentHealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHealthStatus) ProtoMessage() {}

func (x *AgentHealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHealthStatus.ProtoReflect.Descriptor instead.
func (*AgentHealthStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{44}
}

func (x *AgentHealthStatus) GetObservedGeneration() uint64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *AgentHealthStatus) GetStatus() TenantPhase {
	if x != nil {
		return x.Status
	}
	return TenantPhase_TENANT_PHASE_UNSPECIFIED
}

func (x *AgentHealthStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AgentAggregatedHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinObservedGeneration uint64                        `protobuf:"varint,1,opt,name=min_observed_generation,json=minObservedGeneration,proto3" json:"min_observed_generation,omitempty"`
	Healthy               map[string]*AgentHealthStatus `protobuf:"bytes,2,rep,name=healthy,proto3" json:"healthy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Progressing           map[string]*AgentHealthStatus `protobuf:"bytes,3,rep,name=progressing,proto3" json:"progressing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Degraded              map[string]*AgentHealthStatus `protobuf:"bytes,4,rep,name=degraded,proto3" json:"degraded,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Unknown               map[string]*AgentHealthStatus `protobuf:"bytes,5,rep,name=unknown,proto3" json:"unknown,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PriorityStatus        TenantPhase                   `protobuf:"varint,6,opt,name=priority_status,json=priorityStatus,proto3,enum=akuity.argocd.v1.TenantPhase" json:"priority_status,omitempty"`
}

func (x *AgentAggregatedHealthResponse) Reset() {
	*x = AgentAggregatedHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentAggregatedHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAggregatedHealthResponse) ProtoMessage() {}

func (x *AgentAggregatedHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAggregatedHealthResponse.ProtoReflect.Descriptor instead.
func (*AgentAggregatedHealthResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{45}
}

func (x *AgentAggregatedHealthResponse) GetMinObservedGeneration() uint64 {
	if x != nil {
		return x.MinObservedGeneration
	}
	return 0
}

func (x *AgentAggregatedHealthResponse) GetHealthy() map[string]*AgentHealthStatus {
	if x != nil {
		return x.Healthy
	}
	return nil
}

func (x *AgentAggregatedHealthResponse) GetProgressing() map[string]*AgentHealthStatus {
	if x != nil {
		return x.Progressing
	}
	return nil
}

func (x *AgentAggregatedHealthResponse) GetDegraded() map[string]*AgentHealthStatus {
	if x != nil {
		return x.Degraded
	}
	return nil
}

func (x *AgentAggregatedHealthResponse) GetUnknown() map[string]*AgentHealthStatus {
	if x != nil {
		return x.Unknown
	}
	return nil
}

func (x *AgentAggregatedHealthResponse) GetPriorityStatus() TenantPhase {
	if x != nil {
		return x.PriorityStatus
	}
	return TenantPhase_TENANT_PHASE_UNSPECIFIED
}

type AgentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       string                         `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ArgoCdVersion string                         `protobuf:"bytes,2,opt,name=argo_cd_version,json=argoCdVersion,proto3" json:"argo_cd_version,omitempty"`
	ObserveTime   *timestamppb.Timestamp         `protobuf:"bytes,3,opt,name=observe_time,json=observeTime,proto3,oneof" json:"observe_time,omitempty"`
	Status        *AgentAggregatedHealthResponse `protobuf:"bytes,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	AgentIds      []string                       `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
}

func (x *AgentState) Reset() {
	*x = AgentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentState) ProtoMessage() {}

func (x *AgentState) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentState.ProtoReflect.Descriptor instead.
func (*AgentState) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{46}
}

func (x *AgentState) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentState) GetArgoCdVersion() string {
	if x != nil {
		return x.ArgoCdVersion
	}
	return ""
}

func (x *AgentState) GetObserveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ObserveTime
	}
	return nil
}

func (x *AgentState) GetStatus() *AgentAggregatedHealthResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AgentState) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

type ClusterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size                        ClusterSize       `protobuf:"varint,1,opt,name=size,proto3,enum=akuity.argocd.v1.ClusterSize" json:"size,omitempty"`
	Labels                      map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations                 map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AutoUpgradeDisabled         *bool             `protobuf:"varint,4,opt,name=auto_upgrade_disabled,json=autoUpgradeDisabled,proto3,oneof" json:"auto_upgrade_disabled,omitempty"`
	CustomImageRegistryArgoproj *string           `protobuf:"bytes,5,opt,name=custom_image_registry_argoproj,json=customImageRegistryArgoproj,proto3,oneof" json:"custom_image_registry_argoproj,omitempty"`
	CustomImageRegistryAkuity   *string           `protobuf:"bytes,6,opt,name=custom_image_registry_akuity,json=customImageRegistryAkuity,proto3,oneof" json:"custom_image_registry_akuity,omitempty"`
}

func (x *ClusterData) Reset() {
	*x = ClusterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterData) ProtoMessage() {}

func (x *ClusterData) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterData.ProtoReflect.Descriptor instead.
func (*ClusterData) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{47}
}

func (x *ClusterData) GetSize() ClusterSize {
	if x != nil {
		return x.Size
	}
	return ClusterSize_CLUSTER_SIZE_UNSPECIFIED
}

func (x *ClusterData) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ClusterData) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ClusterData) GetAutoUpgradeDisabled() bool {
	if x != nil && x.AutoUpgradeDisabled != nil {
		return *x.AutoUpgradeDisabled
	}
	return false
}

func (x *ClusterData) GetCustomImageRegistryArgoproj() string {
	if x != nil && x.CustomImageRegistryArgoproj != nil {
		return *x.CustomImageRegistryArgoproj
	}
	return ""
}

func (x *ClusterData) GetCustomImageRegistryAkuity() string {
	if x != nil && x.CustomImageRegistryAkuity != nil {
		return *x.CustomImageRegistryAkuity
	}
	return ""
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Namespace            string                 `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceScoped      bool                   `protobuf:"varint,5,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"`
	Data                 *ClusterData           `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	DeleteTime           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`
	ObservedGeneration   *uint64                `protobuf:"varint,8,opt,name=observed_generation,json=observedGeneration,proto3,oneof" json:"observed_generation,omitempty"`
	AgentState           *AgentState            `protobuf:"bytes,9,opt,name=agent_state,json=agentState,proto3,oneof" json:"agent_state,omitempty"`
	HealthStatus         *v11.Status            `protobuf:"bytes,10,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	ReconciliationStatus *v12.Status            `protobuf:"bytes,11,opt,name=reconciliation_status,json=reconciliationStatus,proto3" json:"reconciliation_status,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{48}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Cluster) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *Cluster) GetData() *ClusterData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Cluster) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Cluster) GetObservedGeneration() uint64 {
	if x != nil && x.ObservedGeneration != nil {
		return *x.ObservedGeneration
	}
	return 0
}

func (x *Cluster) GetAgentState() *AgentState {
	if x != nil {
		return x.AgentState
	}
	return nil
}

func (x *Cluster) GetHealthStatus() *v11.Status {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *Cluster) GetReconciliationStatus() *v12.Status {
	if x != nil {
		return x.ReconciliationStatus
	}
	return nil
}

var File_argocd_v1_argocd_proto protoreflect.FileDescriptor

var file_argocd_v1_argocd_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x33, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x8a, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x5b, 0x0a, 0x21,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x21, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x5c, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5c,
	0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x22,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x73, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x28, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x22, 0x60, 0x0a, 0x29, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xb4, 0x01,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x4f, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x73, 0x22, 0xd9, 0x01, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a,
	0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22,
	0x84, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb8, 0x07, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x59,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x67, 0x6f, 0x43, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x67, 0x6f, 0x43, 0x44, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67,
	0x6f, 0x43, 0x44, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a,
	0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x12, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x6b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x49, 0x0a,
	0x0d, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x48, 0x65,
	0x6c, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x69, 0x64, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x78, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x57, 0x65, 0x62, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x77,
	0x65, 0x62, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x3f, 0x0a, 0x11, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x5e, 0x0a, 0x12, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x22, 0x47, 0x0a, 0x1b, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x1b, 0x41, 0x72,
	0x67, 0x6f, 0x43, 0x44, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x5c, 0x0a, 0x12, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x48, 0x65, 0x6c,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x22, 0x58, 0x0a, 0x17, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x4b, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x17, 0x41,
	0x72, 0x67, 0x6f, 0x43, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x73, 0x0a, 0x13, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x52, 0x42, 0x41, 0x43,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x73, 0x76, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x73, 0x76, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x41, 0x72, 0x67, 0x6f,
	0x43, 0x44, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x41,
	0x72, 0x67, 0x6f, 0x43, 0x44, 0x57, 0x65, 0x62, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x72,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb3, 0x05, 0x0a, 0x08,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xf4, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x0f, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x67, 0x6f, 0x43, 0x44, 0x52, 0x42, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x70, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x62, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6d, 0x61, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x63, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf7, 0x02,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46,
	0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x1e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x49, 0x50, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01,
	0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x97, 0x07, 0x0a, 0x1d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x56, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x62, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x08, 0x64,
	0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x64, 0x65,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x46,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x5f, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x0d,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f,
	0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x99, 0x02, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x63, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x72, 0x67, 0x6f, 0x43, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf7, 0x04, 0x0a, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x41,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x50, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x72, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x6a, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x19,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x6a, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x22, 0xef, 0x04, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x02,
	0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x74, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x03, 0x2a, 0x98, 0x01,
	0x0a, 0x0b, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x32, 0xf3, 0x14, 0x0a, 0x0d, 0x41, 0x72, 0x67,
	0x6f, 0x43, 0x44, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xc3, 0x01, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22,
	0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0xbc, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xc5, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01,
	0x2a, 0x32, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x1a, 0x34, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xc5, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x33, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe9, 0x01, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x3a, 0x01, 0x2a,
	0x22, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x8d, 0x02, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x40, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x12, 0x55, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x73, 0x12, 0xf4, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x3a, 0x01, 0x2a, 0x1a, 0x4b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xf1, 0x01, 0x0a, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x3a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4d, 0x2a, 0x4b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0xc9,
	0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x69, 0x6f, 0x2f, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x41, 0x58,
	0xaa, 0x02, 0x10, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x5c, 0x41, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x5c,
	0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x3a, 0x3a,
	0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_argocd_v1_argocd_proto_rawDescOnce sync.Once
	file_argocd_v1_argocd_proto_rawDescData = file_argocd_v1_argocd_proto_rawDesc
)

func file_argocd_v1_argocd_proto_rawDescGZIP() []byte {
	file_argocd_v1_argocd_proto_rawDescOnce.Do(func() {
		file_argocd_v1_argocd_proto_rawDescData = protoimpl.X.CompressGZIP(file_argocd_v1_argocd_proto_rawDescData)
	})
	return file_argocd_v1_argocd_proto_rawDescData
}

var file_argocd_v1_argocd_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_argocd_v1_argocd_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_argocd_v1_argocd_proto_goTypes = []interface{}{
	(ClusterSize)(0),                                        // 0: akuity.argocd.v1.ClusterSize
	(TenantPhase)(0),                                        // 1: akuity.argocd.v1.TenantPhase
	(*ListOrganizationInstancesRequest)(nil),                // 2: akuity.argocd.v1.ListOrganizationInstancesRequest
	(*ListOrganizationInstancesResponse)(nil),               // 3: akuity.argocd.v1.ListOrganizationInstancesResponse
	(*CreateOrganizationInstanceRequest)(nil),               // 4: akuity.argocd.v1.CreateOrganizationInstanceRequest
	(*CreateOrganizationInstanceResponse)(nil),              // 5: akuity.argocd.v1.CreateOrganizationInstanceResponse
	(*GetOrganizationInstanceRequest)(nil),                  // 6: akuity.argocd.v1.GetOrganizationInstanceRequest
	(*GetOrganizationInstanceResponse)(nil),                 // 7: akuity.argocd.v1.GetOrganizationInstanceResponse
	(*PatchOrganizationInstanceRequest)(nil),                // 8: akuity.argocd.v1.PatchOrganizationInstanceRequest
	(*PatchOrganizationInstanceResponse)(nil),               // 9: akuity.argocd.v1.PatchOrganizationInstanceResponse
	(*UpdateOrganizationInstanceRequest)(nil),               // 10: akuity.argocd.v1.UpdateOrganizationInstanceRequest
	(*UpdateOrganizationInstanceResponse)(nil),              // 11: akuity.argocd.v1.UpdateOrganizationInstanceResponse
	(*DeleteOrganizationInstanceRequest)(nil),               // 12: akuity.argocd.v1.DeleteOrganizationInstanceRequest
	(*DeleteOrganizationInstanceResponse)(nil),              // 13: akuity.argocd.v1.DeleteOrganizationInstanceResponse
	(*ListOrganizationInstanceClustersRequest)(nil),         // 14: akuity.argocd.v1.ListOrganizationInstanceClustersRequest
	(*ListOrganizationInstanceClustersResponse)(nil),        // 15: akuity.argocd.v1.ListOrganizationInstanceClustersResponse
	(*CreateOrganizationInstanceClusterRequest)(nil),        // 16: akuity.argocd.v1.CreateOrganizationInstanceClusterRequest
	(*CreateOrganizationInstanceClusterResponse)(nil),       // 17: akuity.argocd.v1.CreateOrganizationInstanceClusterResponse
	(*GetOrganizationInstanceClusterRequest)(nil),           // 18: akuity.argocd.v1.GetOrganizationInstanceClusterRequest
	(*GetOrganizationInstanceClusterResponse)(nil),          // 19: akuity.argocd.v1.GetOrganizationInstanceClusterResponse
	(*GetOrganizationInstanceClusterManifestsRequest)(nil),  // 20: akuity.argocd.v1.GetOrganizationInstanceClusterManifestsRequest
	(*GetOrganizationInstanceClusterManifestsResponse)(nil), // 21: akuity.argocd.v1.GetOrganizationInstanceClusterManifestsResponse
	(*UpdateOrganizationInstanceClusterRequest)(nil),        // 22: akuity.argocd.v1.UpdateOrganizationInstanceClusterRequest
	(*UpdateOrganizationInstanceClusterResponse)(nil),       // 23: akuity.argocd.v1.UpdateOrganizationInstanceClusterResponse
	(*DeleteOrganizationInstanceClusterRequest)(nil),        // 24: akuity.argocd.v1.DeleteOrganizationInstanceClusterRequest
	(*DeleteOrganizationInstanceClusterResponse)(nil),       // 25: akuity.argocd.v1.DeleteOrganizationInstanceClusterResponse
	(*ApplicationsHealth)(nil),                              // 26: akuity.argocd.v1.ApplicationsHealth
	(*ApplicationsSyncStatus)(nil),                          // 27: akuity.argocd.v1.ApplicationsSyncStatus
	(*ApplicationsStatus)(nil),                              // 28: akuity.argocd.v1.ApplicationsStatus
	(*ArgoCDConfigMap)(nil),                                 // 29: akuity.argocd.v1.ArgoCDConfigMap
	(*ArgoCDAlertConfig)(nil),                               // 30: akuity.argocd.v1.ArgoCDAlertConfig
	(*ArgoCDBannerConfig)(nil),                              // 31: akuity.argocd.v1.ArgoCDBannerConfig
	(*ArgoCDExtensionInstallEntry)(nil),                     // 32: akuity.argocd.v1.ArgoCDExtensionInstallEntry
	(*ArgoCDGoogleAnalyticsConfig)(nil),                     // 33: akuity.argocd.v1.ArgoCDGoogleAnalyticsConfig
	(*ArgoCDHelmSettings)(nil),                              // 34: akuity.argocd.v1.ArgoCDHelmSettings
	(*ArgoCDKustomizeSettings)(nil),                         // 35: akuity.argocd.v1.ArgoCDKustomizeSettings
	(*ArgoCDStatusBadgeConfig)(nil),                         // 36: akuity.argocd.v1.ArgoCDStatusBadgeConfig
	(*ArgoCDRBACConfigMap)(nil),                             // 37: akuity.argocd.v1.ArgoCDRBACConfigMap
	(*ArgoCDResourceSettings)(nil),                          // 38: akuity.argocd.v1.ArgoCDResourceSettings
	(*ArgoCDWebTerminalConfig)(nil),                         // 39: akuity.argocd.v1.ArgoCDWebTerminalConfig
	(*ClusterCustomization)(nil),                            // 40: akuity.argocd.v1.ClusterCustomization
	(*Instance)(nil),                                        // 41: akuity.argocd.v1.Instance
	(*InstanceData)(nil),                                    // 42: akuity.argocd.v1.InstanceData
	(*InstanceInfo)(nil),                                    // 43: akuity.argocd.v1.InstanceInfo
	(*InstanceSpec)(nil),                                    // 44: akuity.argocd.v1.InstanceSpec
	(*IPAllowListEntry)(nil),                                // 45: akuity.argocd.v1.IPAllowListEntry
	(*AgentHealthStatus)(nil),                               // 46: akuity.argocd.v1.AgentHealthStatus
	(*AgentAggregatedHealthResponse)(nil),                   // 47: akuity.argocd.v1.AgentAggregatedHealthResponse
	(*AgentState)(nil),                                      // 48: akuity.argocd.v1.AgentState
	(*ClusterData)(nil),                                     // 49: akuity.argocd.v1.ClusterData
	(*Cluster)(nil),                                         // 50: akuity.argocd.v1.Cluster
	nil,                                                     // 51: akuity.argocd.v1.Instance.SecretsEntry
	nil,                                                     // 52: akuity.argocd.v1.AgentAggregatedHealthResponse.HealthyEntry
	nil,                                                     // 53: akuity.argocd.v1.AgentAggregatedHealthResponse.ProgressingEntry
	nil,                                                     // 54: akuity.argocd.v1.AgentAggregatedHealthResponse.DegradedEntry
	nil,                                                     // 55: akuity.argocd.v1.AgentAggregatedHealthResponse.UnknownEntry
	nil,                                                     // 56: akuity.argocd.v1.ClusterData.LabelsEntry
	nil,                                                     // 57: akuity.argocd.v1.ClusterData.AnnotationsEntry
	(v1.Type)(0),                                            // 58: akuity.types.id.v1.Type
	(*structpb.Struct)(nil),                                 // 59: google.protobuf.Struct
	(*v11.Status)(nil),                                      // 60: akuity.types.status.health.v1.Status
	(*v12.Status)(nil),                                      // 61: akuity.types.status.reconciliation.v1.Status
	(*timestamppb.Timestamp)(nil),                           // 62: google.protobuf.Timestamp
}
var file_argocd_v1_argocd_proto_depIdxs = []int32{
	41, // 0: akuity.argocd.v1.ListOrganizationInstancesResponse.instances:type_name -> akuity.argocd.v1.Instance
	41, // 1: akuity.argocd.v1.CreateOrganizationInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	58, // 2: akuity.argocd.v1.GetOrganizationInstanceRequest.id_type:type_name -> akuity.types.id.v1.Type
	41, // 3: akuity.argocd.v1.GetOrganizationInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	59, // 4: akuity.argocd.v1.PatchOrganizationInstanceRequest.patch:type_name -> google.protobuf.Struct
	41, // 5: akuity.argocd.v1.PatchOrganizationInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	41, // 6: akuity.argocd.v1.UpdateOrganizationInstanceRequest.instance:type_name -> akuity.argocd.v1.Instance
	41, // 7: akuity.argocd.v1.UpdateOrganizationInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	50, // 8: akuity.argocd.v1.ListOrganizationInstanceClustersResponse.clusters:type_name -> akuity.argocd.v1.Cluster
	49, // 9: akuity.argocd.v1.CreateOrganizationInstanceClusterRequest.data:type_name -> akuity.argocd.v1.ClusterData
	50, // 10: akuity.argocd.v1.CreateOrganizationInstanceClusterResponse.cluster:type_name -> akuity.argocd.v1.Cluster
	58, // 11: akuity.argocd.v1.GetOrganizationInstanceClusterRequest.id_type:type_name -> akuity.types.id.v1.Type
	50, // 12: akuity.argocd.v1.GetOrganizationInstanceClusterResponse.cluster:type_name -> akuity.argocd.v1.Cluster
	49, // 13: akuity.argocd.v1.UpdateOrganizationInstanceClusterRequest.data:type_name -> akuity.argocd.v1.ClusterData
	50, // 14: akuity.argocd.v1.UpdateOrganizationInstanceClusterResponse.cluster:type_name -> akuity.argocd.v1.Cluster
	26, // 15: akuity.argocd.v1.ApplicationsStatus.health:type_name -> akuity.argocd.v1.ApplicationsHealth
	27, // 16: akuity.argocd.v1.ApplicationsStatus.sync_status:type_name -> akuity.argocd.v1.ApplicationsSyncStatus
	36, // 17: akuity.argocd.v1.ArgoCDConfigMap.status_badge_config:type_name -> akuity.argocd.v1.ArgoCDStatusBadgeConfig
	33, // 18: akuity.argocd.v1.ArgoCDConfigMap.google_analytics_config:type_name -> akuity.argocd.v1.ArgoCDGoogleAnalyticsConfig
	31, // 19: akuity.argocd.v1.ArgoCDConfigMap.banner_config:type_name -> akuity.argocd.v1.ArgoCDBannerConfig
	30, // 20: akuity.argocd.v1.ArgoCDConfigMap.alert_config:type_name -> akuity.argocd.v1.ArgoCDAlertConfig
	35, // 21: akuity.argocd.v1.ArgoCDConfigMap.kustomize_settings:type_name -> akuity.argocd.v1.ArgoCDKustomizeSettings
	34, // 22: akuity.argocd.v1.ArgoCDConfigMap.helm_settings:type_name -> akuity.argocd.v1.ArgoCDHelmSettings
	38, // 23: akuity.argocd.v1.ArgoCDConfigMap.resource_settings:type_name -> akuity.argocd.v1.ArgoCDResourceSettings
	39, // 24: akuity.argocd.v1.ArgoCDConfigMap.web_terminal_config:type_name -> akuity.argocd.v1.ArgoCDWebTerminalConfig
	51, // 25: akuity.argocd.v1.Instance.secrets:type_name -> akuity.argocd.v1.Instance.SecretsEntry
	60, // 26: akuity.argocd.v1.Instance.health_status:type_name -> akuity.types.status.health.v1.Status
	61, // 27: akuity.argocd.v1.Instance.reconciliation_status:type_name -> akuity.types.status.reconciliation.v1.Status
	62, // 28: akuity.argocd.v1.Instance.delete_time:type_name -> google.protobuf.Timestamp
	42, // 29: akuity.argocd.v1.Instance.data:type_name -> akuity.argocd.v1.InstanceData
	43, // 30: akuity.argocd.v1.Instance.info:type_name -> akuity.argocd.v1.InstanceInfo
	44, // 31: akuity.argocd.v1.InstanceData.spec:type_name -> akuity.argocd.v1.InstanceSpec
	29, // 32: akuity.argocd.v1.InstanceData.config_map:type_name -> akuity.argocd.v1.ArgoCDConfigMap
	37, // 33: akuity.argocd.v1.InstanceData.rbac_config_map:type_name -> akuity.argocd.v1.ArgoCDRBACConfigMap
	28, // 34: akuity.argocd.v1.InstanceInfo.application_status:type_name -> akuity.argocd.v1.ApplicationsStatus
	45, // 35: akuity.argocd.v1.InstanceSpec.ip_allow_list:type_name -> akuity.argocd.v1.IPAllowListEntry
	32, // 36: akuity.argocd.v1.InstanceSpec.extensions:type_name -> akuity.argocd.v1.ArgoCDExtensionInstallEntry
	40, // 37: akuity.argocd.v1.InstanceSpec.cluster_customization_defaults:type_name -> akuity.argocd.v1.ClusterCustomization
	1,  // 38: akuity.argocd.v1.AgentHealthStatus.status:type_name -> akuity.argocd.v1.TenantPhase
	52, // 39: akuity.argocd.v1.AgentAggregatedHealthResponse.healthy:type_name -> akuity.argocd.v1.AgentAggregatedHealthResponse.HealthyEntry
	53, // 40: akuity.argocd.v1.AgentAggregatedHealthResponse.progressing:type_name -> akuity.argocd.v1.AgentAggregatedHealthResponse.ProgressingEntry
	54, // 41: akuity.argocd.v1.AgentAggregatedHealthResponse.degraded:type_name -> akuity.argocd.v1.AgentAggregatedHealthResponse.DegradedEntry
	55, // 42: akuity.argocd.v1.AgentAggregatedHealthResponse.unknown:type_name -> akuity.argocd.v1.AgentAggregatedHealthResponse.UnknownEntry
	1,  // 43: akuity.argocd.v1.AgentAggregatedHealthResponse.priority_status:type_name -> akuity.argocd.v1.TenantPhase
	62, // 44: akuity.argocd.v1.AgentState.observe_time:type_name -> google.protobuf.Timestamp
	47, // 45: akuity.argocd.v1.AgentState.status:type_name -> akuity.argocd.v1.AgentAggregatedHealthResponse
	0,  // 46: akuity.argocd.v1.ClusterData.size:type_name -> akuity.argocd.v1.ClusterSize
	56, // 47: akuity.argocd.v1.ClusterData.labels:type_name -> akuity.argocd.v1.ClusterData.LabelsEntry
	57, // 48: akuity.argocd.v1.ClusterData.annotations:type_name -> akuity.argocd.v1.ClusterData.AnnotationsEntry
	49, // 49: akuity.argocd.v1.Cluster.data:type_name -> akuity.argocd.v1.ClusterData
	62, // 50: akuity.argocd.v1.Cluster.delete_time:type_name -> google.protobuf.Timestamp
	48, // 51: akuity.argocd.v1.Cluster.agent_state:type_name -> akuity.argocd.v1.AgentState
	60, // 52: akuity.argocd.v1.Cluster.health_status:type_name -> akuity.types.status.health.v1.Status
	61, // 53: akuity.argocd.v1.Cluster.reconciliation_status:type_name -> akuity.types.status.reconciliation.v1.Status
	46, // 54: akuity.argocd.v1.AgentAggregatedHealthResponse.HealthyEntry.value:type_name -> akuity.argocd.v1.AgentHealthStatus
	46, // 55: akuity.argocd.v1.AgentAggregatedHealthResponse.ProgressingEntry.value:type_name -> akuity.argocd.v1.AgentHealthStatus
	46, // 56: akuity.argocd.v1.AgentAggregatedHealthResponse.DegradedEntry.value:type_name -> akuity.argocd.v1.AgentHealthStatus
	46, // 57: akuity.argocd.v1.AgentAggregatedHealthResponse.UnknownEntry.value:type_name -> akuity.argocd.v1.AgentHealthStatus
	2,  // 58: akuity.argocd.v1.ArgoCDService.ListOrganizationInstances:input_type -> akuity.argocd.v1.ListOrganizationInstancesRequest
	4,  // 59: akuity.argocd.v1.ArgoCDService.CreateOrganizationInstance:input_type -> akuity.argocd.v1.CreateOrganizationInstanceRequest
	6,  // 60: akuity.argocd.v1.ArgoCDService.GetOrganizationInstance:input_type -> akuity.argocd.v1.GetOrganizationInstanceRequest
	8,  // 61: akuity.argocd.v1.ArgoCDService.PatchOrganizationInstance:input_type -> akuity.argocd.v1.PatchOrganizationInstanceRequest
	10, // 62: akuity.argocd.v1.ArgoCDService.UpdateOrganizationInstance:input_type -> akuity.argocd.v1.UpdateOrganizationInstanceRequest
	12, // 63: akuity.argocd.v1.ArgoCDService.DeleteOrganizationInstance:input_type -> akuity.argocd.v1.DeleteOrganizationInstanceRequest
	14, // 64: akuity.argocd.v1.ArgoCDService.ListOrganizationInstanceClusters:input_type -> akuity.argocd.v1.ListOrganizationInstanceClustersRequest
	16, // 65: akuity.argocd.v1.ArgoCDService.CreateOrganizationInstanceCluster:input_type -> akuity.argocd.v1.CreateOrganizationInstanceClusterRequest
	18, // 66: akuity.argocd.v1.ArgoCDService.GetOrganizationInstanceCluster:input_type -> akuity.argocd.v1.GetOrganizationInstanceClusterRequest
	20, // 67: akuity.argocd.v1.ArgoCDService.GetOrganizationInstanceClusterManifests:input_type -> akuity.argocd.v1.GetOrganizationInstanceClusterManifestsRequest
	22, // 68: akuity.argocd.v1.ArgoCDService.UpdateOrganizationInstanceCluster:input_type -> akuity.argocd.v1.UpdateOrganizationInstanceClusterRequest
	24, // 69: akuity.argocd.v1.ArgoCDService.DeleteOrganizationInstanceCluster:input_type -> akuity.argocd.v1.DeleteOrganizationInstanceClusterRequest
	3,  // 70: akuity.argocd.v1.ArgoCDService.ListOrganizationInstances:output_type -> akuity.argocd.v1.ListOrganizationInstancesResponse
	5,  // 71: akuity.argocd.v1.ArgoCDService.CreateOrganizationInstance:output_type -> akuity.argocd.v1.CreateOrganizationInstanceResponse
	7,  // 72: akuity.argocd.v1.ArgoCDService.GetOrganizationInstance:output_type -> akuity.argocd.v1.GetOrganizationInstanceResponse
	9,  // 73: akuity.argocd.v1.ArgoCDService.PatchOrganizationInstance:output_type -> akuity.argocd.v1.PatchOrganizationInstanceResponse
	11, // 74: akuity.argocd.v1.ArgoCDService.UpdateOrganizationInstance:output_type -> akuity.argocd.v1.UpdateOrganizationInstanceResponse
	13, // 75: akuity.argocd.v1.ArgoCDService.DeleteOrganizationInstance:output_type -> akuity.argocd.v1.DeleteOrganizationInstanceResponse
	15, // 76: akuity.argocd.v1.ArgoCDService.ListOrganizationInstanceClusters:output_type -> akuity.argocd.v1.ListOrganizationInstanceClustersResponse
	17, // 77: akuity.argocd.v1.ArgoCDService.CreateOrganizationInstanceCluster:output_type -> akuity.argocd.v1.CreateOrganizationInstanceClusterResponse
	19, // 78: akuity.argocd.v1.ArgoCDService.GetOrganizationInstanceCluster:output_type -> akuity.argocd.v1.GetOrganizationInstanceClusterResponse
	21, // 79: akuity.argocd.v1.ArgoCDService.GetOrganizationInstanceClusterManifests:output_type -> akuity.argocd.v1.GetOrganizationInstanceClusterManifestsResponse
	23, // 80: akuity.argocd.v1.ArgoCDService.UpdateOrganizationInstanceCluster:output_type -> akuity.argocd.v1.UpdateOrganizationInstanceClusterResponse
	25, // 81: akuity.argocd.v1.ArgoCDService.DeleteOrganizationInstanceCluster:output_type -> akuity.argocd.v1.DeleteOrganizationInstanceClusterResponse
	70, // [70:82] is the sub-list for method output_type
	58, // [58:70] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_argocd_v1_argocd_proto_init() }
func file_argocd_v1_argocd_proto_init() {
	if File_argocd_v1_argocd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_argocd_v1_argocd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationInstanceClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationInstanceClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationInstanceClusterManifestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationInstanceClusterManifestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsSyncStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDAlertConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDBannerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDExtensionInstallEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDGoogleAnalyticsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDHelmSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDKustomizeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDStatusBadgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDRBACConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDResourceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDWebTerminalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCustomization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAllowListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentHealthStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentAggregatedHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_argocd_v1_argocd_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[48].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_argocd_v1_argocd_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_argocd_v1_argocd_proto_goTypes,
		DependencyIndexes: file_argocd_v1_argocd_proto_depIdxs,
		EnumInfos:         file_argocd_v1_argocd_proto_enumTypes,
		MessageInfos:      file_argocd_v1_argocd_proto_msgTypes,
	}.Build()
	File_argocd_v1_argocd_proto = out.File
	file_argocd_v1_argocd_proto_rawDesc = nil
	file_argocd_v1_argocd_proto_goTypes = nil
	file_argocd_v1_argocd_proto_depIdxs = nil
}
