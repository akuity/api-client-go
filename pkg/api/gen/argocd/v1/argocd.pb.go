// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: argocd/v1/argocd.proto

package argocdv1

import (
	v13 "github.com/akuity/api-client-go/pkg/api/gen/types/events/v1"
	v1 "github.com/akuity/api-client-go/pkg/api/gen/types/id/v1"
	v11 "github.com/akuity/api-client-go/pkg/api/gen/types/misc/v1"
	v12 "github.com/akuity/api-client-go/pkg/api/gen/types/status/health/v1"
	v14 "github.com/akuity/api-client-go/pkg/api/gen/types/status/reconciliation/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncOperationField int32

const (
	SyncOperationField_SYNC_OPERATION_FIELD_UNSPECIFIED    SyncOperationField = 0
	SyncOperationField_SYNC_OPERATION_FIELD_APPS           SyncOperationField = 1
	SyncOperationField_SYNC_OPERATION_FIELD_PROJECTS       SyncOperationField = 2
	SyncOperationField_SYNC_OPERATION_FIELD_INITIATORS     SyncOperationField = 3
	SyncOperationField_SYNC_OPERATION_FIELD_REPOS          SyncOperationField = 4
	SyncOperationField_SYNC_OPERATION_FIELD_INSTANCE_NAMES SyncOperationField = 5
)

// Enum value maps for SyncOperationField.
var (
	SyncOperationField_name = map[int32]string{
		0: "SYNC_OPERATION_FIELD_UNSPECIFIED",
		1: "SYNC_OPERATION_FIELD_APPS",
		2: "SYNC_OPERATION_FIELD_PROJECTS",
		3: "SYNC_OPERATION_FIELD_INITIATORS",
		4: "SYNC_OPERATION_FIELD_REPOS",
		5: "SYNC_OPERATION_FIELD_INSTANCE_NAMES",
	}
	SyncOperationField_value = map[string]int32{
		"SYNC_OPERATION_FIELD_UNSPECIFIED":    0,
		"SYNC_OPERATION_FIELD_APPS":           1,
		"SYNC_OPERATION_FIELD_PROJECTS":       2,
		"SYNC_OPERATION_FIELD_INITIATORS":     3,
		"SYNC_OPERATION_FIELD_REPOS":          4,
		"SYNC_OPERATION_FIELD_INSTANCE_NAMES": 5,
	}
)

func (x SyncOperationField) Enum() *SyncOperationField {
	p := new(SyncOperationField)
	*p = x
	return p
}

func (x SyncOperationField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncOperationField) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[0].Descriptor()
}

func (SyncOperationField) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[0]
}

func (x SyncOperationField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncOperationField.Descriptor instead.
func (SyncOperationField) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{0}
}

type SyncOperationGroupField int32

const (
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_UNSPECIFIED    SyncOperationGroupField = 0
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_APPS           SyncOperationGroupField = 1
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_PROJECTS       SyncOperationGroupField = 2
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_INITIATORS     SyncOperationGroupField = 3
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_INSTANCE_NAMES SyncOperationGroupField = 4
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_STATUS         SyncOperationGroupField = 5
)

// Enum value maps for SyncOperationGroupField.
var (
	SyncOperationGroupField_name = map[int32]string{
		0: "SYNC_OPERATION_GROUP_FIELD_UNSPECIFIED",
		1: "SYNC_OPERATION_GROUP_FIELD_APPS",
		2: "SYNC_OPERATION_GROUP_FIELD_PROJECTS",
		3: "SYNC_OPERATION_GROUP_FIELD_INITIATORS",
		4: "SYNC_OPERATION_GROUP_FIELD_INSTANCE_NAMES",
		5: "SYNC_OPERATION_GROUP_FIELD_STATUS",
	}
	SyncOperationGroupField_value = map[string]int32{
		"SYNC_OPERATION_GROUP_FIELD_UNSPECIFIED":    0,
		"SYNC_OPERATION_GROUP_FIELD_APPS":           1,
		"SYNC_OPERATION_GROUP_FIELD_PROJECTS":       2,
		"SYNC_OPERATION_GROUP_FIELD_INITIATORS":     3,
		"SYNC_OPERATION_GROUP_FIELD_INSTANCE_NAMES": 4,
		"SYNC_OPERATION_GROUP_FIELD_STATUS":         5,
	}
)

func (x SyncOperationGroupField) Enum() *SyncOperationGroupField {
	p := new(SyncOperationGroupField)
	*p = x
	return p
}

func (x SyncOperationGroupField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncOperationGroupField) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[1].Descriptor()
}

func (SyncOperationGroupField) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[1]
}

func (x SyncOperationGroupField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncOperationGroupField.Descriptor instead.
func (SyncOperationGroupField) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{1}
}

type ClusterSize int32

const (
	ClusterSize_CLUSTER_SIZE_UNSPECIFIED ClusterSize = 0
	ClusterSize_CLUSTER_SIZE_SMALL       ClusterSize = 1
	ClusterSize_CLUSTER_SIZE_MEDIUM      ClusterSize = 2
	ClusterSize_CLUSTER_SIZE_LARGE       ClusterSize = 3
	ClusterSize_CLUSTER_SIZE_AUTO        ClusterSize = 4
)

// Enum value maps for ClusterSize.
var (
	ClusterSize_name = map[int32]string{
		0: "CLUSTER_SIZE_UNSPECIFIED",
		1: "CLUSTER_SIZE_SMALL",
		2: "CLUSTER_SIZE_MEDIUM",
		3: "CLUSTER_SIZE_LARGE",
		4: "CLUSTER_SIZE_AUTO",
	}
	ClusterSize_value = map[string]int32{
		"CLUSTER_SIZE_UNSPECIFIED": 0,
		"CLUSTER_SIZE_SMALL":       1,
		"CLUSTER_SIZE_MEDIUM":      2,
		"CLUSTER_SIZE_LARGE":       3,
		"CLUSTER_SIZE_AUTO":        4,
	}
)

func (x ClusterSize) Enum() *ClusterSize {
	p := new(ClusterSize)
	*p = x
	return p
}

func (x ClusterSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterSize) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[2].Descriptor()
}

func (ClusterSize) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[2]
}

func (x ClusterSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterSize.Descriptor instead.
func (ClusterSize) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{2}
}

type DirectClusterType int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	DirectClusterType_DIRECT_CLUSTER_TYPE_UPBOUND DirectClusterType = 0
	DirectClusterType_DIRECT_CLUSTER_TYPE_KARGO   DirectClusterType = 1
)

// Enum value maps for DirectClusterType.
var (
	DirectClusterType_name = map[int32]string{
		0: "DIRECT_CLUSTER_TYPE_UPBOUND",
		1: "DIRECT_CLUSTER_TYPE_KARGO",
	}
	DirectClusterType_value = map[string]int32{
		"DIRECT_CLUSTER_TYPE_UPBOUND": 0,
		"DIRECT_CLUSTER_TYPE_KARGO":   1,
	}
)

func (x DirectClusterType) Enum() *DirectClusterType {
	p := new(DirectClusterType)
	*p = x
	return p
}

func (x DirectClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[3].Descriptor()
}

func (DirectClusterType) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[3]
}

func (x DirectClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectClusterType.Descriptor instead.
func (DirectClusterType) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{3}
}

type PruneResourceType int32

const (
	PruneResourceType_PRUNE_RESOURCE_TYPE_UNSPECIFIED               PruneResourceType = 0
	PruneResourceType_PRUNE_RESOURCE_TYPE_ALL                       PruneResourceType = 1
	PruneResourceType_PRUNE_RESOURCE_TYPE_CLUSTERS                  PruneResourceType = 2
	PruneResourceType_PRUNE_RESOURCE_TYPE_REPO_CREDENTIAL_SECRETS   PruneResourceType = 3
	PruneResourceType_PRUNE_RESOURCE_TYPE_CONFIG_MANAGEMENT_PLUGINS PruneResourceType = 4
	PruneResourceType_PRUNE_RESOURCE_TYPE_APPLICATIONS              PruneResourceType = 5
	PruneResourceType_PRUNE_RESOURCE_TYPE_APPLICATION_SETS          PruneResourceType = 6
	PruneResourceType_PRUNE_RESOURCE_TYPE_APP_PROJECTS              PruneResourceType = 7
)

// Enum value maps for PruneResourceType.
var (
	PruneResourceType_name = map[int32]string{
		0: "PRUNE_RESOURCE_TYPE_UNSPECIFIED",
		1: "PRUNE_RESOURCE_TYPE_ALL",
		2: "PRUNE_RESOURCE_TYPE_CLUSTERS",
		3: "PRUNE_RESOURCE_TYPE_REPO_CREDENTIAL_SECRETS",
		4: "PRUNE_RESOURCE_TYPE_CONFIG_MANAGEMENT_PLUGINS",
		5: "PRUNE_RESOURCE_TYPE_APPLICATIONS",
		6: "PRUNE_RESOURCE_TYPE_APPLICATION_SETS",
		7: "PRUNE_RESOURCE_TYPE_APP_PROJECTS",
	}
	PruneResourceType_value = map[string]int32{
		"PRUNE_RESOURCE_TYPE_UNSPECIFIED":               0,
		"PRUNE_RESOURCE_TYPE_ALL":                       1,
		"PRUNE_RESOURCE_TYPE_CLUSTERS":                  2,
		"PRUNE_RESOURCE_TYPE_REPO_CREDENTIAL_SECRETS":   3,
		"PRUNE_RESOURCE_TYPE_CONFIG_MANAGEMENT_PLUGINS": 4,
		"PRUNE_RESOURCE_TYPE_APPLICATIONS":              5,
		"PRUNE_RESOURCE_TYPE_APPLICATION_SETS":          6,
		"PRUNE_RESOURCE_TYPE_APP_PROJECTS":              7,
	}
)

func (x PruneResourceType) Enum() *PruneResourceType {
	p := new(PruneResourceType)
	*p = x
	return p
}

func (x PruneResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PruneResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[4].Descriptor()
}

func (PruneResourceType) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[4]
}

func (x PruneResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PruneResourceType.Descriptor instead.
func (PruneResourceType) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{4}
}

type ClusterCommandFor int32

const (
	ClusterCommandFor_CLUSTER_COMMAND_FOR_UNSPECIFIED ClusterCommandFor = 0
	ClusterCommandFor_CLUSTER_COMMAND_FOR_KUBECTL     ClusterCommandFor = 1
	ClusterCommandFor_CLUSTER_COMMAND_FOR_EKS         ClusterCommandFor = 2
	ClusterCommandFor_CLUSTER_COMMAND_FOR_AKUITY_CLI  ClusterCommandFor = 3
)

// Enum value maps for ClusterCommandFor.
var (
	ClusterCommandFor_name = map[int32]string{
		0: "CLUSTER_COMMAND_FOR_UNSPECIFIED",
		1: "CLUSTER_COMMAND_FOR_KUBECTL",
		2: "CLUSTER_COMMAND_FOR_EKS",
		3: "CLUSTER_COMMAND_FOR_AKUITY_CLI",
	}
	ClusterCommandFor_value = map[string]int32{
		"CLUSTER_COMMAND_FOR_UNSPECIFIED": 0,
		"CLUSTER_COMMAND_FOR_KUBECTL":     1,
		"CLUSTER_COMMAND_FOR_EKS":         2,
		"CLUSTER_COMMAND_FOR_AKUITY_CLI":  3,
	}
)

func (x ClusterCommandFor) Enum() *ClusterCommandFor {
	p := new(ClusterCommandFor)
	*p = x
	return p
}

func (x ClusterCommandFor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterCommandFor) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[5].Descriptor()
}

func (ClusterCommandFor) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[5]
}

func (x ClusterCommandFor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterCommandFor.Descriptor instead.
func (ClusterCommandFor) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{5}
}

type SortAddons int32

const (
	SortAddons_SORT_ADDONS_UNSPECIFIED        SortAddons = 0
	SortAddons_SORT_ADDONS_BY_NAME_ASCENDING  SortAddons = 1
	SortAddons_SORT_ADDONS_BY_NAME_DESCENDING SortAddons = 2
)

// Enum value maps for SortAddons.
var (
	SortAddons_name = map[int32]string{
		0: "SORT_ADDONS_UNSPECIFIED",
		1: "SORT_ADDONS_BY_NAME_ASCENDING",
		2: "SORT_ADDONS_BY_NAME_DESCENDING",
	}
	SortAddons_value = map[string]int32{
		"SORT_ADDONS_UNSPECIFIED":        0,
		"SORT_ADDONS_BY_NAME_ASCENDING":  1,
		"SORT_ADDONS_BY_NAME_DESCENDING": 2,
	}
)

func (x SortAddons) Enum() *SortAddons {
	p := new(SortAddons)
	*p = x
	return p
}

func (x SortAddons) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortAddons) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[6].Descriptor()
}

func (SortAddons) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[6]
}

func (x SortAddons) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortAddons.Descriptor instead.
func (SortAddons) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{6}
}

type AddonType int32

const (
	AddonType_ADDON_TYPE_UNSPECIFIED AddonType = 0
	AddonType_ADDON_TYPE_HELM        AddonType = 1
	AddonType_ADDON_TYPE_KUSTOMIZE   AddonType = 2
)

// Enum value maps for AddonType.
var (
	AddonType_name = map[int32]string{
		0: "ADDON_TYPE_UNSPECIFIED",
		1: "ADDON_TYPE_HELM",
		2: "ADDON_TYPE_KUSTOMIZE",
	}
	AddonType_value = map[string]int32{
		"ADDON_TYPE_UNSPECIFIED": 0,
		"ADDON_TYPE_HELM":        1,
		"ADDON_TYPE_KUSTOMIZE":   2,
	}
)

func (x AddonType) Enum() *AddonType {
	p := new(AddonType)
	*p = x
	return p
}

func (x AddonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddonType) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[7].Descriptor()
}

func (AddonType) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[7]
}

func (x AddonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddonType.Descriptor instead.
func (AddonType) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{7}
}

type SelectorOperator int32

const (
	SelectorOperator_SELECTOR_OPERATOR_UNSPECIFIED SelectorOperator = 0
	SelectorOperator_SELECTOR_OPERATOR_IN          SelectorOperator = 1
	SelectorOperator_SELECTOR_OPERATOR_NOT_IN      SelectorOperator = 2
)

// Enum value maps for SelectorOperator.
var (
	SelectorOperator_name = map[int32]string{
		0: "SELECTOR_OPERATOR_UNSPECIFIED",
		1: "SELECTOR_OPERATOR_IN",
		2: "SELECTOR_OPERATOR_NOT_IN",
	}
	SelectorOperator_value = map[string]int32{
		"SELECTOR_OPERATOR_UNSPECIFIED": 0,
		"SELECTOR_OPERATOR_IN":          1,
		"SELECTOR_OPERATOR_NOT_IN":      2,
	}
)

func (x SelectorOperator) Enum() *SelectorOperator {
	p := new(SelectorOperator)
	*p = x
	return p
}

func (x SelectorOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectorOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[8].Descriptor()
}

func (SelectorOperator) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[8]
}

func (x SelectorOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectorOperator.Descriptor instead.
func (SelectorOperator) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{8}
}

type OnConflictAction int32

const (
	OnConflictAction_ON_CONFLICT_ACTION_UNSPECIFIED OnConflictAction = 0
	OnConflictAction_ON_CONFLICT_ACTION_SKIP        OnConflictAction = 1
	OnConflictAction_ON_CONFLICT_ACTION_OVERWRITE   OnConflictAction = 2
)

// Enum value maps for OnConflictAction.
var (
	OnConflictAction_name = map[int32]string{
		0: "ON_CONFLICT_ACTION_UNSPECIFIED",
		1: "ON_CONFLICT_ACTION_SKIP",
		2: "ON_CONFLICT_ACTION_OVERWRITE",
	}
	OnConflictAction_value = map[string]int32{
		"ON_CONFLICT_ACTION_UNSPECIFIED": 0,
		"ON_CONFLICT_ACTION_SKIP":        1,
		"ON_CONFLICT_ACTION_OVERWRITE":   2,
	}
)

func (x OnConflictAction) Enum() *OnConflictAction {
	p := new(OnConflictAction)
	*p = x
	return p
}

func (x OnConflictAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnConflictAction) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[9].Descriptor()
}

func (OnConflictAction) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[9]
}

func (x OnConflictAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnConflictAction.Descriptor instead.
func (OnConflictAction) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{9}
}

type ListInstanceVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListInstanceVersionsRequest) Reset() {
	*x = ListInstanceVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceVersionsRequest) ProtoMessage() {}

func (x *ListInstanceVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceVersionsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{0}
}

type ListInstanceVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []*InstanceVersion `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *ListInstanceVersionsResponse) Reset() {
	*x = ListInstanceVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceVersionsResponse) ProtoMessage() {}

func (x *ListInstanceVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceVersionsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{1}
}

func (x *ListInstanceVersionsResponse) GetVersions() []*InstanceVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

type ListInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *ListInstancesRequest) Reset() {
	*x = ListInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesRequest) ProtoMessage() {}

func (x *ListInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListInstancesRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{2}
}

func (x *ListInstancesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListInstancesRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type ListInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ListInstancesResponse) Reset() {
	*x = ListInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse) ProtoMessage() {}

func (x *ListInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{3}
}

func (x *ListInstancesResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type CreateInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version        string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Description    *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Shard          *string `protobuf:"bytes,5,opt,name=shard,proto3,oneof" json:"shard,omitempty"`
	WorkspaceId    string  `protobuf:"bytes,6,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *CreateInstanceRequest) Reset() {
	*x = CreateInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceRequest) ProtoMessage() {}

func (x *CreateInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{4}
}

func (x *CreateInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInstanceRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateInstanceRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateInstanceRequest) GetShard() string {
	if x != nil && x.Shard != nil {
		return *x.Shard
	}
	return ""
}

func (x *CreateInstanceRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type CreateInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *CreateInstanceResponse) Reset() {
	*x = CreateInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceResponse) ProtoMessage() {}

func (x *CreateInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{5}
}

func (x *CreateInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type GetInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	IdType         v1.Type `protobuf:"varint,2,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id             string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string  `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceRequest) Reset() {
	*x = GetInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceRequest) ProtoMessage() {}

func (x *GetInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{6}
}

func (x *GetInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *GetInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *GetInstanceResponse) Reset() {
	*x = GetInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceResponse) ProtoMessage() {}

func (x *GetInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{7}
}

func (x *GetInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type GetInstanceCSSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceCSSRequest) Reset() {
	*x = GetInstanceCSSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceCSSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceCSSRequest) ProtoMessage() {}

func (x *GetInstanceCSSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceCSSRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceCSSRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{8}
}

func (x *GetInstanceCSSRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceCSSRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceCSSRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceCSSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Css string `protobuf:"bytes,1,opt,name=css,proto3" json:"css,omitempty"`
}

func (x *GetInstanceCSSResponse) Reset() {
	*x = GetInstanceCSSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceCSSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceCSSResponse) ProtoMessage() {}

func (x *GetInstanceCSSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceCSSResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceCSSResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{9}
}

func (x *GetInstanceCSSResponse) GetCss() string {
	if x != nil {
		return x.Css
	}
	return ""
}

type GetInstanceNotificationSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceNotificationSettingsRequest) Reset() {
	*x = GetInstanceNotificationSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceNotificationSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceNotificationSettingsRequest) ProtoMessage() {}

func (x *GetInstanceNotificationSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceNotificationSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceNotificationSettingsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{10}
}

func (x *GetInstanceNotificationSettingsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceNotificationSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceNotificationSettingsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceNotificationSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret map[string]string `protobuf:"bytes,1,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceNotificationSettingsResponse) Reset() {
	*x = GetInstanceNotificationSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceNotificationSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceNotificationSettingsResponse) ProtoMessage() {}

func (x *GetInstanceNotificationSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceNotificationSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceNotificationSettingsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{11}
}

func (x *GetInstanceNotificationSettingsResponse) GetSecret() map[string]string {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *GetInstanceNotificationSettingsResponse) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetInstanceNotificationCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceNotificationCatalogRequest) Reset() {
	*x = GetInstanceNotificationCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceNotificationCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceNotificationCatalogRequest) ProtoMessage() {}

func (x *GetInstanceNotificationCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceNotificationCatalogRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceNotificationCatalogRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{12}
}

func (x *GetInstanceNotificationCatalogRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceNotificationCatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceNotificationCatalogRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceNotificationCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog map[string]string `protobuf:"bytes,1,rep,name=catalog,proto3" json:"catalog,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceNotificationCatalogResponse) Reset() {
	*x = GetInstanceNotificationCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceNotificationCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceNotificationCatalogResponse) ProtoMessage() {}

func (x *GetInstanceNotificationCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceNotificationCatalogResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceNotificationCatalogResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{13}
}

func (x *GetInstanceNotificationCatalogResponse) GetCatalog() map[string]string {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type GetInstanceImageUpdaterSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceImageUpdaterSettingsRequest) Reset() {
	*x = GetInstanceImageUpdaterSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceImageUpdaterSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceImageUpdaterSettingsRequest) ProtoMessage() {}

func (x *GetInstanceImageUpdaterSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceImageUpdaterSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceImageUpdaterSettingsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{14}
}

func (x *GetInstanceImageUpdaterSettingsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceImageUpdaterSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceImageUpdaterSettingsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceImageUpdaterSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret    map[string]string `protobuf:"bytes,1,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config    map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SshConfig map[string]string `protobuf:"bytes,3,rep,name=ssh_config,json=sshConfig,proto3" json:"ssh_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Version   string            `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetInstanceImageUpdaterSettingsResponse) Reset() {
	*x = GetInstanceImageUpdaterSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceImageUpdaterSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceImageUpdaterSettingsResponse) ProtoMessage() {}

func (x *GetInstanceImageUpdaterSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceImageUpdaterSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceImageUpdaterSettingsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{15}
}

func (x *GetInstanceImageUpdaterSettingsResponse) GetSecret() map[string]string {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *GetInstanceImageUpdaterSettingsResponse) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetInstanceImageUpdaterSettingsResponse) GetSshConfig() map[string]string {
	if x != nil {
		return x.SshConfig
	}
	return nil
}

func (x *GetInstanceImageUpdaterSettingsResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ResourceCustomizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group             string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Kind              string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Health            string `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`
	Actions           string `protobuf:"bytes,4,opt,name=actions,proto3" json:"actions,omitempty"`
	IgnoreDifferences string `protobuf:"bytes,5,opt,name=ignore_differences,json=ignoreDifferences,proto3" json:"ignore_differences,omitempty"`
	KnownTypeFields   string `protobuf:"bytes,6,opt,name=known_type_fields,json=knownTypeFields,proto3" json:"known_type_fields,omitempty"`
}

func (x *ResourceCustomizationConfig) Reset() {
	*x = ResourceCustomizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCustomizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCustomizationConfig) ProtoMessage() {}

func (x *ResourceCustomizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCustomizationConfig.ProtoReflect.Descriptor instead.
func (*ResourceCustomizationConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{16}
}

func (x *ResourceCustomizationConfig) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ResourceCustomizationConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceCustomizationConfig) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *ResourceCustomizationConfig) GetActions() string {
	if x != nil {
		return x.Actions
	}
	return ""
}

func (x *ResourceCustomizationConfig) GetIgnoreDifferences() string {
	if x != nil {
		return x.IgnoreDifferences
	}
	return ""
}

func (x *ResourceCustomizationConfig) GetKnownTypeFields() string {
	if x != nil {
		return x.KnownTypeFields
	}
	return ""
}

type GetInstanceResourceCustomizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceResourceCustomizationsRequest) Reset() {
	*x = GetInstanceResourceCustomizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceResourceCustomizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceResourceCustomizationsRequest) ProtoMessage() {}

func (x *GetInstanceResourceCustomizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceResourceCustomizationsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceResourceCustomizationsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{17}
}

func (x *GetInstanceResourceCustomizationsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceResourceCustomizationsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceResourceCustomizationsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceResourceCustomizationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceCustomizations []*ResourceCustomizationConfig `protobuf:"bytes,1,rep,name=resource_customizations,json=resourceCustomizations,proto3" json:"resource_customizations,omitempty"`
}

func (x *GetInstanceResourceCustomizationsResponse) Reset() {
	*x = GetInstanceResourceCustomizationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceResourceCustomizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceResourceCustomizationsResponse) ProtoMessage() {}

func (x *GetInstanceResourceCustomizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceResourceCustomizationsResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceResourceCustomizationsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{18}
}

func (x *GetInstanceResourceCustomizationsResponse) GetResourceCustomizations() []*ResourceCustomizationConfig {
	if x != nil {
		return x.ResourceCustomizations
	}
	return nil
}

type PatchInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string           `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Patch          *structpb.Struct `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
	WorkspaceId    string           `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *PatchInstanceRequest) Reset() {
	*x = PatchInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceRequest) ProtoMessage() {}

func (x *PatchInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{19}
}

func (x *PatchInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceRequest) GetPatch() *structpb.Struct {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *PatchInstanceRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type PatchInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *PatchInstanceResponse) Reset() {
	*x = PatchInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceResponse) ProtoMessage() {}

func (x *PatchInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{20}
}

func (x *PatchInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type PatchInstanceSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                                            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Secret         map[string]*PatchInstanceSecretRequest_ValueField `protobuf:"bytes,3,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkspaceId    string                                            `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *PatchInstanceSecretRequest) Reset() {
	*x = PatchInstanceSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceSecretRequest) ProtoMessage() {}

func (x *PatchInstanceSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceSecretRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{21}
}

func (x *PatchInstanceSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceSecretRequest) GetSecret() map[string]*PatchInstanceSecretRequest_ValueField {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *PatchInstanceSecretRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type PatchInstanceSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatchInstanceSecretResponse) Reset() {
	*x = PatchInstanceSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceSecretResponse) ProtoMessage() {}

func (x *PatchInstanceSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceSecretResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{22}
}

type PatchInstanceNotificationSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                                                        `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                                                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Secret         map[string]*PatchInstanceNotificationSecretRequest_ValueField `protobuf:"bytes,3,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkspaceId    string                                                        `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *PatchInstanceNotificationSecretRequest) Reset() {
	*x = PatchInstanceNotificationSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceNotificationSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceNotificationSecretRequest) ProtoMessage() {}

func (x *PatchInstanceNotificationSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceNotificationSecretRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceNotificationSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{23}
}

func (x *PatchInstanceNotificationSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceNotificationSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceNotificationSecretRequest) GetSecret() map[string]*PatchInstanceNotificationSecretRequest_ValueField {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *PatchInstanceNotificationSecretRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type PatchInstanceNotificationSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatchInstanceNotificationSecretResponse) Reset() {
	*x = PatchInstanceNotificationSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceNotificationSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceNotificationSecretResponse) ProtoMessage() {}

func (x *PatchInstanceNotificationSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceNotificationSecretResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceNotificationSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{24}
}

type PatchInstanceImageUpdaterSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                                                        `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                                                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Secret         map[string]*PatchInstanceImageUpdaterSecretRequest_ValueField `protobuf:"bytes,3,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkspaceId    string                                                        `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *PatchInstanceImageUpdaterSecretRequest) Reset() {
	*x = PatchInstanceImageUpdaterSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceImageUpdaterSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceImageUpdaterSecretRequest) ProtoMessage() {}

func (x *PatchInstanceImageUpdaterSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceImageUpdaterSecretRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceImageUpdaterSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{25}
}

func (x *PatchInstanceImageUpdaterSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceImageUpdaterSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceImageUpdaterSecretRequest) GetSecret() map[string]*PatchInstanceImageUpdaterSecretRequest_ValueField {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *PatchInstanceImageUpdaterSecretRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type PatchInstanceImageUpdaterSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatchInstanceImageUpdaterSecretResponse) Reset() {
	*x = PatchInstanceImageUpdaterSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceImageUpdaterSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceImageUpdaterSecretResponse) ProtoMessage() {}

func (x *PatchInstanceImageUpdaterSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceImageUpdaterSecretResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceImageUpdaterSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{26}
}

type PatchInstanceAppsetSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                                                  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                                                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Secret         map[string]*PatchInstanceAppsetSecretRequest_ValueField `protobuf:"bytes,3,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkspaceId    string                                                  `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *PatchInstanceAppsetSecretRequest) Reset() {
	*x = PatchInstanceAppsetSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceAppsetSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceAppsetSecretRequest) ProtoMessage() {}

func (x *PatchInstanceAppsetSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceAppsetSecretRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceAppsetSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{27}
}

func (x *PatchInstanceAppsetSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceAppsetSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceAppsetSecretRequest) GetSecret() map[string]*PatchInstanceAppsetSecretRequest_ValueField {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *PatchInstanceAppsetSecretRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type PatchInstanceAppsetSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatchInstanceAppsetSecretResponse) Reset() {
	*x = PatchInstanceAppsetSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceAppsetSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceAppsetSecretResponse) ProtoMessage() {}

func (x *PatchInstanceAppsetSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceAppsetSecretResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceAppsetSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{28}
}

type GetInstanceAppsetSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceAppsetSecretRequest) Reset() {
	*x = GetInstanceAppsetSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceAppsetSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceAppsetSecretRequest) ProtoMessage() {}

func (x *GetInstanceAppsetSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceAppsetSecretRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceAppsetSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{29}
}

func (x *GetInstanceAppsetSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceAppsetSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceAppsetSecretRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceAppsetSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret map[string]string `protobuf:"bytes,1,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceAppsetSecretResponse) Reset() {
	*x = GetInstanceAppsetSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceAppsetSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceAppsetSecretResponse) ProtoMessage() {}

func (x *GetInstanceAppsetSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceAppsetSecretResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceAppsetSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{30}
}

func (x *GetInstanceAppsetSecretResponse) GetSecret() map[string]string {
	if x != nil {
		return x.Secret
	}
	return nil
}

type UpdateInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string    `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Instance       *Instance `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	WorkspaceId    string    `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpdateInstanceRequest) Reset() {
	*x = UpdateInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceRequest) ProtoMessage() {}

func (x *UpdateInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceRequest) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *UpdateInstanceRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *UpdateInstanceResponse) Reset() {
	*x = UpdateInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceResponse) ProtoMessage() {}

func (x *UpdateInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type UpdateInstanceWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	NewWorkspaceId string `protobuf:"bytes,4,opt,name=new_workspace_id,json=newWorkspaceId,proto3" json:"new_workspace_id,omitempty"`
}

func (x *UpdateInstanceWorkspaceRequest) Reset() {
	*x = UpdateInstanceWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceWorkspaceRequest) ProtoMessage() {}

func (x *UpdateInstanceWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateInstanceWorkspaceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceWorkspaceRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *UpdateInstanceWorkspaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceWorkspaceRequest) GetNewWorkspaceId() string {
	if x != nil {
		return x.NewWorkspaceId
	}
	return ""
}

type UpdateInstanceWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceWorkspaceResponse) Reset() {
	*x = UpdateInstanceWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceWorkspaceResponse) ProtoMessage() {}

func (x *UpdateInstanceWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{34}
}

type UpdateInstanceCSSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Css            string `protobuf:"bytes,3,opt,name=css,proto3" json:"css,omitempty"`
	WorkspaceId    string `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpdateInstanceCSSRequest) Reset() {
	*x = UpdateInstanceCSSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceCSSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceCSSRequest) ProtoMessage() {}

func (x *UpdateInstanceCSSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceCSSRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceCSSRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateInstanceCSSRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceCSSRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceCSSRequest) GetCss() string {
	if x != nil {
		return x.Css
	}
	return ""
}

func (x *UpdateInstanceCSSRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateInstanceCSSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Css string `protobuf:"bytes,1,opt,name=css,proto3" json:"css,omitempty"`
}

func (x *UpdateInstanceCSSResponse) Reset() {
	*x = UpdateInstanceCSSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceCSSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceCSSResponse) ProtoMessage() {}

func (x *UpdateInstanceCSSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceCSSResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceCSSResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateInstanceCSSResponse) GetCss() string {
	if x != nil {
		return x.Css
	}
	return ""
}

type UpdateInstanceNotificationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Config         map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkspaceId    string            `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpdateInstanceNotificationConfigRequest) Reset() {
	*x = UpdateInstanceNotificationConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceNotificationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceNotificationConfigRequest) ProtoMessage() {}

func (x *UpdateInstanceNotificationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceNotificationConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceNotificationConfigRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateInstanceNotificationConfigRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceNotificationConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceNotificationConfigRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateInstanceNotificationConfigRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateInstanceNotificationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceNotificationConfigResponse) Reset() {
	*x = UpdateInstanceNotificationConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceNotificationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceNotificationConfigResponse) ProtoMessage() {}

func (x *UpdateInstanceNotificationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceNotificationConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceNotificationConfigResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{38}
}

type UpdateInstanceImageUpdaterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Config         map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkspaceId    string            `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Version        string            `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateInstanceImageUpdaterConfigRequest) Reset() {
	*x = UpdateInstanceImageUpdaterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceImageUpdaterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceImageUpdaterConfigRequest) ProtoMessage() {}

func (x *UpdateInstanceImageUpdaterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceImageUpdaterConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceImageUpdaterConfigRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateInstanceImageUpdaterConfigRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceImageUpdaterConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceImageUpdaterConfigRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateInstanceImageUpdaterConfigRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *UpdateInstanceImageUpdaterConfigRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type UpdateInstanceImageUpdaterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceImageUpdaterConfigResponse) Reset() {
	*x = UpdateInstanceImageUpdaterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceImageUpdaterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceImageUpdaterConfigResponse) ProtoMessage() {}

func (x *UpdateInstanceImageUpdaterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceImageUpdaterConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceImageUpdaterConfigResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{40}
}

type UpdateInstanceImageUpdaterSSHConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Config         map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkspaceId    string            `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) Reset() {
	*x = UpdateInstanceImageUpdaterSSHConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceImageUpdaterSSHConfigRequest) ProtoMessage() {}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceImageUpdaterSSHConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceImageUpdaterSSHConfigRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateInstanceImageUpdaterSSHConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceImageUpdaterSSHConfigResponse) Reset() {
	*x = UpdateInstanceImageUpdaterSSHConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceImageUpdaterSSHConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceImageUpdaterSSHConfigResponse) ProtoMessage() {}

func (x *UpdateInstanceImageUpdaterSSHConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceImageUpdaterSSHConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceImageUpdaterSSHConfigResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{42}
}

type UpdateInstanceResourceCustomizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                         `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Resources      []*ResourceCustomizationConfig `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
	WorkspaceId    string                         `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpdateInstanceResourceCustomizationsRequest) Reset() {
	*x = UpdateInstanceResourceCustomizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceResourceCustomizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceResourceCustomizationsRequest) ProtoMessage() {}

func (x *UpdateInstanceResourceCustomizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceResourceCustomizationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceResourceCustomizationsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateInstanceResourceCustomizationsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceResourceCustomizationsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceResourceCustomizationsRequest) GetResources() []*ResourceCustomizationConfig {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *UpdateInstanceResourceCustomizationsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateInstanceResourceCustomizationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceResourceCustomizationsResponse) Reset() {
	*x = UpdateInstanceResourceCustomizationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceResourceCustomizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceResourceCustomizationsResponse) ProtoMessage() {}

func (x *UpdateInstanceResourceCustomizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceResourceCustomizationsResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceResourceCustomizationsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{44}
}

type DeleteInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *DeleteInstanceRequest) Reset() {
	*x = DeleteInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceRequest) ProtoMessage() {}

func (x *DeleteInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteInstanceRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type DeleteInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInstanceResponse) Reset() {
	*x = DeleteInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceResponse) ProtoMessage() {}

func (x *DeleteInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{46}
}

type ListInstanceAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *ListInstanceAccountsRequest) Reset() {
	*x = ListInstanceAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceAccountsRequest) ProtoMessage() {}

func (x *ListInstanceAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceAccountsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{47}
}

func (x *ListInstanceAccountsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListInstanceAccountsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListInstanceAccountsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type ListInstanceAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*InstanceAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *ListInstanceAccountsResponse) Reset() {
	*x = ListInstanceAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceAccountsResponse) ProtoMessage() {}

func (x *ListInstanceAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceAccountsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{48}
}

func (x *ListInstanceAccountsResponse) GetAccounts() []*InstanceAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type UpsertInstanceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                       `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string                       `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Capabilities   *InstanceAccountCapabilities `protobuf:"bytes,4,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	Disabled       bool                         `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	WorkspaceId    string                       `protobuf:"bytes,6,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpsertInstanceAccountRequest) Reset() {
	*x = UpsertInstanceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertInstanceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertInstanceAccountRequest) ProtoMessage() {}

func (x *UpsertInstanceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertInstanceAccountRequest.ProtoReflect.Descriptor instead.
func (*UpsertInstanceAccountRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{49}
}

func (x *UpsertInstanceAccountRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpsertInstanceAccountRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpsertInstanceAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertInstanceAccountRequest) GetCapabilities() *InstanceAccountCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *UpsertInstanceAccountRequest) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *UpsertInstanceAccountRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpsertInstanceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *InstanceAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *UpsertInstanceAccountResponse) Reset() {
	*x = UpsertInstanceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertInstanceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertInstanceAccountResponse) ProtoMessage() {}

func (x *UpsertInstanceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertInstanceAccountResponse.ProtoReflect.Descriptor instead.
func (*UpsertInstanceAccountResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{50}
}

func (x *UpsertInstanceAccountResponse) GetAccount() *InstanceAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

type UpdateInstanceAccountPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Password       string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	WorkspaceId    string `protobuf:"bytes,5,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpdateInstanceAccountPasswordRequest) Reset() {
	*x = UpdateInstanceAccountPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceAccountPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceAccountPasswordRequest) ProtoMessage() {}

func (x *UpdateInstanceAccountPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceAccountPasswordRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceAccountPasswordRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateInstanceAccountPasswordRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceAccountPasswordRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateInstanceAccountPasswordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateInstanceAccountPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateInstanceAccountPasswordRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateInstanceAccountPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceAccountPasswordResponse) Reset() {
	*x = UpdateInstanceAccountPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceAccountPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceAccountPasswordResponse) ProtoMessage() {}

func (x *UpdateInstanceAccountPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceAccountPasswordResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceAccountPasswordResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{52}
}

type RegenerateInstanceAccountPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	WorkspaceId    string `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *RegenerateInstanceAccountPasswordRequest) Reset() {
	*x = RegenerateInstanceAccountPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateInstanceAccountPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateInstanceAccountPasswordRequest) ProtoMessage() {}

func (x *RegenerateInstanceAccountPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateInstanceAccountPasswordRequest.ProtoReflect.Descriptor instead.
func (*RegenerateInstanceAccountPasswordRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{53}
}

func (x *RegenerateInstanceAccountPasswordRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *RegenerateInstanceAccountPasswordRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RegenerateInstanceAccountPasswordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegenerateInstanceAccountPasswordRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type RegenerateInstanceAccountPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RegenerateInstanceAccountPasswordResponse) Reset() {
	*x = RegenerateInstanceAccountPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateInstanceAccountPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateInstanceAccountPasswordResponse) ProtoMessage() {}

func (x *RegenerateInstanceAccountPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateInstanceAccountPasswordResponse.ProtoReflect.Descriptor instead.
func (*RegenerateInstanceAccountPasswordResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{54}
}

func (x *RegenerateInstanceAccountPasswordResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type DeleteInstanceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	WorkspaceId    string `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *DeleteInstanceAccountRequest) Reset() {
	*x = DeleteInstanceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceAccountRequest) ProtoMessage() {}

func (x *DeleteInstanceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceAccountRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteInstanceAccountRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteInstanceAccountRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeleteInstanceAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteInstanceAccountRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type DeleteInstanceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInstanceAccountResponse) Reset() {
	*x = DeleteInstanceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceAccountResponse) ProtoMessage() {}

func (x *DeleteInstanceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceAccountResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{56}
}

type GetAIAssistantUsageStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     []string `protobuf:"bytes,2,rep,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *GetAIAssistantUsageStatsRequest) Reset() {
	*x = GetAIAssistantUsageStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAIAssistantUsageStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAIAssistantUsageStatsRequest) ProtoMessage() {}

func (x *GetAIAssistantUsageStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAIAssistantUsageStatsRequest.ProtoReflect.Descriptor instead.
func (*GetAIAssistantUsageStatsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{57}
}

func (x *GetAIAssistantUsageStatsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetAIAssistantUsageStatsRequest) GetInstanceId() []string {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

type GetAIAssistantUsageStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalConversations    uint32 `protobuf:"varint,1,opt,name=total_conversations,json=totalConversations,proto3" json:"total_conversations,omitempty"`
	ResolvedConversations uint32 `protobuf:"varint,3,opt,name=resolved_conversations,json=resolvedConversations,proto3" json:"resolved_conversations,omitempty"`
}

func (x *GetAIAssistantUsageStatsResponse) Reset() {
	*x = GetAIAssistantUsageStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAIAssistantUsageStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAIAssistantUsageStatsResponse) ProtoMessage() {}

func (x *GetAIAssistantUsageStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAIAssistantUsageStatsResponse.ProtoReflect.Descriptor instead.
func (*GetAIAssistantUsageStatsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{58}
}

func (x *GetAIAssistantUsageStatsResponse) GetTotalConversations() uint32 {
	if x != nil {
		return x.TotalConversations
	}
	return 0
}

func (x *GetAIAssistantUsageStatsResponse) GetResolvedConversations() uint32 {
	if x != nil {
		return x.ResolvedConversations
	}
	return 0
}

type GetSyncOperationsStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string               `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Filter         *SyncOperationFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Interval       v11.GroupByInterval  `protobuf:"varint,3,opt,name=interval,proto3,enum=akuity.types.misc.v1.GroupByInterval" json:"interval,omitempty"`
	// can either set group_by_field or group_by_label_field(has more preference)
	GroupByField      SyncOperationGroupField `protobuf:"varint,4,opt,name=group_by_field,json=groupByField,proto3,enum=akuity.argocd.v1.SyncOperationGroupField" json:"group_by_field,omitempty"`
	GroupByLabelField *string                 `protobuf:"bytes,5,opt,name=group_by_label_field,json=groupByLabelField,proto3,oneof" json:"group_by_label_field,omitempty"`
}

func (x *GetSyncOperationsStatsRequest) Reset() {
	*x = GetSyncOperationsStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncOperationsStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncOperationsStatsRequest) ProtoMessage() {}

func (x *GetSyncOperationsStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncOperationsStatsRequest.ProtoReflect.Descriptor instead.
func (*GetSyncOperationsStatsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{59}
}

func (x *GetSyncOperationsStatsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetSyncOperationsStatsRequest) GetFilter() *SyncOperationFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetSyncOperationsStatsRequest) GetInterval() v11.GroupByInterval {
	if x != nil {
		return x.Interval
	}
	return v11.GroupByInterval(0)
}

func (x *GetSyncOperationsStatsRequest) GetGroupByField() SyncOperationGroupField {
	if x != nil {
		return x.GroupByField
	}
	return SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_UNSPECIFIED
}

func (x *GetSyncOperationsStatsRequest) GetGroupByLabelField() string {
	if x != nil && x.GroupByLabelField != nil {
		return *x.GroupByLabelField
	}
	return ""
}

type GetSyncOperationsEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string               `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Filter         *SyncOperationFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit          *int64               `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset         *int64               `protobuf:"varint,4,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	Field          SyncOperationField   `protobuf:"varint,5,opt,name=field,proto3,enum=akuity.argocd.v1.SyncOperationField" json:"field,omitempty"`
	FieldLike      string               `protobuf:"bytes,6,opt,name=field_like,json=fieldLike,proto3" json:"field_like,omitempty"`
}

func (x *GetSyncOperationsEventsRequest) Reset() {
	*x = GetSyncOperationsEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncOperationsEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncOperationsEventsRequest) ProtoMessage() {}

func (x *GetSyncOperationsEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncOperationsEventsRequest.ProtoReflect.Descriptor instead.
func (*GetSyncOperationsEventsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{60}
}

func (x *GetSyncOperationsEventsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetSyncOperationsEventsRequest) GetFilter() *SyncOperationFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetSyncOperationsEventsRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetSyncOperationsEventsRequest) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetSyncOperationsEventsRequest) GetField() SyncOperationField {
	if x != nil {
		return x.Field
	}
	return SyncOperationField_SYNC_OPERATION_FIELD_UNSPECIFIED
}

func (x *GetSyncOperationsEventsRequest) GetFieldLike() string {
	if x != nil {
		return x.FieldLike
	}
	return ""
}

type SyncOperationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime     string            `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *string           `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	AppName       []string          `protobuf:"bytes,3,rep,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	Projects      []string          `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty"`
	Labels        map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Repo          []string          `protobuf:"bytes,6,rep,name=repo,proto3" json:"repo,omitempty"`
	InstanceId    []string          `protobuf:"bytes,7,rep,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	InitiatedBy   []string          `protobuf:"bytes,8,rep,name=initiated_by,json=initiatedBy,proto3" json:"initiated_by,omitempty"`
	InstanceNames []string          `protobuf:"bytes,9,rep,name=instance_names,json=instanceNames,proto3" json:"instance_names,omitempty"`
}

func (x *SyncOperationFilter) Reset() {
	*x = SyncOperationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOperationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOperationFilter) ProtoMessage() {}

func (x *SyncOperationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOperationFilter.ProtoReflect.Descriptor instead.
func (*SyncOperationFilter) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{61}
}

func (x *SyncOperationFilter) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SyncOperationFilter) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *SyncOperationFilter) GetAppName() []string {
	if x != nil {
		return x.AppName
	}
	return nil
}

func (x *SyncOperationFilter) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *SyncOperationFilter) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SyncOperationFilter) GetRepo() []string {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *SyncOperationFilter) GetInstanceId() []string {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *SyncOperationFilter) GetInitiatedBy() []string {
	if x != nil {
		return x.InitiatedBy
	}
	return nil
}

func (x *SyncOperationFilter) GetInstanceNames() []string {
	if x != nil {
		return x.InstanceNames
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{62}
}

func (x *Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SyncOperationStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalStart string             `protobuf:"bytes,1,opt,name=interval_start,json=intervalStart,proto3" json:"interval_start,omitempty"`
	CountMap      map[string]uint32  `protobuf:"bytes,2,rep,name=count_map,json=countMap,proto3" json:"count_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AverageMap    map[string]float32 `protobuf:"bytes,3,rep,name=average_map,json=averageMap,proto3" json:"average_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *SyncOperationStat) Reset() {
	*x = SyncOperationStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOperationStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOperationStat) ProtoMessage() {}

func (x *SyncOperationStat) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOperationStat.ProtoReflect.Descriptor instead.
func (*SyncOperationStat) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{63}
}

func (x *SyncOperationStat) GetIntervalStart() string {
	if x != nil {
		return x.IntervalStart
	}
	return ""
}

func (x *SyncOperationStat) GetCountMap() map[string]uint32 {
	if x != nil {
		return x.CountMap
	}
	return nil
}

func (x *SyncOperationStat) GetAverageMap() map[string]float32 {
	if x != nil {
		return x.AverageMap
	}
	return nil
}

type SyncOperationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InstanceId            string                     `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ApplicationName       string                     `protobuf:"bytes,3,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	StartTime             string                     `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               string                     `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ResultPhase           string                     `protobuf:"bytes,6,opt,name=result_phase,json=resultPhase,proto3" json:"result_phase,omitempty"`
	ResultMessage         string                     `protobuf:"bytes,7,opt,name=result_message,json=resultMessage,proto3" json:"result_message,omitempty"`
	Details               *SyncOperationEventDetails `protobuf:"bytes,8,opt,name=details,proto3" json:"details,omitempty"`
	Count                 uint32                     `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	LastOccurredTimestamp string                     `protobuf:"bytes,10,opt,name=last_occurred_timestamp,json=lastOccurredTimestamp,proto3" json:"last_occurred_timestamp,omitempty"`
	Duration              uint32                     `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *SyncOperationEvent) Reset() {
	*x = SyncOperationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOperationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOperationEvent) ProtoMessage() {}

func (x *SyncOperationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOperationEvent.ProtoReflect.Descriptor instead.
func (*SyncOperationEvent) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{64}
}

func (x *SyncOperationEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncOperationEvent) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SyncOperationEvent) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *SyncOperationEvent) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SyncOperationEvent) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *SyncOperationEvent) GetResultPhase() string {
	if x != nil {
		return x.ResultPhase
	}
	return ""
}

func (x *SyncOperationEvent) GetResultMessage() string {
	if x != nil {
		return x.ResultMessage
	}
	return ""
}

func (x *SyncOperationEvent) GetDetails() *SyncOperationEventDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SyncOperationEvent) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SyncOperationEvent) GetLastOccurredTimestamp() string {
	if x != nil {
		return x.LastOccurredTimestamp
	}
	return ""
}

func (x *SyncOperationEvent) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SyncOperationEventDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels      map[string]string   `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Project     string              `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Repository  string              `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision    string              `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	Prune       bool                `protobuf:"varint,5,opt,name=prune,proto3" json:"prune,omitempty"`
	DryRun      bool                `protobuf:"varint,6,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	SyncOptions []string            `protobuf:"bytes,7,rep,name=sync_options,json=syncOptions,proto3" json:"sync_options,omitempty"`
	InitiatedBy *OperationInitiator `protobuf:"bytes,8,opt,name=initiated_by,json=initiatedBy,proto3" json:"initiated_by,omitempty"`
}

func (x *SyncOperationEventDetails) Reset() {
	*x = SyncOperationEventDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOperationEventDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOperationEventDetails) ProtoMessage() {}

func (x *SyncOperationEventDetails) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOperationEventDetails.ProtoReflect.Descriptor instead.
func (*SyncOperationEventDetails) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{65}
}

func (x *SyncOperationEventDetails) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SyncOperationEventDetails) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SyncOperationEventDetails) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *SyncOperationEventDetails) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *SyncOperationEventDetails) GetPrune() bool {
	if x != nil {
		return x.Prune
	}
	return false
}

func (x *SyncOperationEventDetails) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *SyncOperationEventDetails) GetSyncOptions() []string {
	if x != nil {
		return x.SyncOptions
	}
	return nil
}

func (x *SyncOperationEventDetails) GetInitiatedBy() *OperationInitiator {
	if x != nil {
		return x.InitiatedBy
	}
	return nil
}

type OperationInitiator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Automated bool   `protobuf:"varint,2,opt,name=automated,proto3" json:"automated,omitempty"`
}

func (x *OperationInitiator) Reset() {
	*x = OperationInitiator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationInitiator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationInitiator) ProtoMessage() {}

func (x *OperationInitiator) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationInitiator.ProtoReflect.Descriptor instead.
func (*OperationInitiator) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{66}
}

func (x *OperationInitiator) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OperationInitiator) GetAutomated() bool {
	if x != nil {
		return x.Automated
	}
	return false
}

type GetSyncOperationsStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncOperationStats []*SyncOperationStat `protobuf:"bytes,1,rep,name=sync_operation_stats,json=syncOperationStats,proto3" json:"sync_operation_stats,omitempty"`
}

func (x *GetSyncOperationsStatsResponse) Reset() {
	*x = GetSyncOperationsStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncOperationsStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncOperationsStatsResponse) ProtoMessage() {}

func (x *GetSyncOperationsStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncOperationsStatsResponse.ProtoReflect.Descriptor instead.
func (*GetSyncOperationsStatsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{67}
}

func (x *GetSyncOperationsStatsResponse) GetSyncOperationStats() []*SyncOperationStat {
	if x != nil {
		return x.SyncOperationStats
	}
	return nil
}

type GetSyncOperationsEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncOperationEvents []*SyncOperationEvent `protobuf:"bytes,1,rep,name=sync_operation_events,json=syncOperationEvents,proto3" json:"sync_operation_events,omitempty"`
	Count               int64                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	FieldResult         []string              `protobuf:"bytes,3,rep,name=field_result,json=fieldResult,proto3" json:"field_result,omitempty"`
}

func (x *GetSyncOperationsEventsResponse) Reset() {
	*x = GetSyncOperationsEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncOperationsEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncOperationsEventsResponse) ProtoMessage() {}

func (x *GetSyncOperationsEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncOperationsEventsResponse.ProtoReflect.Descriptor instead.
func (*GetSyncOperationsEventsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{68}
}

func (x *GetSyncOperationsEventsResponse) GetSyncOperationEvents() []*SyncOperationEvent {
	if x != nil {
		return x.SyncOperationEvents
	}
	return nil
}

func (x *GetSyncOperationsEventsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetSyncOperationsEventsResponse) GetFieldResult() []string {
	if x != nil {
		return x.FieldResult
	}
	return nil
}

type ClusterFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameLike             *string           `protobuf:"bytes,1,opt,name=name_like,json=nameLike,proto3,oneof" json:"name_like,omitempty"`
	AgentStatus          []v12.TenantPhase `protobuf:"varint,2,rep,packed,name=agent_status,json=agentStatus,proto3,enum=akuity.types.status.health.v1.TenantPhase" json:"agent_status,omitempty"`
	AgentVersion         []string          `protobuf:"bytes,3,rep,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	ArgocdVersion        []string          `protobuf:"bytes,4,rep,name=argocd_version,json=argocdVersion,proto3" json:"argocd_version,omitempty"`
	Limit                *int64            `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset               *int64            `protobuf:"varint,6,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	ExcludeAgentVersion  *string           `protobuf:"bytes,7,opt,name=exclude_agent_version,json=excludeAgentVersion,proto3,oneof" json:"exclude_agent_version,omitempty"`
	OutdatedManifest     *bool             `protobuf:"varint,8,opt,name=outdated_manifest,json=outdatedManifest,proto3,oneof" json:"outdated_manifest,omitempty"`
	Namespace            []string          `protobuf:"bytes,9,rep,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceScoped      *bool             `protobuf:"varint,10,opt,name=namespace_scoped,json=namespaceScoped,proto3,oneof" json:"namespace_scoped,omitempty"`
	Labels               map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NeedReapply          *bool             `protobuf:"varint,12,opt,name=need_reapply,json=needReapply,proto3,oneof" json:"need_reapply,omitempty"`
	ExcludeDirectCluster *bool             `protobuf:"varint,13,opt,name=exclude_direct_cluster,json=excludeDirectCluster,proto3,oneof" json:"exclude_direct_cluster,omitempty"`
}

func (x *ClusterFilter) Reset() {
	*x = ClusterFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterFilter) ProtoMessage() {}

func (x *ClusterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterFilter.ProtoReflect.Descriptor instead.
func (*ClusterFilter) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{69}
}

func (x *ClusterFilter) GetNameLike() string {
	if x != nil && x.NameLike != nil {
		return *x.NameLike
	}
	return ""
}

func (x *ClusterFilter) GetAgentStatus() []v12.TenantPhase {
	if x != nil {
		return x.AgentStatus
	}
	return nil
}

func (x *ClusterFilter) GetAgentVersion() []string {
	if x != nil {
		return x.AgentVersion
	}
	return nil
}

func (x *ClusterFilter) GetArgocdVersion() []string {
	if x != nil {
		return x.ArgocdVersion
	}
	return nil
}

func (x *ClusterFilter) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ClusterFilter) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ClusterFilter) GetExcludeAgentVersion() string {
	if x != nil && x.ExcludeAgentVersion != nil {
		return *x.ExcludeAgentVersion
	}
	return ""
}

func (x *ClusterFilter) GetOutdatedManifest() bool {
	if x != nil && x.OutdatedManifest != nil {
		return *x.OutdatedManifest
	}
	return false
}

func (x *ClusterFilter) GetNamespace() []string {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ClusterFilter) GetNamespaceScoped() bool {
	if x != nil && x.NamespaceScoped != nil {
		return *x.NamespaceScoped
	}
	return false
}

func (x *ClusterFilter) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ClusterFilter) GetNeedReapply() bool {
	if x != nil && x.NeedReapply != nil {
		return *x.NeedReapply
	}
	return false
}

func (x *ClusterFilter) GetExcludeDirectCluster() bool {
	if x != nil && x.ExcludeDirectCluster != nil {
		return *x.ExcludeDirectCluster
	}
	return false
}

type ListInstanceClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string         `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string         `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Filter         *ClusterFilter `protobuf:"bytes,3,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	WorkspaceId    string         `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *ListInstanceClustersRequest) Reset() {
	*x = ListInstanceClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceClustersRequest) ProtoMessage() {}

func (x *ListInstanceClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceClustersRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceClustersRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{70}
}

func (x *ListInstanceClustersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListInstanceClustersRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListInstanceClustersRequest) GetFilter() *ClusterFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListInstanceClustersRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type WatchInstanceClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string         `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string         `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ClusterId      *string        `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	MinClusterName *string        `protobuf:"bytes,4,opt,name=min_cluster_name,json=minClusterName,proto3,oneof" json:"min_cluster_name,omitempty"`
	MaxClusterName *string        `protobuf:"bytes,5,opt,name=max_cluster_name,json=maxClusterName,proto3,oneof" json:"max_cluster_name,omitempty"`
	Filter         *ClusterFilter `protobuf:"bytes,6,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	WorkspaceId    string         `protobuf:"bytes,7,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *WatchInstanceClustersRequest) Reset() {
	*x = WatchInstanceClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstanceClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstanceClustersRequest) ProtoMessage() {}

func (x *WatchInstanceClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstanceClustersRequest.ProtoReflect.Descriptor instead.
func (*WatchInstanceClustersRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{71}
}

func (x *WatchInstanceClustersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetClusterId() string {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetMinClusterName() string {
	if x != nil && x.MinClusterName != nil {
		return *x.MinClusterName
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetMaxClusterName() string {
	if x != nil && x.MaxClusterName != nil {
		return *x.MaxClusterName
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetFilter() *ClusterFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *WatchInstanceClustersRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type WatchInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     *string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3,oneof" json:"instance_id,omitempty"`
	WorkspaceId    string  `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *WatchInstancesRequest) Reset() {
	*x = WatchInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstancesRequest) ProtoMessage() {}

func (x *WatchInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstancesRequest.ProtoReflect.Descriptor instead.
func (*WatchInstancesRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{72}
}

func (x *WatchInstancesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *WatchInstancesRequest) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *WatchInstancesRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type WatchInstanceAddonsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string       `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string       `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkspaceId    string       `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	AddonId        *string      `protobuf:"bytes,4,opt,name=addon_id,json=addonId,proto3,oneof" json:"addon_id,omitempty"`
	Filter         *AddonFilter `protobuf:"bytes,5,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *WatchInstanceAddonsRequest) Reset() {
	*x = WatchInstanceAddonsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstanceAddonsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstanceAddonsRequest) ProtoMessage() {}

func (x *WatchInstanceAddonsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstanceAddonsRequest.ProtoReflect.Descriptor instead.
func (*WatchInstanceAddonsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{73}
}

func (x *WatchInstanceAddonsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *WatchInstanceAddonsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *WatchInstanceAddonsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *WatchInstanceAddonsRequest) GetAddonId() string {
	if x != nil && x.AddonId != nil {
		return *x.AddonId
	}
	return ""
}

func (x *WatchInstanceAddonsRequest) GetFilter() *AddonFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type WatchInstanceAddonReposRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string  `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkspaceId    string  `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	AddonRepoId    *string `protobuf:"bytes,4,opt,name=addon_repo_id,json=addonRepoId,proto3,oneof" json:"addon_repo_id,omitempty"`
}

func (x *WatchInstanceAddonReposRequest) Reset() {
	*x = WatchInstanceAddonReposRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstanceAddonReposRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstanceAddonReposRequest) ProtoMessage() {}

func (x *WatchInstanceAddonReposRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstanceAddonReposRequest.ProtoReflect.Descriptor instead.
func (*WatchInstanceAddonReposRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{74}
}

func (x *WatchInstanceAddonReposRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *WatchInstanceAddonReposRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *WatchInstanceAddonReposRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *WatchInstanceAddonReposRequest) GetAddonRepoId() string {
	if x != nil && x.AddonRepoId != nil {
		return *x.AddonRepoId
	}
	return ""
}

type WatchInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *Instance     `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Type v13.EventType `protobuf:"varint,2,opt,name=type,proto3,enum=akuity.types.events.v1.EventType" json:"type,omitempty"`
}

func (x *WatchInstancesResponse) Reset() {
	*x = WatchInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstancesResponse) ProtoMessage() {}

func (x *WatchInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstancesResponse.ProtoReflect.Descriptor instead.
func (*WatchInstancesResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{75}
}

func (x *WatchInstancesResponse) GetItem() *Instance {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *WatchInstancesResponse) GetType() v13.EventType {
	if x != nil {
		return x.Type
	}
	return v13.EventType(0)
}

type WatchInstanceAddonsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *Addon        `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Type v13.EventType `protobuf:"varint,2,opt,name=type,proto3,enum=akuity.types.events.v1.EventType" json:"type,omitempty"`
}

func (x *WatchInstanceAddonsResponse) Reset() {
	*x = WatchInstanceAddonsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstanceAddonsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstanceAddonsResponse) ProtoMessage() {}

func (x *WatchInstanceAddonsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstanceAddonsResponse.ProtoReflect.Descriptor instead.
func (*WatchInstanceAddonsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{76}
}

func (x *WatchInstanceAddonsResponse) GetItem() *Addon {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *WatchInstanceAddonsResponse) GetType() v13.EventType {
	if x != nil {
		return x.Type
	}
	return v13.EventType(0)
}

type WatchInstanceAddonReposResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *AddonRepo    `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Type v13.EventType `protobuf:"varint,2,opt,name=type,proto3,enum=akuity.types.events.v1.EventType" json:"type,omitempty"`
}

func (x *WatchInstanceAddonReposResponse) Reset() {
	*x = WatchInstanceAddonReposResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstanceAddonReposResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstanceAddonReposResponse) ProtoMessage() {}

func (x *WatchInstanceAddonReposResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstanceAddonReposResponse.ProtoReflect.Descriptor instead.
func (*WatchInstanceAddonReposResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{77}
}

func (x *WatchInstanceAddonReposResponse) GetItem() *AddonRepo {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *WatchInstanceAddonReposResponse) GetType() v13.EventType {
	if x != nil {
		return x.Type
	}
	return v13.EventType(0)
}

type WatchInstanceClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *Cluster      `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Type v13.EventType `protobuf:"varint,2,opt,name=type,proto3,enum=akuity.types.events.v1.EventType" json:"type,omitempty"`
}

func (x *WatchInstanceClustersResponse) Reset() {
	*x = WatchInstanceClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstanceClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstanceClustersResponse) ProtoMessage() {}

func (x *WatchInstanceClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstanceClustersResponse.ProtoReflect.Descriptor instead.
func (*WatchInstanceClustersResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{78}
}

func (x *WatchInstanceClustersResponse) GetItem() *Cluster {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *WatchInstanceClustersResponse) GetType() v13.EventType {
	if x != nil {
		return x.Type
	}
	return v13.EventType(0)
}

type ListInstanceClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters   []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	TotalCount int64      `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListInstanceClustersResponse) Reset() {
	*x = ListInstanceClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceClustersResponse) ProtoMessage() {}

func (x *ListInstanceClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceClustersResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceClustersResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{79}
}

func (x *ListInstanceClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListInstanceClustersResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CreateInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description    string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"` // Use data.namespace instead
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	NamespaceScoped bool         `protobuf:"varint,6,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"` // Use data.namespace_scoped instead
	Data            *ClusterData `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Upsert          bool         `protobuf:"varint,8,opt,name=upsert,proto3" json:"upsert,omitempty"`
	Force           bool         `protobuf:"varint,9,opt,name=force,proto3" json:"force,omitempty"`
	WorkspaceId     string       `protobuf:"bytes,10,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *CreateInstanceClusterRequest) Reset() {
	*x = CreateInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceClusterRequest) ProtoMessage() {}

func (x *CreateInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{80}
}

func (x *CreateInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateInstanceClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInstanceClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *CreateInstanceClusterRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *CreateInstanceClusterRequest) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *CreateInstanceClusterRequest) GetData() *ClusterData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateInstanceClusterRequest) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

func (x *CreateInstanceClusterRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *CreateInstanceClusterRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type CreateInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *CreateInstanceClusterResponse) Reset() {
	*x = CreateInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceClusterResponse) ProtoMessage() {}

func (x *CreateInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{81}
}

func (x *CreateInstanceClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type GetClusterAPIServerCADataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ClusterName    string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Server         string `protobuf:"bytes,4,opt,name=server,proto3" json:"server,omitempty"`
	WorkspaceId    string `protobuf:"bytes,5,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetClusterAPIServerCADataRequest) Reset() {
	*x = GetClusterAPIServerCADataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterAPIServerCADataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterAPIServerCADataRequest) ProtoMessage() {}

func (x *GetClusterAPIServerCADataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterAPIServerCADataRequest.ProtoReflect.Descriptor instead.
func (*GetClusterAPIServerCADataRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{82}
}

func (x *GetClusterAPIServerCADataRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetClusterAPIServerCADataRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetClusterAPIServerCADataRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetClusterAPIServerCADataRequest) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *GetClusterAPIServerCADataRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetClusterAPIServerCADataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClusterAPIServerCADataResponse) Reset() {
	*x = GetClusterAPIServerCADataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterAPIServerCADataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterAPIServerCADataResponse) ProtoMessage() {}

func (x *GetClusterAPIServerCADataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterAPIServerCADataResponse.ProtoReflect.Descriptor instead.
func (*GetClusterAPIServerCADataResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{83}
}

func (x *GetClusterAPIServerCADataResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string  `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	IdType         v1.Type `protobuf:"varint,3,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id             string  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string  `protobuf:"bytes,5,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceClusterRequest) Reset() {
	*x = GetInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterRequest) ProtoMessage() {}

func (x *GetInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{84}
}

func (x *GetInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInstanceClusterRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *GetInstanceClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceClusterRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *GetInstanceClusterResponse) Reset() {
	*x = GetInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterResponse) ProtoMessage() {}

func (x *GetInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{85}
}

func (x *GetInstanceClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type GetInstanceClusterInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasApplications bool `protobuf:"varint,1,opt,name=has_applications,json=hasApplications,proto3" json:"has_applications,omitempty"`
}

func (x *GetInstanceClusterInfoResponse) Reset() {
	*x = GetInstanceClusterInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterInfoResponse) ProtoMessage() {}

func (x *GetInstanceClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{86}
}

func (x *GetInstanceClusterInfoResponse) GetHasApplications() bool {
	if x != nil {
		return x.HasApplications
	}
	return false
}

type GetInstanceClusterManifestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId      string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId          string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id                  string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	OfflineInstallation bool   `protobuf:"varint,4,opt,name=offline_installation,json=offlineInstallation,proto3" json:"offline_installation,omitempty"`
	SkipNamespace       *bool  `protobuf:"varint,5,opt,name=skip_namespace,json=skipNamespace,proto3,oneof" json:"skip_namespace,omitempty"`
	WorkspaceId         string `protobuf:"bytes,6,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceClusterManifestsRequest) Reset() {
	*x = GetInstanceClusterManifestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterManifestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterManifestsRequest) ProtoMessage() {}

func (x *GetInstanceClusterManifestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterManifestsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterManifestsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{87}
}

func (x *GetInstanceClusterManifestsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceClusterManifestsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInstanceClusterManifestsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceClusterManifestsRequest) GetOfflineInstallation() bool {
	if x != nil {
		return x.OfflineInstallation
	}
	return false
}

func (x *GetInstanceClusterManifestsRequest) GetSkipNamespace() bool {
	if x != nil && x.SkipNamespace != nil {
		return *x.SkipNamespace
	}
	return false
}

func (x *GetInstanceClusterManifestsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string       `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string       `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Description    string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Data           *ClusterData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Force          bool         `protobuf:"varint,6,opt,name=force,proto3" json:"force,omitempty"`
	WorkspaceId    string       `protobuf:"bytes,7,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpdateInstanceClusterRequest) Reset() {
	*x = UpdateInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClusterRequest) ProtoMessage() {}

func (x *UpdateInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{88}
}

func (x *UpdateInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateInstanceClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateInstanceClusterRequest) GetData() *ClusterData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateInstanceClusterRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *UpdateInstanceClusterRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *UpdateInstanceClusterResponse) Reset() {
	*x = UpdateInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClusterResponse) ProtoMessage() {}

func (x *UpdateInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateInstanceClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type UpdateInstanceClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId                  string                `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id                              string                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ClusterCustomizations           *ClusterCustomization `protobuf:"bytes,3,opt,name=cluster_customizations,json=clusterCustomizations,proto3,oneof" json:"cluster_customizations,omitempty"`
	WorkspaceId                     string                `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	MultiClusterK8SDashboardEnabled *bool                 `protobuf:"varint,5,opt,name=multi_cluster_k8s_dashboard_enabled,json=multiClusterK8sDashboardEnabled,proto3,oneof" json:"multi_cluster_k8s_dashboard_enabled,omitempty"`
}

func (x *UpdateInstanceClustersRequest) Reset() {
	*x = UpdateInstanceClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClustersRequest) ProtoMessage() {}

func (x *UpdateInstanceClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClustersRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClustersRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{90}
}

func (x *UpdateInstanceClustersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceClustersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceClustersRequest) GetClusterCustomizations() *ClusterCustomization {
	if x != nil {
		return x.ClusterCustomizations
	}
	return nil
}

func (x *UpdateInstanceClustersRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *UpdateInstanceClustersRequest) GetMultiClusterK8SDashboardEnabled() bool {
	if x != nil && x.MultiClusterK8SDashboardEnabled != nil {
		return *x.MultiClusterK8SDashboardEnabled
	}
	return false
}

type UpdateInstanceClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkippedClusters []string `protobuf:"bytes,1,rep,name=skipped_clusters,json=skippedClusters,proto3" json:"skipped_clusters,omitempty"`
}

func (x *UpdateInstanceClustersResponse) Reset() {
	*x = UpdateInstanceClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClustersResponse) ProtoMessage() {}

func (x *UpdateInstanceClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClustersResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClustersResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{91}
}

func (x *UpdateInstanceClustersResponse) GetSkippedClusters() []string {
	if x != nil {
		return x.SkippedClusters
	}
	return nil
}

type UpdateInstanceClustersAgentVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string   `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ClusterNames   []string `protobuf:"bytes,3,rep,name=cluster_names,json=clusterNames,proto3" json:"cluster_names,omitempty"`
	NewVersion     string   `protobuf:"bytes,4,opt,name=new_version,json=newVersion,proto3" json:"new_version,omitempty"`
	AllClusters    *bool    `protobuf:"varint,5,opt,name=all_clusters,json=allClusters,proto3,oneof" json:"all_clusters,omitempty"`
	WorkspaceId    string   `protobuf:"bytes,6,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpdateInstanceClustersAgentVersionRequest) Reset() {
	*x = UpdateInstanceClustersAgentVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClustersAgentVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClustersAgentVersionRequest) ProtoMessage() {}

func (x *UpdateInstanceClustersAgentVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClustersAgentVersionRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClustersAgentVersionRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{92}
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetNewVersion() string {
	if x != nil {
		return x.NewVersion
	}
	return ""
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetAllClusters() bool {
	if x != nil && x.AllClusters != nil {
		return *x.AllClusters
	}
	return false
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type RotateInstanceClusterCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string   `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ClusterNames   []string `protobuf:"bytes,3,rep,name=cluster_names,json=clusterNames,proto3" json:"cluster_names,omitempty"`
	AllClusters    *bool    `protobuf:"varint,4,opt,name=all_clusters,json=allClusters,proto3,oneof" json:"all_clusters,omitempty"`
	WorkspaceId    string   `protobuf:"bytes,5,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *RotateInstanceClusterCredentialsRequest) Reset() {
	*x = RotateInstanceClusterCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateInstanceClusterCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateInstanceClusterCredentialsRequest) ProtoMessage() {}

func (x *RotateInstanceClusterCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateInstanceClusterCredentialsRequest.ProtoReflect.Descriptor instead.
func (*RotateInstanceClusterCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{93}
}

func (x *RotateInstanceClusterCredentialsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *RotateInstanceClusterCredentialsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RotateInstanceClusterCredentialsRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *RotateInstanceClusterCredentialsRequest) GetAllClusters() bool {
	if x != nil && x.AllClusters != nil {
		return *x.AllClusters
	}
	return false
}

func (x *RotateInstanceClusterCredentialsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type RotateInstanceClusterCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkippedClusters []string `protobuf:"bytes,1,rep,name=skipped_clusters,json=skippedClusters,proto3" json:"skipped_clusters,omitempty"`
}

func (x *RotateInstanceClusterCredentialsResponse) Reset() {
	*x = RotateInstanceClusterCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateInstanceClusterCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateInstanceClusterCredentialsResponse) ProtoMessage() {}

func (x *RotateInstanceClusterCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateInstanceClusterCredentialsResponse.ProtoReflect.Descriptor instead.
func (*RotateInstanceClusterCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{94}
}

func (x *RotateInstanceClusterCredentialsResponse) GetSkippedClusters() []string {
	if x != nil {
		return x.SkippedClusters
	}
	return nil
}

type DeleteInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *DeleteInstanceClusterRequest) Reset() {
	*x = DeleteInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceClusterRequest) ProtoMessage() {}

func (x *DeleteInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{95}
}

func (x *DeleteInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeleteInstanceClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteInstanceClusterRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type DeleteInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInstanceClusterResponse) Reset() {
	*x = DeleteInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceClusterResponse) ProtoMessage() {}

func (x *DeleteInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{96}
}

type ApplicationsHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthyCount     uint32 `protobuf:"varint,1,opt,name=healthy_count,json=healthyCount,proto3" json:"healthy_count,omitempty"`
	DegradedCount    uint32 `protobuf:"varint,2,opt,name=degraded_count,json=degradedCount,proto3" json:"degraded_count,omitempty"`
	ProgressingCount uint32 `protobuf:"varint,3,opt,name=progressing_count,json=progressingCount,proto3" json:"progressing_count,omitempty"`
	UnknownCount     uint32 `protobuf:"varint,4,opt,name=unknown_count,json=unknownCount,proto3" json:"unknown_count,omitempty"`
	SuspendedCount   uint32 `protobuf:"varint,5,opt,name=suspended_count,json=suspendedCount,proto3" json:"suspended_count,omitempty"`
	MissingCount     uint32 `protobuf:"varint,6,opt,name=missing_count,json=missingCount,proto3" json:"missing_count,omitempty"`
}

func (x *ApplicationsHealth) Reset() {
	*x = ApplicationsHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsHealth) ProtoMessage() {}

func (x *ApplicationsHealth) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsHealth.ProtoReflect.Descriptor instead.
func (*ApplicationsHealth) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{97}
}

func (x *ApplicationsHealth) GetHealthyCount() uint32 {
	if x != nil {
		return x.HealthyCount
	}
	return 0
}

func (x *ApplicationsHealth) GetDegradedCount() uint32 {
	if x != nil {
		return x.DegradedCount
	}
	return 0
}

func (x *ApplicationsHealth) GetProgressingCount() uint32 {
	if x != nil {
		return x.ProgressingCount
	}
	return 0
}

func (x *ApplicationsHealth) GetUnknownCount() uint32 {
	if x != nil {
		return x.UnknownCount
	}
	return 0
}

func (x *ApplicationsHealth) GetSuspendedCount() uint32 {
	if x != nil {
		return x.SuspendedCount
	}
	return 0
}

func (x *ApplicationsHealth) GetMissingCount() uint32 {
	if x != nil {
		return x.MissingCount
	}
	return 0
}

type ApplicationsSyncStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncedCount    uint32 `protobuf:"varint,1,opt,name=synced_count,json=syncedCount,proto3" json:"synced_count,omitempty"`
	OutOfSyncCount uint32 `protobuf:"varint,2,opt,name=out_of_sync_count,json=outOfSyncCount,proto3" json:"out_of_sync_count,omitempty"`
	UnknownCount   uint32 `protobuf:"varint,3,opt,name=unknown_count,json=unknownCount,proto3" json:"unknown_count,omitempty"`
}

func (x *ApplicationsSyncStatus) Reset() {
	*x = ApplicationsSyncStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsSyncStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsSyncStatus) ProtoMessage() {}

func (x *ApplicationsSyncStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsSyncStatus.ProtoReflect.Descriptor instead.
func (*ApplicationsSyncStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{98}
}

func (x *ApplicationsSyncStatus) GetSyncedCount() uint32 {
	if x != nil {
		return x.SyncedCount
	}
	return 0
}

func (x *ApplicationsSyncStatus) GetOutOfSyncCount() uint32 {
	if x != nil {
		return x.OutOfSyncCount
	}
	return 0
}

func (x *ApplicationsSyncStatus) GetUnknownCount() uint32 {
	if x != nil {
		return x.UnknownCount
	}
	return 0
}

type ApplicationsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationCount    uint32                  `protobuf:"varint,1,opt,name=application_count,json=applicationCount,proto3" json:"application_count,omitempty"`
	ResourcesCount      uint32                  `protobuf:"varint,2,opt,name=resources_count,json=resourcesCount,proto3" json:"resources_count,omitempty"`
	SyncInProgressCount uint32                  `protobuf:"varint,3,opt,name=sync_in_progress_count,json=syncInProgressCount,proto3" json:"sync_in_progress_count,omitempty"`
	WarningCount        uint32                  `protobuf:"varint,4,opt,name=warning_count,json=warningCount,proto3" json:"warning_count,omitempty"`
	ErrorCount          uint32                  `protobuf:"varint,5,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	Health              *ApplicationsHealth     `protobuf:"bytes,6,opt,name=health,proto3" json:"health,omitempty"`
	SyncStatus          *ApplicationsSyncStatus `protobuf:"bytes,7,opt,name=sync_status,json=syncStatus,proto3" json:"sync_status,omitempty"`
	AppOfAppCount       uint32                  `protobuf:"varint,8,opt,name=app_of_app_count,json=appOfAppCount,proto3" json:"app_of_app_count,omitempty"`
}

func (x *ApplicationsStatus) Reset() {
	*x = ApplicationsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsStatus) ProtoMessage() {}

func (x *ApplicationsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsStatus.ProtoReflect.Descriptor instead.
func (*ApplicationsStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{99}
}

func (x *ApplicationsStatus) GetApplicationCount() uint32 {
	if x != nil {
		return x.ApplicationCount
	}
	return 0
}

func (x *ApplicationsStatus) GetResourcesCount() uint32 {
	if x != nil {
		return x.ResourcesCount
	}
	return 0
}

func (x *ApplicationsStatus) GetSyncInProgressCount() uint32 {
	if x != nil {
		return x.SyncInProgressCount
	}
	return 0
}

func (x *ApplicationsStatus) GetWarningCount() uint32 {
	if x != nil {
		return x.WarningCount
	}
	return 0
}

func (x *ApplicationsStatus) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *ApplicationsStatus) GetHealth() *ApplicationsHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *ApplicationsStatus) GetSyncStatus() *ApplicationsSyncStatus {
	if x != nil {
		return x.SyncStatus
	}
	return nil
}

func (x *ApplicationsStatus) GetAppOfAppCount() uint32 {
	if x != nil {
		return x.AppOfAppCount
	}
	return 0
}

type ArgoCDConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminEnabled         *bool                        `protobuf:"varint,1,opt,name=admin_enabled,json=adminEnabled,proto3,oneof" json:"admin_enabled,omitempty"`
	StatusBadge          *ArgoCDStatusBadgeConfig     `protobuf:"bytes,2,opt,name=status_badge,json=statusBadge,proto3" json:"status_badge,omitempty"`
	GoogleAnalytics      *ArgoCDGoogleAnalyticsConfig `protobuf:"bytes,3,opt,name=google_analytics,json=googleAnalytics,proto3" json:"google_analytics,omitempty"`
	AllowAnonymousUser   *bool                        `protobuf:"varint,4,opt,name=allow_anonymous_user,json=allowAnonymousUser,proto3,oneof" json:"allow_anonymous_user,omitempty"`
	Banner               *ArgoCDBannerConfig          `protobuf:"bytes,5,opt,name=banner,proto3" json:"banner,omitempty"`
	Chat                 *ArgoCDAlertConfig           `protobuf:"bytes,6,opt,name=chat,proto3" json:"chat,omitempty"`
	InstanceLabelKey     string                       `protobuf:"bytes,7,opt,name=instance_label_key,json=instanceLabelKey,proto3" json:"instance_label_key,omitempty"`
	KustomizeSettings    *ArgoCDKustomizeSettings     `protobuf:"bytes,8,opt,name=kustomize_settings,json=kustomizeSettings,proto3" json:"kustomize_settings,omitempty"`
	HelmSettings         *ArgoCDHelmSettings          `protobuf:"bytes,9,opt,name=helm_settings,json=helmSettings,proto3" json:"helm_settings,omitempty"`
	ResourceSettings     *ArgoCDResourceSettings      `protobuf:"bytes,10,opt,name=resource_settings,json=resourceSettings,proto3" json:"resource_settings,omitempty"`
	UsersSessionDuration string                       `protobuf:"bytes,11,opt,name=users_session_duration,json=usersSessionDuration,proto3" json:"users_session_duration,omitempty"`
	OidcConfig           string                       `protobuf:"bytes,12,opt,name=oidc_config,json=oidcConfig,proto3" json:"oidc_config,omitempty"`
	DexConfig            string                       `protobuf:"bytes,13,opt,name=dex_config,json=dexConfig,proto3" json:"dex_config,omitempty"`
	WebTerminal          *ArgoCDWebTerminalConfig     `protobuf:"bytes,14,opt,name=web_terminal,json=webTerminal,proto3" json:"web_terminal,omitempty"`
	DeepLinks            *ArgoCDDeepLinks             `protobuf:"bytes,15,opt,name=deep_links,json=deepLinks,proto3" json:"deep_links,omitempty"`
	LogsRbacEnabled      *bool                        `protobuf:"varint,16,opt,name=logs_rbac_enabled,json=logsRbacEnabled,proto3,oneof" json:"logs_rbac_enabled,omitempty"`
}

func (x *ArgoCDConfigMap) Reset() {
	*x = ArgoCDConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDConfigMap) ProtoMessage() {}

func (x *ArgoCDConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDConfigMap.ProtoReflect.Descriptor instead.
func (*ArgoCDConfigMap) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{100}
}

func (x *ArgoCDConfigMap) GetAdminEnabled() bool {
	if x != nil && x.AdminEnabled != nil {
		return *x.AdminEnabled
	}
	return false
}

func (x *ArgoCDConfigMap) GetStatusBadge() *ArgoCDStatusBadgeConfig {
	if x != nil {
		return x.StatusBadge
	}
	return nil
}

func (x *ArgoCDConfigMap) GetGoogleAnalytics() *ArgoCDGoogleAnalyticsConfig {
	if x != nil {
		return x.GoogleAnalytics
	}
	return nil
}

func (x *ArgoCDConfigMap) GetAllowAnonymousUser() bool {
	if x != nil && x.AllowAnonymousUser != nil {
		return *x.AllowAnonymousUser
	}
	return false
}

func (x *ArgoCDConfigMap) GetBanner() *ArgoCDBannerConfig {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *ArgoCDConfigMap) GetChat() *ArgoCDAlertConfig {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ArgoCDConfigMap) GetInstanceLabelKey() string {
	if x != nil {
		return x.InstanceLabelKey
	}
	return ""
}

func (x *ArgoCDConfigMap) GetKustomizeSettings() *ArgoCDKustomizeSettings {
	if x != nil {
		return x.KustomizeSettings
	}
	return nil
}

func (x *ArgoCDConfigMap) GetHelmSettings() *ArgoCDHelmSettings {
	if x != nil {
		return x.HelmSettings
	}
	return nil
}

func (x *ArgoCDConfigMap) GetResourceSettings() *ArgoCDResourceSettings {
	if x != nil {
		return x.ResourceSettings
	}
	return nil
}

func (x *ArgoCDConfigMap) GetUsersSessionDuration() string {
	if x != nil {
		return x.UsersSessionDuration
	}
	return ""
}

func (x *ArgoCDConfigMap) GetOidcConfig() string {
	if x != nil {
		return x.OidcConfig
	}
	return ""
}

func (x *ArgoCDConfigMap) GetDexConfig() string {
	if x != nil {
		return x.DexConfig
	}
	return ""
}

func (x *ArgoCDConfigMap) GetWebTerminal() *ArgoCDWebTerminalConfig {
	if x != nil {
		return x.WebTerminal
	}
	return nil
}

func (x *ArgoCDConfigMap) GetDeepLinks() *ArgoCDDeepLinks {
	if x != nil {
		return x.DeepLinks
	}
	return nil
}

func (x *ArgoCDConfigMap) GetLogsRbacEnabled() bool {
	if x != nil && x.LogsRbacEnabled != nil {
		return *x.LogsRbacEnabled
	}
	return false
}

type DeepLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url         string  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IconClass   *string `protobuf:"bytes,4,opt,name=icon_class,json=iconClass,proto3,oneof" json:"icon_class,omitempty"`
	If          *string `protobuf:"bytes,5,opt,name=if,proto3,oneof" json:"if,omitempty"`
}

func (x *DeepLink) Reset() {
	*x = DeepLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLink) ProtoMessage() {}

func (x *DeepLink) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLink.ProtoReflect.Descriptor instead.
func (*DeepLink) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{101}
}

func (x *DeepLink) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DeepLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DeepLink) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DeepLink) GetIconClass() string {
	if x != nil && x.IconClass != nil {
		return *x.IconClass
	}
	return ""
}

func (x *DeepLink) GetIf() string {
	if x != nil && x.If != nil {
		return *x.If
	}
	return ""
}

type ArgoCDDeepLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectLinks     []*DeepLink `protobuf:"bytes,1,rep,name=project_links,json=projectLinks,proto3" json:"project_links,omitempty"`
	ApplicationLinks []*DeepLink `protobuf:"bytes,2,rep,name=application_links,json=applicationLinks,proto3" json:"application_links,omitempty"`
	ResourceLinks    []*DeepLink `protobuf:"bytes,3,rep,name=resource_links,json=resourceLinks,proto3" json:"resource_links,omitempty"`
}

func (x *ArgoCDDeepLinks) Reset() {
	*x = ArgoCDDeepLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDDeepLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDDeepLinks) ProtoMessage() {}

func (x *ArgoCDDeepLinks) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDDeepLinks.ProtoReflect.Descriptor instead.
func (*ArgoCDDeepLinks) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{102}
}

func (x *ArgoCDDeepLinks) GetProjectLinks() []*DeepLink {
	if x != nil {
		return x.ProjectLinks
	}
	return nil
}

func (x *ArgoCDDeepLinks) GetApplicationLinks() []*DeepLink {
	if x != nil {
		return x.ApplicationLinks
	}
	return nil
}

func (x *ArgoCDDeepLinks) GetResourceLinks() []*DeepLink {
	if x != nil {
		return x.ResourceLinks
	}
	return nil
}

type ArgoCDAlertConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ArgoCDAlertConfig) Reset() {
	*x = ArgoCDAlertConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDAlertConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDAlertConfig) ProtoMessage() {}

func (x *ArgoCDAlertConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDAlertConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDAlertConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{103}
}

func (x *ArgoCDAlertConfig) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ArgoCDAlertConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ArgoCDBannerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Permanent *bool  `protobuf:"varint,3,opt,name=permanent,proto3,oneof" json:"permanent,omitempty"`
}

func (x *ArgoCDBannerConfig) Reset() {
	*x = ArgoCDBannerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDBannerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDBannerConfig) ProtoMessage() {}

func (x *ArgoCDBannerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDBannerConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDBannerConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{104}
}

func (x *ArgoCDBannerConfig) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ArgoCDBannerConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ArgoCDBannerConfig) GetPermanent() bool {
	if x != nil && x.Permanent != nil {
		return *x.Permanent
	}
	return false
}

type ArgoCDExtensionInstallEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ArgoCDExtensionInstallEntry) Reset() {
	*x = ArgoCDExtensionInstallEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDExtensionInstallEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDExtensionInstallEntry) ProtoMessage() {}

func (x *ArgoCDExtensionInstallEntry) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDExtensionInstallEntry.ProtoReflect.Descriptor instead.
func (*ArgoCDExtensionInstallEntry) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{105}
}

func (x *ArgoCDExtensionInstallEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArgoCDExtensionInstallEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ArgoCDGoogleAnalyticsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId     string `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	AnonymizeUsers *bool  `protobuf:"varint,2,opt,name=anonymize_users,json=anonymizeUsers,proto3,oneof" json:"anonymize_users,omitempty"`
}

func (x *ArgoCDGoogleAnalyticsConfig) Reset() {
	*x = ArgoCDGoogleAnalyticsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDGoogleAnalyticsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDGoogleAnalyticsConfig) ProtoMessage() {}

func (x *ArgoCDGoogleAnalyticsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDGoogleAnalyticsConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDGoogleAnalyticsConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{106}
}

func (x *ArgoCDGoogleAnalyticsConfig) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *ArgoCDGoogleAnalyticsConfig) GetAnonymizeUsers() bool {
	if x != nil && x.AnonymizeUsers != nil {
		return *x.AnonymizeUsers
	}
	return false
}

type ArgoCDHelmSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          *bool  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ValueFileSchemas string `protobuf:"bytes,2,opt,name=value_file_schemas,json=valueFileSchemas,proto3" json:"value_file_schemas,omitempty"`
}

func (x *ArgoCDHelmSettings) Reset() {
	*x = ArgoCDHelmSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDHelmSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDHelmSettings) ProtoMessage() {}

func (x *ArgoCDHelmSettings) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDHelmSettings.ProtoReflect.Descriptor instead.
func (*ArgoCDHelmSettings) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{107}
}

func (x *ArgoCDHelmSettings) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ArgoCDHelmSettings) GetValueFileSchemas() string {
	if x != nil {
		return x.ValueFileSchemas
	}
	return ""
}

type ArgoCDKustomizeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      *bool  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	BuildOptions string `protobuf:"bytes,2,opt,name=build_options,json=buildOptions,proto3" json:"build_options,omitempty"`
}

func (x *ArgoCDKustomizeSettings) Reset() {
	*x = ArgoCDKustomizeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDKustomizeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDKustomizeSettings) ProtoMessage() {}

func (x *ArgoCDKustomizeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDKustomizeSettings.ProtoReflect.Descriptor instead.
func (*ArgoCDKustomizeSettings) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{108}
}

func (x *ArgoCDKustomizeSettings) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ArgoCDKustomizeSettings) GetBuildOptions() string {
	if x != nil {
		return x.BuildOptions
	}
	return ""
}

type ArgoCDStatusBadgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ArgoCDStatusBadgeConfig) Reset() {
	*x = ArgoCDStatusBadgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDStatusBadgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDStatusBadgeConfig) ProtoMessage() {}

func (x *ArgoCDStatusBadgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDStatusBadgeConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDStatusBadgeConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{109}
}

func (x *ArgoCDStatusBadgeConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ArgoCDStatusBadgeConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ArgoCDRBACConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultPolicy   string           `protobuf:"bytes,1,opt,name=default_policy,json=defaultPolicy,proto3" json:"default_policy,omitempty"`
	PolicyCsv       string           `protobuf:"bytes,2,opt,name=policy_csv,json=policyCsv,proto3" json:"policy_csv,omitempty"`
	Scopes          []string         `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	OverlayPolicies []*OverlayPolicy `protobuf:"bytes,4,rep,name=overlay_policies,json=overlayPolicies,proto3" json:"overlay_policies,omitempty"`
}

func (x *ArgoCDRBACConfigMap) Reset() {
	*x = ArgoCDRBACConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDRBACConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDRBACConfigMap) ProtoMessage() {}

func (x *ArgoCDRBACConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDRBACConfigMap.ProtoReflect.Descriptor instead.
func (*ArgoCDRBACConfigMap) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{110}
}

func (x *ArgoCDRBACConfigMap) GetDefaultPolicy() string {
	if x != nil {
		return x.DefaultPolicy
	}
	return ""
}

func (x *ArgoCDRBACConfigMap) GetPolicyCsv() string {
	if x != nil {
		return x.PolicyCsv
	}
	return ""
}

func (x *ArgoCDRBACConfigMap) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ArgoCDRBACConfigMap) GetOverlayPolicies() []*OverlayPolicy {
	if x != nil {
		return x.OverlayPolicies
	}
	return nil
}

type OverlayPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Policy string `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *OverlayPolicy) Reset() {
	*x = OverlayPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayPolicy) ProtoMessage() {}

func (x *OverlayPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayPolicy.ProtoReflect.Descriptor instead.
func (*OverlayPolicy) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{111}
}

func (x *OverlayPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverlayPolicy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

type ArgoCDResourceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inclusions     string `protobuf:"bytes,1,opt,name=inclusions,proto3" json:"inclusions,omitempty"`
	Exclusions     string `protobuf:"bytes,2,opt,name=exclusions,proto3" json:"exclusions,omitempty"`
	CompareOptions string `protobuf:"bytes,3,opt,name=compare_options,json=compareOptions,proto3" json:"compare_options,omitempty"`
}

func (x *ArgoCDResourceSettings) Reset() {
	*x = ArgoCDResourceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDResourceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDResourceSettings) ProtoMessage() {}

func (x *ArgoCDResourceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDResourceSettings.ProtoReflect.Descriptor instead.
func (*ArgoCDResourceSettings) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{112}
}

func (x *ArgoCDResourceSettings) GetInclusions() string {
	if x != nil {
		return x.Inclusions
	}
	return ""
}

func (x *ArgoCDResourceSettings) GetExclusions() string {
	if x != nil {
		return x.Exclusions
	}
	return ""
}

func (x *ArgoCDResourceSettings) GetCompareOptions() string {
	if x != nil {
		return x.CompareOptions
	}
	return ""
}

type ArgoCDWebTerminalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Shells  string `protobuf:"bytes,2,opt,name=shells,proto3" json:"shells,omitempty"`
}

func (x *ArgoCDWebTerminalConfig) Reset() {
	*x = ArgoCDWebTerminalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDWebTerminalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDWebTerminalConfig) ProtoMessage() {}

func (x *ArgoCDWebTerminalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDWebTerminalConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDWebTerminalConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{113}
}

func (x *ArgoCDWebTerminalConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ArgoCDWebTerminalConfig) GetShells() string {
	if x != nil {
		return x.Shells
	}
	return ""
}

type ClusterCustomization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoUpgradeDisabled bool             `protobuf:"varint,1,opt,name=auto_upgrade_disabled,json=autoUpgradeDisabled,proto3" json:"auto_upgrade_disabled,omitempty"`
	Kustomization       *structpb.Struct `protobuf:"bytes,2,opt,name=kustomization,proto3" json:"kustomization,omitempty"`
	AppReplication      bool             `protobuf:"varint,3,opt,name=app_replication,json=appReplication,proto3" json:"app_replication,omitempty"`
	RedisTunneling      bool             `protobuf:"varint,4,opt,name=redis_tunneling,json=redisTunneling,proto3" json:"redis_tunneling,omitempty"`
}

func (x *ClusterCustomization) Reset() {
	*x = ClusterCustomization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCustomization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCustomization) ProtoMessage() {}

func (x *ClusterCustomization) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCustomization.ProtoReflect.Descriptor instead.
func (*ClusterCustomization) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{114}
}

func (x *ClusterCustomization) GetAutoUpgradeDisabled() bool {
	if x != nil {
		return x.AutoUpgradeDisabled
	}
	return false
}

func (x *ClusterCustomization) GetKustomization() *structpb.Struct {
	if x != nil {
		return x.Kustomization
	}
	return nil
}

func (x *ClusterCustomization) GetAppReplication() bool {
	if x != nil {
		return x.AppReplication
	}
	return false
}

func (x *ClusterCustomization) GetRedisTunneling() bool {
	if x != nil {
		return x.RedisTunneling
	}
	return false
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                       string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Hostname                   string                 `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ClusterCount               uint32                 `protobuf:"varint,4,opt,name=cluster_count,json=clusterCount,proto3" json:"cluster_count,omitempty"`
	Secrets                    map[string]string      `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Generation                 uint32                 `protobuf:"varint,6,opt,name=generation,proto3" json:"generation,omitempty"`
	RecentProcessedEventId     uint32                 `protobuf:"varint,7,opt,name=recent_processed_event_id,json=recentProcessedEventId,proto3" json:"recent_processed_event_id,omitempty"`
	HealthStatus               *v12.Status            `protobuf:"bytes,8,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	ReconciliationStatus       *v14.Status            `protobuf:"bytes,9,opt,name=reconciliation_status,json=reconciliationStatus,proto3" json:"reconciliation_status,omitempty"`
	DeleteTime                 *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`
	OwnerOrganizationName      string                 `protobuf:"bytes,11,opt,name=owner_organization_name,json=ownerOrganizationName,proto3" json:"owner_organization_name,omitempty"`
	Description                string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Version                    string                 `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	Spec                       *InstanceSpec          `protobuf:"bytes,14,opt,name=spec,proto3" json:"spec,omitempty"`
	Config                     *ArgoCDConfigMap       `protobuf:"bytes,15,opt,name=config,proto3,oneof" json:"config,omitempty"`
	RbacConfig                 *ArgoCDRBACConfigMap   `protobuf:"bytes,16,opt,name=rbac_config,json=rbacConfig,proto3,oneof" json:"rbac_config,omitempty"`
	Info                       *InstanceInfo          `protobuf:"bytes,17,opt,name=info,proto3" json:"info,omitempty"`
	Shard                      string                 `protobuf:"bytes,18,opt,name=shard,proto3" json:"shard,omitempty"`
	WorkspaceId                string                 `protobuf:"bytes,19,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	NotIntegrationClusterCount uint32                 `protobuf:"varint,20,opt,name=not_integration_cluster_count,json=notIntegrationClusterCount,proto3" json:"not_integration_cluster_count,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{115}
}

func (x *Instance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instance) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Instance) GetClusterCount() uint32 {
	if x != nil {
		return x.ClusterCount
	}
	return 0
}

func (x *Instance) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Instance) GetGeneration() uint32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Instance) GetRecentProcessedEventId() uint32 {
	if x != nil {
		return x.RecentProcessedEventId
	}
	return 0
}

func (x *Instance) GetHealthStatus() *v12.Status {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *Instance) GetReconciliationStatus() *v14.Status {
	if x != nil {
		return x.ReconciliationStatus
	}
	return nil
}

func (x *Instance) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Instance) GetOwnerOrganizationName() string {
	if x != nil {
		return x.OwnerOrganizationName
	}
	return ""
}

func (x *Instance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Instance) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Instance) GetSpec() *InstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Instance) GetConfig() *ArgoCDConfigMap {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Instance) GetRbacConfig() *ArgoCDRBACConfigMap {
	if x != nil {
		return x.RbacConfig
	}
	return nil
}

func (x *Instance) GetInfo() *InstanceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Instance) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *Instance) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *Instance) GetNotIntegrationClusterCount() uint32 {
	if x != nil {
		return x.NotIntegrationClusterCount
	}
	return 0
}

type InstanceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Capabilities *InstanceAccountCapabilities `protobuf:"bytes,2,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	Disabled     bool                         `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *InstanceAccount) Reset() {
	*x = InstanceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAccount) ProtoMessage() {}

func (x *InstanceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAccount.ProtoReflect.Descriptor instead.
func (*InstanceAccount) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{116}
}

func (x *InstanceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceAccount) GetCapabilities() *InstanceAccountCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *InstanceAccount) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type CertificateStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCnameSet bool   `protobuf:"varint,1,opt,name=is_cname_set,json=isCnameSet,proto3" json:"is_cname_set,omitempty"`
	IsIssued   bool   `protobuf:"varint,2,opt,name=is_issued,json=isIssued,proto3" json:"is_issued,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CertificateStatus) Reset() {
	*x = CertificateStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateStatus) ProtoMessage() {}

func (x *CertificateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateStatus.ProtoReflect.Descriptor instead.
func (*CertificateStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{117}
}

func (x *CertificateStatus) GetIsCnameSet() bool {
	if x != nil {
		return x.IsCnameSet
	}
	return false
}

func (x *CertificateStatus) GetIsIssued() bool {
	if x != nil {
		return x.IsIssued
	}
	return false
}

func (x *CertificateStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationsStatus *ApplicationsStatus `protobuf:"bytes,1,opt,name=applications_status,json=applicationsStatus,proto3" json:"applications_status,omitempty"`
	CertificateStatus  *CertificateStatus  `protobuf:"bytes,2,opt,name=certificate_status,json=certificateStatus,proto3,oneof" json:"certificate_status,omitempty"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{118}
}

func (x *InstanceInfo) GetApplicationsStatus() *ApplicationsStatus {
	if x != nil {
		return x.ApplicationsStatus
	}
	return nil
}

func (x *InstanceInfo) GetCertificateStatus() *CertificateStatus {
	if x != nil {
		return x.CertificateStatus
	}
	return nil
}

type AppsetPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy         string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	OverridePolicy bool   `protobuf:"varint,2,opt,name=override_policy,json=overridePolicy,proto3" json:"override_policy,omitempty"`
}

func (x *AppsetPolicy) Reset() {
	*x = AppsetPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppsetPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppsetPolicy) ProtoMessage() {}

func (x *AppsetPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppsetPolicy.ProtoReflect.Descriptor instead.
func (*AppsetPolicy) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{119}
}

func (x *AppsetPolicy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *AppsetPolicy) GetOverridePolicy() bool {
	if x != nil {
		return x.OverridePolicy
	}
	return false
}

type AgentPermissionsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiGroups []string `protobuf:"bytes,1,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
	Resources []string `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	Verbs     []string `protobuf:"bytes,3,rep,name=verbs,proto3" json:"verbs,omitempty"`
}

func (x *AgentPermissionsRule) Reset() {
	*x = AgentPermissionsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentPermissionsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPermissionsRule) ProtoMessage() {}

func (x *AgentPermissionsRule) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPermissionsRule.ProtoReflect.Descriptor instead.
func (*AgentPermissionsRule) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{120}
}

func (x *AgentPermissionsRule) GetApiGroups() []string {
	if x != nil {
		return x.ApiGroups
	}
	return nil
}

func (x *AgentPermissionsRule) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *AgentPermissionsRule) GetVerbs() []string {
	if x != nil {
		return x.Verbs
	}
	return nil
}

type CrossplaneExtensionResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// supports glob pattern - argocd uses
	// [minimatch](https://www.npmjs.com/package/minimatch) package to match group
	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *CrossplaneExtensionResource) Reset() {
	*x = CrossplaneExtensionResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossplaneExtensionResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossplaneExtensionResource) ProtoMessage() {}

func (x *CrossplaneExtensionResource) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossplaneExtensionResource.ProtoReflect.Descriptor instead.
func (*CrossplaneExtensionResource) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{121}
}

func (x *CrossplaneExtensionResource) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type CrossplaneExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*CrossplaneExtensionResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *CrossplaneExtension) Reset() {
	*x = CrossplaneExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossplaneExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossplaneExtension) ProtoMessage() {}

func (x *CrossplaneExtension) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossplaneExtension.ProtoReflect.Descriptor instead.
func (*CrossplaneExtension) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{122}
}

func (x *CrossplaneExtension) GetResources() []*CrossplaneExtensionResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type KubeVisionArgoExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AllowedUsernames []string `protobuf:"bytes,2,rep,name=allowed_usernames,json=allowedUsernames,proto3" json:"allowed_usernames,omitempty"`
	AllowedGroups    []string `protobuf:"bytes,3,rep,name=allowed_groups,json=allowedGroups,proto3" json:"allowed_groups,omitempty"`
}

func (x *KubeVisionArgoExtension) Reset() {
	*x = KubeVisionArgoExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeVisionArgoExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeVisionArgoExtension) ProtoMessage() {}

func (x *KubeVisionArgoExtension) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeVisionArgoExtension.ProtoReflect.Descriptor instead.
func (*KubeVisionArgoExtension) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{123}
}

func (x *KubeVisionArgoExtension) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *KubeVisionArgoExtension) GetAllowedUsernames() []string {
	if x != nil {
		return x.AllowedUsernames
	}
	return nil
}

func (x *KubeVisionArgoExtension) GetAllowedGroups() []string {
	if x != nil {
		return x.AllowedGroups
	}
	return nil
}

type KubeVisionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CveScanConfig *CveScanConfig `protobuf:"bytes,1,opt,name=cve_scan_config,json=cveScanConfig,proto3" json:"cve_scan_config,omitempty"`
}

func (x *KubeVisionConfig) Reset() {
	*x = KubeVisionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeVisionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeVisionConfig) ProtoMessage() {}

func (x *KubeVisionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeVisionConfig.ProtoReflect.Descriptor instead.
func (*KubeVisionConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{124}
}

func (x *KubeVisionConfig) GetCveScanConfig() *CveScanConfig {
	if x != nil {
		return x.CveScanConfig
	}
	return nil
}

type AppInAnyNamespaceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AppInAnyNamespaceConfig) Reset() {
	*x = AppInAnyNamespaceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInAnyNamespaceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInAnyNamespaceConfig) ProtoMessage() {}

func (x *AppInAnyNamespaceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInAnyNamespaceConfig.ProtoReflect.Descriptor instead.
func (*AppInAnyNamespaceConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{125}
}

func (x *AppInAnyNamespaceConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type CustomDeprecatedAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion                     string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	NewApiVersion                  string `protobuf:"bytes,2,opt,name=new_api_version,json=newApiVersion,proto3" json:"new_api_version,omitempty"`
	DeprecatedInKubernetesVersion  string `protobuf:"bytes,3,opt,name=deprecated_in_kubernetes_version,json=deprecatedInKubernetesVersion,proto3" json:"deprecated_in_kubernetes_version,omitempty"`
	UnavailableInKubernetesVersion string `protobuf:"bytes,4,opt,name=unavailable_in_kubernetes_version,json=unavailableInKubernetesVersion,proto3" json:"unavailable_in_kubernetes_version,omitempty"`
}

func (x *CustomDeprecatedAPI) Reset() {
	*x = CustomDeprecatedAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDeprecatedAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDeprecatedAPI) ProtoMessage() {}

func (x *CustomDeprecatedAPI) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDeprecatedAPI.ProtoReflect.Descriptor instead.
func (*CustomDeprecatedAPI) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{126}
}

func (x *CustomDeprecatedAPI) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *CustomDeprecatedAPI) GetNewApiVersion() string {
	if x != nil {
		return x.NewApiVersion
	}
	return ""
}

func (x *CustomDeprecatedAPI) GetDeprecatedInKubernetesVersion() string {
	if x != nil {
		return x.DeprecatedInKubernetesVersion
	}
	return ""
}

func (x *CustomDeprecatedAPI) GetUnavailableInKubernetesVersion() string {
	if x != nil {
		return x.UnavailableInKubernetesVersion
	}
	return ""
}

type CveScanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanEnabled    bool   `protobuf:"varint,1,opt,name=scan_enabled,json=scanEnabled,proto3" json:"scan_enabled,omitempty"`
	RescanInterval string `protobuf:"bytes,2,opt,name=rescan_interval,json=rescanInterval,proto3" json:"rescan_interval,omitempty"`
}

func (x *CveScanConfig) Reset() {
	*x = CveScanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CveScanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CveScanConfig) ProtoMessage() {}

func (x *CveScanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CveScanConfig.ProtoReflect.Descriptor instead.
func (*CveScanConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{127}
}

func (x *CveScanConfig) GetScanEnabled() bool {
	if x != nil {
		return x.ScanEnabled
	}
	return false
}

func (x *CveScanConfig) GetRescanInterval() string {
	if x != nil {
		return x.RescanInterval
	}
	return ""
}

type ObjectSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// +optional
	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
}

func (x *ObjectSelector) Reset() {
	*x = ObjectSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSelector) ProtoMessage() {}

func (x *ObjectSelector) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSelector.ProtoReflect.Descriptor instead.
func (*ObjectSelector) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{128}
}

func (x *ObjectSelector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *ObjectSelector) GetMatchExpressions() []*LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type LabelSelectorRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the label key that the selector applies to.
	Key *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `protobuf:"bytes,2,opt,name=operator,proto3,oneof" json:"operator,omitempty"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LabelSelectorRequirement) Reset() {
	*x = LabelSelectorRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelectorRequirement) ProtoMessage() {}

func (x *LabelSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelectorRequirement.ProtoReflect.Descriptor instead.
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{129}
}

func (x *LabelSelectorRequirement) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LabelSelectorRequirement) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *LabelSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ClusterSecretMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters *ObjectSelector `protobuf:"bytes,1,opt,name=clusters,proto3" json:"clusters,omitempty"`
	Secrets  *ObjectSelector `protobuf:"bytes,2,opt,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *ClusterSecretMapping) Reset() {
	*x = ClusterSecretMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecretMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecretMapping) ProtoMessage() {}

func (x *ClusterSecretMapping) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecretMapping.ProtoReflect.Descriptor instead.
func (*ClusterSecretMapping) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{130}
}

func (x *ClusterSecretMapping) GetClusters() *ObjectSelector {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ClusterSecretMapping) GetSecrets() *ObjectSelector {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type SecretsManagementConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources      []*ClusterSecretMapping `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations []*ClusterSecretMapping `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *SecretsManagementConfig) Reset() {
	*x = SecretsManagementConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretsManagementConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretsManagementConfig) ProtoMessage() {}

func (x *SecretsManagementConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretsManagementConfig.ProtoReflect.Descriptor instead.
func (*SecretsManagementConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{131}
}

func (x *SecretsManagementConfig) GetSources() []*ClusterSecretMapping {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *SecretsManagementConfig) GetDestinations() []*ClusterSecretMapping {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type AISupportEngineerExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AISupportEngineerExtension) Reset() {
	*x = AISupportEngineerExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AISupportEngineerExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AISupportEngineerExtension) ProtoMessage() {}

func (x *AISupportEngineerExtension) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AISupportEngineerExtension.ProtoReflect.Descriptor instead.
func (*AISupportEngineerExtension) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{132}
}

func (x *AISupportEngineerExtension) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type InstanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAllowList                     []*IPAllowListEntry            `protobuf:"bytes,1,rep,name=ip_allow_list,json=ipAllowList,proto3" json:"ip_allow_list,omitempty"`
	Subdomain                       string                         `protobuf:"bytes,2,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	DeclarativeManagementEnabled    bool                           `protobuf:"varint,3,opt,name=declarative_management_enabled,json=declarativeManagementEnabled,proto3" json:"declarative_management_enabled,omitempty"`
	Extensions                      []*ArgoCDExtensionInstallEntry `protobuf:"bytes,4,rep,name=extensions,proto3" json:"extensions,omitempty"`
	ClusterCustomizationDefaults    *ClusterCustomization          `protobuf:"bytes,5,opt,name=cluster_customization_defaults,json=clusterCustomizationDefaults,proto3" json:"cluster_customization_defaults,omitempty"`
	ImageUpdaterEnabled             bool                           `protobuf:"varint,6,opt,name=image_updater_enabled,json=imageUpdaterEnabled,proto3" json:"image_updater_enabled,omitempty"`
	BackendIpAllowListEnabled       bool                           `protobuf:"varint,7,opt,name=backend_ip_allow_list_enabled,json=backendIpAllowListEnabled,proto3" json:"backend_ip_allow_list_enabled,omitempty"`
	RepoServerDelegate              *RepoServerDelegate            `protobuf:"bytes,8,opt,name=repo_server_delegate,json=repoServerDelegate,proto3" json:"repo_server_delegate,omitempty"`
	AuditExtensionEnabled           bool                           `protobuf:"varint,9,opt,name=audit_extension_enabled,json=auditExtensionEnabled,proto3" json:"audit_extension_enabled,omitempty"`
	SyncHistoryExtensionEnabled     bool                           `protobuf:"varint,11,opt,name=sync_history_extension_enabled,json=syncHistoryExtensionEnabled,proto3" json:"sync_history_extension_enabled,omitempty"`
	CrossplaneExtension             *CrossplaneExtension           `protobuf:"bytes,12,opt,name=crossplane_extension,json=crossplaneExtension,proto3,oneof" json:"crossplane_extension,omitempty"`
	ImageUpdaterDelegate            *ImageUpdaterDelegate          `protobuf:"bytes,13,opt,name=image_updater_delegate,json=imageUpdaterDelegate,proto3" json:"image_updater_delegate,omitempty"`
	AppSetDelegate                  *AppSetDelegate                `protobuf:"bytes,14,opt,name=app_set_delegate,json=appSetDelegate,proto3" json:"app_set_delegate,omitempty"`
	AssistantExtensionEnabled       bool                           `protobuf:"varint,15,opt,name=assistant_extension_enabled,json=assistantExtensionEnabled,proto3" json:"assistant_extension_enabled,omitempty"`
	AppsetPolicy                    *AppsetPolicy                  `protobuf:"bytes,16,opt,name=appset_policy,json=appsetPolicy,proto3" json:"appset_policy,omitempty"`
	HostAliases                     []*HostAliases                 `protobuf:"bytes,17,rep,name=host_aliases,json=hostAliases,proto3" json:"host_aliases,omitempty"`
	AgentPermissionsRules           []*AgentPermissionsRule        `protobuf:"bytes,18,rep,name=agent_permissions_rules,json=agentPermissionsRules,proto3" json:"agent_permissions_rules,omitempty"`
	Fqdn                            string                         `protobuf:"bytes,19,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	MultiClusterK8SDashboardEnabled bool                           `protobuf:"varint,20,opt,name=multi_cluster_k8s_dashboard_enabled,json=multiClusterK8sDashboardEnabled,proto3" json:"multi_cluster_k8s_dashboard_enabled,omitempty"`
	KubeVisionArgoExtension         *KubeVisionArgoExtension       `protobuf:"bytes,21,opt,name=kube_vision_argo_extension,json=kubeVisionArgoExtension,proto3,oneof" json:"kube_vision_argo_extension,omitempty"`
	ImageUpdaterVersion             string                         `protobuf:"bytes,22,opt,name=image_updater_version,json=imageUpdaterVersion,proto3" json:"image_updater_version,omitempty"`
	CustomDeprecatedApis            []*CustomDeprecatedAPI         `protobuf:"bytes,23,rep,name=custom_deprecated_apis,json=customDeprecatedApis,proto3" json:"custom_deprecated_apis,omitempty"`
	KubeVisionConfig                *KubeVisionConfig              `protobuf:"bytes,24,opt,name=kube_vision_config,json=kubeVisionConfig,proto3" json:"kube_vision_config,omitempty"`
	AppInAnyNamespaceConfig         *AppInAnyNamespaceConfig       `protobuf:"bytes,25,opt,name=app_in_any_namespace_config,json=appInAnyNamespaceConfig,proto3" json:"app_in_any_namespace_config,omitempty"`
	Basepath                        string                         `protobuf:"bytes,26,opt,name=basepath,proto3" json:"basepath,omitempty"`
	AppsetProgressiveSyncsEnabled   bool                           `protobuf:"varint,27,opt,name=appset_progressive_syncs_enabled,json=appsetProgressiveSyncsEnabled,proto3" json:"appset_progressive_syncs_enabled,omitempty"`
	AiSupportEngineerExtension      *AISupportEngineerExtension    `protobuf:"bytes,28,opt,name=ai_support_engineer_extension,json=aiSupportEngineerExtension,proto3,oneof" json:"ai_support_engineer_extension,omitempty"`
	Secrets                         *SecretsManagementConfig       `protobuf:"bytes,29,opt,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *InstanceSpec) Reset() {
	*x = InstanceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSpec) ProtoMessage() {}

func (x *InstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSpec.ProtoReflect.Descriptor instead.
func (*InstanceSpec) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{133}
}

func (x *InstanceSpec) GetIpAllowList() []*IPAllowListEntry {
	if x != nil {
		return x.IpAllowList
	}
	return nil
}

func (x *InstanceSpec) GetSubdomain() string {
	if x != nil {
		return x.Subdomain
	}
	return ""
}

func (x *InstanceSpec) GetDeclarativeManagementEnabled() bool {
	if x != nil {
		return x.DeclarativeManagementEnabled
	}
	return false
}

func (x *InstanceSpec) GetExtensions() []*ArgoCDExtensionInstallEntry {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *InstanceSpec) GetClusterCustomizationDefaults() *ClusterCustomization {
	if x != nil {
		return x.ClusterCustomizationDefaults
	}
	return nil
}

func (x *InstanceSpec) GetImageUpdaterEnabled() bool {
	if x != nil {
		return x.ImageUpdaterEnabled
	}
	return false
}

func (x *InstanceSpec) GetBackendIpAllowListEnabled() bool {
	if x != nil {
		return x.BackendIpAllowListEnabled
	}
	return false
}

func (x *InstanceSpec) GetRepoServerDelegate() *RepoServerDelegate {
	if x != nil {
		return x.RepoServerDelegate
	}
	return nil
}

func (x *InstanceSpec) GetAuditExtensionEnabled() bool {
	if x != nil {
		return x.AuditExtensionEnabled
	}
	return false
}

func (x *InstanceSpec) GetSyncHistoryExtensionEnabled() bool {
	if x != nil {
		return x.SyncHistoryExtensionEnabled
	}
	return false
}

func (x *InstanceSpec) GetCrossplaneExtension() *CrossplaneExtension {
	if x != nil {
		return x.CrossplaneExtension
	}
	return nil
}

func (x *InstanceSpec) GetImageUpdaterDelegate() *ImageUpdaterDelegate {
	if x != nil {
		return x.ImageUpdaterDelegate
	}
	return nil
}

func (x *InstanceSpec) GetAppSetDelegate() *AppSetDelegate {
	if x != nil {
		return x.AppSetDelegate
	}
	return nil
}

func (x *InstanceSpec) GetAssistantExtensionEnabled() bool {
	if x != nil {
		return x.AssistantExtensionEnabled
	}
	return false
}

func (x *InstanceSpec) GetAppsetPolicy() *AppsetPolicy {
	if x != nil {
		return x.AppsetPolicy
	}
	return nil
}

func (x *InstanceSpec) GetHostAliases() []*HostAliases {
	if x != nil {
		return x.HostAliases
	}
	return nil
}

func (x *InstanceSpec) GetAgentPermissionsRules() []*AgentPermissionsRule {
	if x != nil {
		return x.AgentPermissionsRules
	}
	return nil
}

func (x *InstanceSpec) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *InstanceSpec) GetMultiClusterK8SDashboardEnabled() bool {
	if x != nil {
		return x.MultiClusterK8SDashboardEnabled
	}
	return false
}

func (x *InstanceSpec) GetKubeVisionArgoExtension() *KubeVisionArgoExtension {
	if x != nil {
		return x.KubeVisionArgoExtension
	}
	return nil
}

func (x *InstanceSpec) GetImageUpdaterVersion() string {
	if x != nil {
		return x.ImageUpdaterVersion
	}
	return ""
}

func (x *InstanceSpec) GetCustomDeprecatedApis() []*CustomDeprecatedAPI {
	if x != nil {
		return x.CustomDeprecatedApis
	}
	return nil
}

func (x *InstanceSpec) GetKubeVisionConfig() *KubeVisionConfig {
	if x != nil {
		return x.KubeVisionConfig
	}
	return nil
}

func (x *InstanceSpec) GetAppInAnyNamespaceConfig() *AppInAnyNamespaceConfig {
	if x != nil {
		return x.AppInAnyNamespaceConfig
	}
	return nil
}

func (x *InstanceSpec) GetBasepath() string {
	if x != nil {
		return x.Basepath
	}
	return ""
}

func (x *InstanceSpec) GetAppsetProgressiveSyncsEnabled() bool {
	if x != nil {
		return x.AppsetProgressiveSyncsEnabled
	}
	return false
}

func (x *InstanceSpec) GetAiSupportEngineerExtension() *AISupportEngineerExtension {
	if x != nil {
		return x.AiSupportEngineerExtension
	}
	return nil
}

func (x *InstanceSpec) GetSecrets() *SecretsManagementConfig {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type ManagedCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *ManagedCluster) Reset() {
	*x = ManagedCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedCluster) ProtoMessage() {}

func (x *ManagedCluster) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedCluster.ProtoReflect.Descriptor instead.
func (*ManagedCluster) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{134}
}

func (x *ManagedCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type RepoServerDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPlane   bool            `protobuf:"varint,1,opt,name=control_plane,json=controlPlane,proto3" json:"control_plane,omitempty"`
	ManagedCluster *ManagedCluster `protobuf:"bytes,2,opt,name=managed_cluster,json=managedCluster,proto3" json:"managed_cluster,omitempty"`
}

func (x *RepoServerDelegate) Reset() {
	*x = RepoServerDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoServerDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoServerDelegate) ProtoMessage() {}

func (x *RepoServerDelegate) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoServerDelegate.ProtoReflect.Descriptor instead.
func (*RepoServerDelegate) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{135}
}

func (x *RepoServerDelegate) GetControlPlane() bool {
	if x != nil {
		return x.ControlPlane
	}
	return false
}

func (x *RepoServerDelegate) GetManagedCluster() *ManagedCluster {
	if x != nil {
		return x.ManagedCluster
	}
	return nil
}

type ImageUpdaterDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPlane   bool            `protobuf:"varint,1,opt,name=control_plane,json=controlPlane,proto3" json:"control_plane,omitempty"`
	ManagedCluster *ManagedCluster `protobuf:"bytes,2,opt,name=managed_cluster,json=managedCluster,proto3" json:"managed_cluster,omitempty"`
}

func (x *ImageUpdaterDelegate) Reset() {
	*x = ImageUpdaterDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageUpdaterDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageUpdaterDelegate) ProtoMessage() {}

func (x *ImageUpdaterDelegate) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageUpdaterDelegate.ProtoReflect.Descriptor instead.
func (*ImageUpdaterDelegate) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{136}
}

func (x *ImageUpdaterDelegate) GetControlPlane() bool {
	if x != nil {
		return x.ControlPlane
	}
	return false
}

func (x *ImageUpdaterDelegate) GetManagedCluster() *ManagedCluster {
	if x != nil {
		return x.ManagedCluster
	}
	return nil
}

type AppSetDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedCluster *ManagedCluster `protobuf:"bytes,1,opt,name=managed_cluster,json=managedCluster,proto3" json:"managed_cluster,omitempty"`
}

func (x *AppSetDelegate) Reset() {
	*x = AppSetDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSetDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSetDelegate) ProtoMessage() {}

func (x *AppSetDelegate) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSetDelegate.ProtoReflect.Descriptor instead.
func (*AppSetDelegate) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{137}
}

func (x *AppSetDelegate) GetManagedCluster() *ManagedCluster {
	if x != nil {
		return x.ManagedCluster
	}
	return nil
}

type InstanceAccountCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login  bool `protobuf:"varint,1,opt,name=login,proto3" json:"login,omitempty"`
	ApiKey bool `protobuf:"varint,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *InstanceAccountCapabilities) Reset() {
	*x = InstanceAccountCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAccountCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAccountCapabilities) ProtoMessage() {}

func (x *InstanceAccountCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAccountCapabilities.ProtoReflect.Descriptor instead.
func (*InstanceAccountCapabilities) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{138}
}

func (x *InstanceAccountCapabilities) GetLogin() bool {
	if x != nil {
		return x.Login
	}
	return false
}

func (x *InstanceAccountCapabilities) GetApiKey() bool {
	if x != nil {
		return x.ApiKey
	}
	return false
}

type InstanceVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *InstanceVersion) Reset() {
	*x = InstanceVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceVersion) ProtoMessage() {}

func (x *InstanceVersion) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceVersion.ProtoReflect.Descriptor instead.
func (*InstanceVersion) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{139}
}

func (x *InstanceVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstanceVersion) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type IPAllowListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip          string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *IPAllowListEntry) Reset() {
	*x = IPAllowListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAllowListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAllowListEntry) ProtoMessage() {}

func (x *IPAllowListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAllowListEntry.ProtoReflect.Descriptor instead.
func (*IPAllowListEntry) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{140}
}

func (x *IPAllowListEntry) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPAllowListEntry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type HostAliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip        string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Hostnames []string `protobuf:"bytes,2,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
}

func (x *HostAliases) Reset() {
	*x = HostAliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostAliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostAliases) ProtoMessage() {}

func (x *HostAliases) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostAliases.ProtoReflect.Descriptor instead.
func (*HostAliases) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{141}
}

func (x *HostAliases) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostAliases) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mem string `protobuf:"bytes,1,opt,name=mem,proto3" json:"mem,omitempty"`
	Cpu string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{142}
}

func (x *Resources) GetMem() string {
	if x != nil {
		return x.Mem
	}
	return ""
}

func (x *Resources) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

type ApplicationControllerResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests *Resources `protobuf:"bytes,1,opt,name=requests,proto3" json:"requests,omitempty"`
	Limits   *Resources `protobuf:"bytes,2,opt,name=limits,proto3,oneof" json:"limits,omitempty"`
}

func (x *ApplicationControllerResources) Reset() {
	*x = ApplicationControllerResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationControllerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationControllerResources) ProtoMessage() {}

func (x *ApplicationControllerResources) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationControllerResources.ProtoReflect.Descriptor instead.
func (*ApplicationControllerResources) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{143}
}

func (x *ApplicationControllerResources) GetRequests() *Resources {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ApplicationControllerResources) GetLimits() *Resources {
	if x != nil {
		return x.Limits
	}
	return nil
}

type RepoServerResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests *Resources `protobuf:"bytes,1,opt,name=requests,proto3" json:"requests,omitempty"`
	Limits   *Resources `protobuf:"bytes,2,opt,name=limits,proto3,oneof" json:"limits,omitempty"`
	Replicas uint32     `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *RepoServerResources) Reset() {
	*x = RepoServerResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoServerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoServerResources) ProtoMessage() {}

func (x *RepoServerResources) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoServerResources.ProtoReflect.Descriptor instead.
func (*RepoServerResources) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{144}
}

func (x *RepoServerResources) GetRequests() *Resources {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *RepoServerResources) GetLimits() *Resources {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *RepoServerResources) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type AgentResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationController *ApplicationControllerResources `protobuf:"bytes,1,opt,name=application_controller,json=applicationController,proto3" json:"application_controller,omitempty"`
	RepoServer            *RepoServerResources            `protobuf:"bytes,2,opt,name=repo_server,json=repoServer,proto3" json:"repo_server,omitempty"`
}

func (x *AgentResources) Reset() {
	*x = AgentResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentResources) ProtoMessage() {}

func (x *AgentResources) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentResources.ProtoReflect.Descriptor instead.
func (*AgentResources) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{145}
}

func (x *AgentResources) GetApplicationController() *ApplicationControllerResources {
	if x != nil {
		return x.ApplicationController
	}
	return nil
}

func (x *AgentResources) GetRepoServer() *RepoServerResources {
	if x != nil {
		return x.RepoServer
	}
	return nil
}

type AgentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                   string                             `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ArgoCdVersion             string                             `protobuf:"bytes,2,opt,name=argo_cd_version,json=argoCdVersion,proto3" json:"argo_cd_version,omitempty"`
	ObserveTime               *timestamppb.Timestamp             `protobuf:"bytes,3,opt,name=observe_time,json=observeTime,proto3,oneof" json:"observe_time,omitempty"`
	Status                    *v12.AgentAggregatedHealthResponse `protobuf:"bytes,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	AgentIds                  []string                           `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	LastUserAppliedGeneration uint64                             `protobuf:"varint,6,opt,name=last_user_applied_generation,json=lastUserAppliedGeneration,proto3" json:"last_user_applied_generation,omitempty"`
	AgentResources            *AgentResources                    `protobuf:"bytes,7,opt,name=agent_resources,json=agentResources,proto3,oneof" json:"agent_resources,omitempty"`
}

func (x *AgentState) Reset() {
	*x = AgentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentState) ProtoMessage() {}

func (x *AgentState) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentState.ProtoReflect.Descriptor instead.
func (*AgentState) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{146}
}

func (x *AgentState) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentState) GetArgoCdVersion() string {
	if x != nil {
		return x.ArgoCdVersion
	}
	return ""
}

func (x *AgentState) GetObserveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ObserveTime
	}
	return nil
}

func (x *AgentState) GetStatus() *v12.AgentAggregatedHealthResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AgentState) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *AgentState) GetLastUserAppliedGeneration() uint64 {
	if x != nil {
		return x.LastUserAppliedGeneration
	}
	return 0
}

func (x *AgentState) GetAgentResources() *AgentResources {
	if x != nil {
		return x.AgentResources
	}
	return nil
}

type DirectClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterType     DirectClusterType `protobuf:"varint,1,opt,name=cluster_type,json=clusterType,proto3,enum=akuity.argocd.v1.DirectClusterType" json:"cluster_type,omitempty"`
	KargoInstanceId *string           `protobuf:"bytes,2,opt,name=kargo_instance_id,json=kargoInstanceId,proto3,oneof" json:"kargo_instance_id,omitempty"`
	Server          *string           `protobuf:"bytes,3,opt,name=server,proto3,oneof" json:"server,omitempty"`
	Organization    *string           `protobuf:"bytes,4,opt,name=organization,proto3,oneof" json:"organization,omitempty"`
	Token           *string           `protobuf:"bytes,5,opt,name=token,proto3,oneof" json:"token,omitempty"`
	CaData          *string           `protobuf:"bytes,6,opt,name=ca_data,json=caData,proto3,oneof" json:"ca_data,omitempty"`
}

func (x *DirectClusterSpec) Reset() {
	*x = DirectClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectClusterSpec) ProtoMessage() {}

func (x *DirectClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectClusterSpec.ProtoReflect.Descriptor instead.
func (*DirectClusterSpec) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{147}
}

func (x *DirectClusterSpec) GetClusterType() DirectClusterType {
	if x != nil {
		return x.ClusterType
	}
	return DirectClusterType_DIRECT_CLUSTER_TYPE_UPBOUND
}

func (x *DirectClusterSpec) GetKargoInstanceId() string {
	if x != nil && x.KargoInstanceId != nil {
		return *x.KargoInstanceId
	}
	return ""
}

func (x *DirectClusterSpec) GetServer() string {
	if x != nil && x.Server != nil {
		return *x.Server
	}
	return ""
}

func (x *DirectClusterSpec) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *DirectClusterSpec) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *DirectClusterSpec) GetCaData() string {
	if x != nil && x.CaData != nil {
		return *x.CaData
	}
	return ""
}

type ManagedClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	SecretKey  string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *ManagedClusterConfig) Reset() {
	*x = ManagedClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedClusterConfig) ProtoMessage() {}

func (x *ManagedClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedClusterConfig.ProtoReflect.Descriptor instead.
func (*ManagedClusterConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{148}
}

func (x *ManagedClusterConfig) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *ManagedClusterConfig) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type AutoScalerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationController *AppControllerAutoScalingConfig `protobuf:"bytes,1,opt,name=application_controller,json=applicationController,proto3" json:"application_controller,omitempty"`
	RepoServer            *RepoServerAutoScalingConfig    `protobuf:"bytes,2,opt,name=repo_server,json=repoServer,proto3" json:"repo_server,omitempty"`
}

func (x *AutoScalerConfig) Reset() {
	*x = AutoScalerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoScalerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScalerConfig) ProtoMessage() {}

func (x *AutoScalerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScalerConfig.ProtoReflect.Descriptor instead.
func (*AutoScalerConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{149}
}

func (x *AutoScalerConfig) GetApplicationController() *AppControllerAutoScalingConfig {
	if x != nil {
		return x.ApplicationController
	}
	return nil
}

func (x *AutoScalerConfig) GetRepoServer() *RepoServerAutoScalingConfig {
	if x != nil {
		return x.RepoServer
	}
	return nil
}

type AppControllerAutoScalingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceMinimum *Resources `protobuf:"bytes,1,opt,name=resource_minimum,json=resourceMinimum,proto3" json:"resource_minimum,omitempty"`
	ResourceMaximum *Resources `protobuf:"bytes,2,opt,name=resource_maximum,json=resourceMaximum,proto3" json:"resource_maximum,omitempty"`
}

func (x *AppControllerAutoScalingConfig) Reset() {
	*x = AppControllerAutoScalingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppControllerAutoScalingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppControllerAutoScalingConfig) ProtoMessage() {}

func (x *AppControllerAutoScalingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppControllerAutoScalingConfig.ProtoReflect.Descriptor instead.
func (*AppControllerAutoScalingConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{150}
}

func (x *AppControllerAutoScalingConfig) GetResourceMinimum() *Resources {
	if x != nil {
		return x.ResourceMinimum
	}
	return nil
}

func (x *AppControllerAutoScalingConfig) GetResourceMaximum() *Resources {
	if x != nil {
		return x.ResourceMaximum
	}
	return nil
}

type RepoServerAutoScalingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceMinimum *Resources `protobuf:"bytes,1,opt,name=resource_minimum,json=resourceMinimum,proto3" json:"resource_minimum,omitempty"`
	ResourceMaximum *Resources `protobuf:"bytes,2,opt,name=resource_maximum,json=resourceMaximum,proto3" json:"resource_maximum,omitempty"`
	ReplicaMaximum  int32      `protobuf:"varint,3,opt,name=replica_maximum,json=replicaMaximum,proto3" json:"replica_maximum,omitempty"`
	ReplicaMinimum  int32      `protobuf:"varint,4,opt,name=replica_minimum,json=replicaMinimum,proto3" json:"replica_minimum,omitempty"`
}

func (x *RepoServerAutoScalingConfig) Reset() {
	*x = RepoServerAutoScalingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoServerAutoScalingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoServerAutoScalingConfig) ProtoMessage() {}

func (x *RepoServerAutoScalingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoServerAutoScalingConfig.ProtoReflect.Descriptor instead.
func (*RepoServerAutoScalingConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{151}
}

func (x *RepoServerAutoScalingConfig) GetResourceMinimum() *Resources {
	if x != nil {
		return x.ResourceMinimum
	}
	return nil
}

func (x *RepoServerAutoScalingConfig) GetResourceMaximum() *Resources {
	if x != nil {
		return x.ResourceMaximum
	}
	return nil
}

func (x *RepoServerAutoScalingConfig) GetReplicaMaximum() int32 {
	if x != nil {
		return x.ReplicaMaximum
	}
	return 0
}

func (x *RepoServerAutoScalingConfig) GetReplicaMinimum() int32 {
	if x != nil {
		return x.ReplicaMinimum
	}
	return 0
}

type ClusterCompatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6Only bool `protobuf:"varint,1,opt,name=ipv6_only,json=ipv6Only,proto3" json:"ipv6_only,omitempty"`
}

func (x *ClusterCompatibility) Reset() {
	*x = ClusterCompatibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCompatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCompatibility) ProtoMessage() {}

func (x *ClusterCompatibility) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCompatibility.ProtoReflect.Descriptor instead.
func (*ClusterCompatibility) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{152}
}

func (x *ClusterCompatibility) GetIpv6Only() bool {
	if x != nil {
		return x.Ipv6Only
	}
	return false
}

type ClusterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size                            ClusterSize           `protobuf:"varint,1,opt,name=size,proto3,enum=akuity.argocd.v1.ClusterSize" json:"size,omitempty"`
	Labels                          map[string]string     `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations                     map[string]string     `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AutoUpgradeDisabled             *bool                 `protobuf:"varint,4,opt,name=auto_upgrade_disabled,json=autoUpgradeDisabled,proto3,oneof" json:"auto_upgrade_disabled,omitempty"`
	Kustomization                   *structpb.Struct      `protobuf:"bytes,5,opt,name=kustomization,proto3" json:"kustomization,omitempty"`
	AppReplication                  *bool                 `protobuf:"varint,6,opt,name=app_replication,json=appReplication,proto3,oneof" json:"app_replication,omitempty"`
	TargetVersion                   string                `protobuf:"bytes,7,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
	RedisTunneling                  *bool                 `protobuf:"varint,8,opt,name=redis_tunneling,json=redisTunneling,proto3,oneof" json:"redis_tunneling,omitempty"`
	DirectClusterSpec               *DirectClusterSpec    `protobuf:"bytes,9,opt,name=direct_cluster_spec,json=directClusterSpec,proto3,oneof" json:"direct_cluster_spec,omitempty"`
	DatadogAnnotationsEnabled       *bool                 `protobuf:"varint,10,opt,name=datadog_annotations_enabled,json=datadogAnnotationsEnabled,proto3,oneof" json:"datadog_annotations_enabled,omitempty"`
	Namespace                       string                `protobuf:"bytes,11,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceScoped                 bool                  `protobuf:"varint,12,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"`
	EksAddonEnabled                 *bool                 `protobuf:"varint,13,opt,name=eks_addon_enabled,json=eksAddonEnabled,proto3,oneof" json:"eks_addon_enabled,omitempty"`
	ManagedClusterConfig            *ManagedClusterConfig `protobuf:"bytes,14,opt,name=managed_cluster_config,json=managedClusterConfig,proto3,oneof" json:"managed_cluster_config,omitempty"`
	MaintenanceMode                 *bool                 `protobuf:"varint,15,opt,name=maintenance_mode,json=maintenanceMode,proto3,oneof" json:"maintenance_mode,omitempty"`
	MultiClusterK8SDashboardEnabled *bool                 `protobuf:"varint,16,opt,name=multi_cluster_k8s_dashboard_enabled,json=multiClusterK8sDashboardEnabled,proto3,oneof" json:"multi_cluster_k8s_dashboard_enabled,omitempty"`
	AutoscalerConfig                *AutoScalerConfig     `protobuf:"bytes,17,opt,name=autoscaler_config,json=autoscalerConfig,proto3" json:"autoscaler_config,omitempty"`
	Project                         string                `protobuf:"bytes,18,opt,name=project,proto3" json:"project,omitempty"`
	Compatibility                   *ClusterCompatibility `protobuf:"bytes,19,opt,name=compatibility,proto3" json:"compatibility,omitempty"`
}

func (x *ClusterData) Reset() {
	*x = ClusterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterData) ProtoMessage() {}

func (x *ClusterData) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterData.ProtoReflect.Descriptor instead.
func (*ClusterData) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{153}
}

func (x *ClusterData) GetSize() ClusterSize {
	if x != nil {
		return x.Size
	}
	return ClusterSize_CLUSTER_SIZE_UNSPECIFIED
}

func (x *ClusterData) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ClusterData) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ClusterData) GetAutoUpgradeDisabled() bool {
	if x != nil && x.AutoUpgradeDisabled != nil {
		return *x.AutoUpgradeDisabled
	}
	return false
}

func (x *ClusterData) GetKustomization() *structpb.Struct {
	if x != nil {
		return x.Kustomization
	}
	return nil
}

func (x *ClusterData) GetAppReplication() bool {
	if x != nil && x.AppReplication != nil {
		return *x.AppReplication
	}
	return false
}

func (x *ClusterData) GetTargetVersion() string {
	if x != nil {
		return x.TargetVersion
	}
	return ""
}

func (x *ClusterData) GetRedisTunneling() bool {
	if x != nil && x.RedisTunneling != nil {
		return *x.RedisTunneling
	}
	return false
}

func (x *ClusterData) GetDirectClusterSpec() *DirectClusterSpec {
	if x != nil {
		return x.DirectClusterSpec
	}
	return nil
}

func (x *ClusterData) GetDatadogAnnotationsEnabled() bool {
	if x != nil && x.DatadogAnnotationsEnabled != nil {
		return *x.DatadogAnnotationsEnabled
	}
	return false
}

func (x *ClusterData) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ClusterData) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *ClusterData) GetEksAddonEnabled() bool {
	if x != nil && x.EksAddonEnabled != nil {
		return *x.EksAddonEnabled
	}
	return false
}

func (x *ClusterData) GetManagedClusterConfig() *ManagedClusterConfig {
	if x != nil {
		return x.ManagedClusterConfig
	}
	return nil
}

func (x *ClusterData) GetMaintenanceMode() bool {
	if x != nil && x.MaintenanceMode != nil {
		return *x.MaintenanceMode
	}
	return false
}

func (x *ClusterData) GetMultiClusterK8SDashboardEnabled() bool {
	if x != nil && x.MultiClusterK8SDashboardEnabled != nil {
		return *x.MultiClusterK8SDashboardEnabled
	}
	return false
}

func (x *ClusterData) GetAutoscalerConfig() *AutoScalerConfig {
	if x != nil {
		return x.AutoscalerConfig
	}
	return nil
}

func (x *ClusterData) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterData) GetCompatibility() *ClusterCompatibility {
	if x != nil {
		return x.Compatibility
	}
	return nil
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"` // Use data.namespace instead
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	NamespaceScoped                   bool                     `protobuf:"varint,5,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"` // Use data.namespace_scoped instead
	Data                              *ClusterData             `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	DeleteTime                        *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`
	ObservedGeneration                *uint64                  `protobuf:"varint,8,opt,name=observed_generation,json=observedGeneration,proto3,oneof" json:"observed_generation,omitempty"`
	CredentialRotationAllowed         *bool                    `protobuf:"varint,9,opt,name=credential_rotation_allowed,json=credentialRotationAllowed,proto3,oneof" json:"credential_rotation_allowed,omitempty"`
	AgentState                        *AgentState              `protobuf:"bytes,10,opt,name=agent_state,json=agentState,proto3,oneof" json:"agent_state,omitempty"`
	HealthStatus                      *v12.Status              `protobuf:"bytes,11,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	ReconciliationStatus              *v14.Status              `protobuf:"bytes,12,opt,name=reconciliation_status,json=reconciliationStatus,proto3" json:"reconciliation_status,omitempty"`
	ReadonlySettingsChangedGeneration *uint64                  `protobuf:"varint,13,opt,name=readonly_settings_changed_generation,json=readonlySettingsChangedGeneration,proto3,oneof" json:"readonly_settings_changed_generation,omitempty"`
	K8SStatus                         *ClusterKubernetesStatus `protobuf:"bytes,14,opt,name=k8s_status,json=k8sStatus,proto3,oneof" json:"k8s_status,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{154}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *Cluster) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *Cluster) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *Cluster) GetData() *ClusterData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Cluster) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Cluster) GetObservedGeneration() uint64 {
	if x != nil && x.ObservedGeneration != nil {
		return *x.ObservedGeneration
	}
	return 0
}

func (x *Cluster) GetCredentialRotationAllowed() bool {
	if x != nil && x.CredentialRotationAllowed != nil {
		return *x.CredentialRotationAllowed
	}
	return false
}

func (x *Cluster) GetAgentState() *AgentState {
	if x != nil {
		return x.AgentState
	}
	return nil
}

func (x *Cluster) GetHealthStatus() *v12.Status {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *Cluster) GetReconciliationStatus() *v14.Status {
	if x != nil {
		return x.ReconciliationStatus
	}
	return nil
}

func (x *Cluster) GetReadonlySettingsChangedGeneration() uint64 {
	if x != nil && x.ReadonlySettingsChangedGeneration != nil {
		return *x.ReadonlySettingsChangedGeneration
	}
	return 0
}

func (x *Cluster) GetK8SStatus() *ClusterKubernetesStatus {
	if x != nil {
		return x.K8SStatus
	}
	return nil
}

type ClusterKubernetesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubernetesVersion string `protobuf:"bytes,1,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	ApiResourceCount  uint32 `protobuf:"varint,2,opt,name=api_resource_count,json=apiResourceCount,proto3" json:"api_resource_count,omitempty"`
	ObjectCount       uint32 `protobuf:"varint,3,opt,name=object_count,json=objectCount,proto3" json:"object_count,omitempty"`
}

func (x *ClusterKubernetesStatus) Reset() {
	*x = ClusterKubernetesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterKubernetesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterKubernetesStatus) ProtoMessage() {}

func (x *ClusterKubernetesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterKubernetesStatus.ProtoReflect.Descriptor instead.
func (*ClusterKubernetesStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{155}
}

func (x *ClusterKubernetesStatus) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *ClusterKubernetesStatus) GetApiResourceCount() uint32 {
	if x != nil {
		return x.ApiResourceCount
	}
	return 0
}

func (x *ClusterKubernetesStatus) GetObjectCount() uint32 {
	if x != nil {
		return x.ObjectCount
	}
	return 0
}

type ApplyInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId           string             `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	IdType                   v1.Type            `protobuf:"varint,2,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id                       string             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Argocd                   *structpb.Struct   `protobuf:"bytes,4,opt,name=argocd,proto3" json:"argocd,omitempty"`
	ArgocdConfigmap          *structpb.Struct   `protobuf:"bytes,5,opt,name=argocd_configmap,json=argocdConfigmap,proto3" json:"argocd_configmap,omitempty"`
	ArgocdRbacConfigmap      *structpb.Struct   `protobuf:"bytes,6,opt,name=argocd_rbac_configmap,json=argocdRbacConfigmap,proto3" json:"argocd_rbac_configmap,omitempty"`
	ArgocdSecret             *structpb.Struct   `protobuf:"bytes,7,opt,name=argocd_secret,json=argocdSecret,proto3" json:"argocd_secret,omitempty"`
	NotificationsConfigmap   *structpb.Struct   `protobuf:"bytes,8,opt,name=notifications_configmap,json=notificationsConfigmap,proto3" json:"notifications_configmap,omitempty"`
	NotificationsSecret      *structpb.Struct   `protobuf:"bytes,9,opt,name=notifications_secret,json=notificationsSecret,proto3" json:"notifications_secret,omitempty"`
	ImageUpdaterConfigmap    *structpb.Struct   `protobuf:"bytes,10,opt,name=image_updater_configmap,json=imageUpdaterConfigmap,proto3" json:"image_updater_configmap,omitempty"`
	ImageUpdaterSshConfigmap *structpb.Struct   `protobuf:"bytes,11,opt,name=image_updater_ssh_configmap,json=imageUpdaterSshConfigmap,proto3" json:"image_updater_ssh_configmap,omitempty"`
	ImageUpdaterSecret       *structpb.Struct   `protobuf:"bytes,12,opt,name=image_updater_secret,json=imageUpdaterSecret,proto3" json:"image_updater_secret,omitempty"`
	Clusters                 []*structpb.Struct `protobuf:"bytes,13,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// prune_clusters is deprecated and will be ignored.
	// Use prune_resource_types instead.
	//
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	PruneClusters                 bool               `protobuf:"varint,14,opt,name=prune_clusters,json=pruneClusters,proto3" json:"prune_clusters,omitempty"`
	ArgocdKnownHostsConfigmap     *structpb.Struct   `protobuf:"bytes,15,opt,name=argocd_known_hosts_configmap,json=argocdKnownHostsConfigmap,proto3" json:"argocd_known_hosts_configmap,omitempty"`
	ArgocdTlsCertsConfigmap       *structpb.Struct   `protobuf:"bytes,16,opt,name=argocd_tls_certs_configmap,json=argocdTlsCertsConfigmap,proto3" json:"argocd_tls_certs_configmap,omitempty"`
	RepoCredentialSecrets         []*structpb.Struct `protobuf:"bytes,17,rep,name=repo_credential_secrets,json=repoCredentialSecrets,proto3" json:"repo_credential_secrets,omitempty"`
	RepoTemplateCredentialSecrets []*structpb.Struct `protobuf:"bytes,18,rep,name=repo_template_credential_secrets,json=repoTemplateCredentialSecrets,proto3" json:"repo_template_credential_secrets,omitempty"`
	// prune_repo_credential_secrets is deprecated and will be ignored.
	// Use prune_resource_types instead.
	//
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	PruneRepoCredentialSecrets bool                `protobuf:"varint,19,opt,name=prune_repo_credential_secrets,json=pruneRepoCredentialSecrets,proto3" json:"prune_repo_credential_secrets,omitempty"`
	ConfigManagementPlugins    []*structpb.Struct  `protobuf:"bytes,20,rep,name=config_management_plugins,json=configManagementPlugins,proto3" json:"config_management_plugins,omitempty"`
	PruneResourceTypes         []PruneResourceType `protobuf:"varint,21,rep,packed,name=prune_resource_types,json=pruneResourceTypes,proto3,enum=akuity.argocd.v1.PruneResourceType" json:"prune_resource_types,omitempty"`
	ApplicationSetSecret       *structpb.Struct    `protobuf:"bytes,22,opt,name=application_set_secret,json=applicationSetSecret,proto3" json:"application_set_secret,omitempty"`
	Applications               []*structpb.Struct  `protobuf:"bytes,23,rep,name=applications,proto3" json:"applications,omitempty"`
	ApplicationSets            []*structpb.Struct  `protobuf:"bytes,24,rep,name=application_sets,json=applicationSets,proto3" json:"application_sets,omitempty"`
	AppProjects                []*structpb.Struct  `protobuf:"bytes,25,rep,name=app_projects,json=appProjects,proto3" json:"app_projects,omitempty"`
	WorkspaceId                string              `protobuf:"bytes,26,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *ApplyInstanceRequest) Reset() {
	*x = ApplyInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyInstanceRequest) ProtoMessage() {}

func (x *ApplyInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyInstanceRequest.ProtoReflect.Descriptor instead.
func (*ApplyInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{156}
}

func (x *ApplyInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ApplyInstanceRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *ApplyInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplyInstanceRequest) GetArgocd() *structpb.Struct {
	if x != nil {
		return x.Argocd
	}
	return nil
}

func (x *ApplyInstanceRequest) GetArgocdConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetArgocdRbacConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdRbacConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetArgocdSecret() *structpb.Struct {
	if x != nil {
		return x.ArgocdSecret
	}
	return nil
}

func (x *ApplyInstanceRequest) GetNotificationsConfigmap() *structpb.Struct {
	if x != nil {
		return x.NotificationsConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetNotificationsSecret() *structpb.Struct {
	if x != nil {
		return x.NotificationsSecret
	}
	return nil
}

func (x *ApplyInstanceRequest) GetImageUpdaterConfigmap() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetImageUpdaterSshConfigmap() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterSshConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetImageUpdaterSecret() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterSecret
	}
	return nil
}

func (x *ApplyInstanceRequest) GetClusters() []*structpb.Struct {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *ApplyInstanceRequest) GetPruneClusters() bool {
	if x != nil {
		return x.PruneClusters
	}
	return false
}

func (x *ApplyInstanceRequest) GetArgocdKnownHostsConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdKnownHostsConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetArgocdTlsCertsConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdTlsCertsConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetRepoCredentialSecrets() []*structpb.Struct {
	if x != nil {
		return x.RepoCredentialSecrets
	}
	return nil
}

func (x *ApplyInstanceRequest) GetRepoTemplateCredentialSecrets() []*structpb.Struct {
	if x != nil {
		return x.RepoTemplateCredentialSecrets
	}
	return nil
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *ApplyInstanceRequest) GetPruneRepoCredentialSecrets() bool {
	if x != nil {
		return x.PruneRepoCredentialSecrets
	}
	return false
}

func (x *ApplyInstanceRequest) GetConfigManagementPlugins() []*structpb.Struct {
	if x != nil {
		return x.ConfigManagementPlugins
	}
	return nil
}

func (x *ApplyInstanceRequest) GetPruneResourceTypes() []PruneResourceType {
	if x != nil {
		return x.PruneResourceTypes
	}
	return nil
}

func (x *ApplyInstanceRequest) GetApplicationSetSecret() *structpb.Struct {
	if x != nil {
		return x.ApplicationSetSecret
	}
	return nil
}

func (x *ApplyInstanceRequest) GetApplications() []*structpb.Struct {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *ApplyInstanceRequest) GetApplicationSets() []*structpb.Struct {
	if x != nil {
		return x.ApplicationSets
	}
	return nil
}

func (x *ApplyInstanceRequest) GetAppProjects() []*structpb.Struct {
	if x != nil {
		return x.AppProjects
	}
	return nil
}

func (x *ApplyInstanceRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type ApplyInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplyInstanceResponse) Reset() {
	*x = ApplyInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyInstanceResponse) ProtoMessage() {}

func (x *ApplyInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyInstanceResponse.ProtoReflect.Descriptor instead.
func (*ApplyInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{157}
}

type ExportInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	IdType         v1.Type `protobuf:"varint,2,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id             string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string  `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *ExportInstanceRequest) Reset() {
	*x = ExportInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportInstanceRequest) ProtoMessage() {}

func (x *ExportInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportInstanceRequest.ProtoReflect.Descriptor instead.
func (*ExportInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{158}
}

func (x *ExportInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ExportInstanceRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *ExportInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExportInstanceRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type ExportInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Argocd                    *structpb.Struct   `protobuf:"bytes,1,opt,name=argocd,proto3" json:"argocd,omitempty"`
	ArgocdConfigmap           *structpb.Struct   `protobuf:"bytes,2,opt,name=argocd_configmap,json=argocdConfigmap,proto3" json:"argocd_configmap,omitempty"`
	ArgocdRbacConfigmap       *structpb.Struct   `protobuf:"bytes,3,opt,name=argocd_rbac_configmap,json=argocdRbacConfigmap,proto3" json:"argocd_rbac_configmap,omitempty"`
	NotificationsConfigmap    *structpb.Struct   `protobuf:"bytes,4,opt,name=notifications_configmap,json=notificationsConfigmap,proto3" json:"notifications_configmap,omitempty"`
	ImageUpdaterConfigmap     *structpb.Struct   `protobuf:"bytes,5,opt,name=image_updater_configmap,json=imageUpdaterConfigmap,proto3" json:"image_updater_configmap,omitempty"`
	ImageUpdaterSshConfigmap  *structpb.Struct   `protobuf:"bytes,6,opt,name=image_updater_ssh_configmap,json=imageUpdaterSshConfigmap,proto3" json:"image_updater_ssh_configmap,omitempty"`
	Clusters                  []*structpb.Struct `protobuf:"bytes,7,rep,name=clusters,proto3" json:"clusters,omitempty"`
	ArgocdKnownHostsConfigmap *structpb.Struct   `protobuf:"bytes,8,opt,name=argocd_known_hosts_configmap,json=argocdKnownHostsConfigmap,proto3" json:"argocd_known_hosts_configmap,omitempty"`
	ArgocdTlsCertsConfigmap   *structpb.Struct   `protobuf:"bytes,9,opt,name=argocd_tls_certs_configmap,json=argocdTlsCertsConfigmap,proto3" json:"argocd_tls_certs_configmap,omitempty"`
	ConfigManagementPlugins   []*structpb.Struct `protobuf:"bytes,10,rep,name=config_management_plugins,json=configManagementPlugins,proto3" json:"config_management_plugins,omitempty"`
	Applications              []*structpb.Struct `protobuf:"bytes,11,rep,name=applications,proto3" json:"applications,omitempty"`
	ApplicationSets           []*structpb.Struct `protobuf:"bytes,12,rep,name=application_sets,json=applicationSets,proto3" json:"application_sets,omitempty"`
	AppProjects               []*structpb.Struct `protobuf:"bytes,13,rep,name=app_projects,json=appProjects,proto3" json:"app_projects,omitempty"`
}

func (x *ExportInstanceResponse) Reset() {
	*x = ExportInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportInstanceResponse) ProtoMessage() {}

func (x *ExportInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportInstanceResponse.ProtoReflect.Descriptor instead.
func (*ExportInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{159}
}

func (x *ExportInstanceResponse) GetArgocd() *structpb.Struct {
	if x != nil {
		return x.Argocd
	}
	return nil
}

func (x *ExportInstanceResponse) GetArgocdConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetArgocdRbacConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdRbacConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetNotificationsConfigmap() *structpb.Struct {
	if x != nil {
		return x.NotificationsConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetImageUpdaterConfigmap() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetImageUpdaterSshConfigmap() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterSshConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetClusters() []*structpb.Struct {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ExportInstanceResponse) GetArgocdKnownHostsConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdKnownHostsConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetArgocdTlsCertsConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdTlsCertsConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetConfigManagementPlugins() []*structpb.Struct {
	if x != nil {
		return x.ConfigManagementPlugins
	}
	return nil
}

func (x *ExportInstanceResponse) GetApplications() []*structpb.Struct {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *ExportInstanceResponse) GetApplicationSets() []*structpb.Struct {
	if x != nil {
		return x.ApplicationSets
	}
	return nil
}

func (x *ExportInstanceResponse) GetAppProjects() []*structpb.Struct {
	if x != nil {
		return x.AppProjects
	}
	return nil
}

type GetInstanceClusterCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string             `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string             `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	LocationOrigin string             `protobuf:"bytes,4,opt,name=location_origin,json=locationOrigin,proto3" json:"location_origin,omitempty"`
	Offline        bool               `protobuf:"varint,5,opt,name=offline,proto3" json:"offline,omitempty"`
	Type           string             `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	SkipNamespace  *bool              `protobuf:"varint,7,opt,name=skip_namespace,json=skipNamespace,proto3,oneof" json:"skip_namespace,omitempty"`
	CommandFor     *ClusterCommandFor `protobuf:"varint,8,opt,name=command_for,json=commandFor,proto3,enum=akuity.argocd.v1.ClusterCommandFor,oneof" json:"command_for,omitempty"`
	WorkspaceId    string             `protobuf:"bytes,9,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceClusterCommandRequest) Reset() {
	*x = GetInstanceClusterCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterCommandRequest) ProtoMessage() {}

func (x *GetInstanceClusterCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterCommandRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterCommandRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{160}
}

func (x *GetInstanceClusterCommandRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetLocationOrigin() string {
	if x != nil {
		return x.LocationOrigin
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

func (x *GetInstanceClusterCommandRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetSkipNamespace() bool {
	if x != nil && x.SkipNamespace != nil {
		return *x.SkipNamespace
	}
	return false
}

func (x *GetInstanceClusterCommandRequest) GetCommandFor() ClusterCommandFor {
	if x != nil && x.CommandFor != nil {
		return *x.CommandFor
	}
	return ClusterCommandFor_CLUSTER_COMMAND_FOR_UNSPECIFIED
}

func (x *GetInstanceClusterCommandRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceClusterCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// variables used for command
	Variables map[string]string `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceClusterCommandResponse) Reset() {
	*x = GetInstanceClusterCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterCommandResponse) ProtoMessage() {}

func (x *GetInstanceClusterCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterCommandResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterCommandResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{161}
}

func (x *GetInstanceClusterCommandResponse) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetInstanceClusterCommandResponse) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

// ConfigManagementPlugin is defined based on argocd config management
// plugin:https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
type ConfigManagementPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled bool        `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Image   string      `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Spec    *PluginSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *ConfigManagementPlugin) Reset() {
	*x = ConfigManagementPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigManagementPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigManagementPlugin) ProtoMessage() {}

func (x *ConfigManagementPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigManagementPlugin.ProtoReflect.Descriptor instead.
func (*ConfigManagementPlugin) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{162}
}

func (x *ConfigManagementPlugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigManagementPlugin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConfigManagementPlugin) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ConfigManagementPlugin) GetSpec() *PluginSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type PluginSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Init       *Command    `protobuf:"bytes,2,opt,name=init,proto3" json:"init,omitempty"`
	Generate   *Command    `protobuf:"bytes,3,opt,name=generate,proto3" json:"generate,omitempty"`
	Discover   *Discover   `protobuf:"bytes,4,opt,name=discover,proto3" json:"discover,omitempty"`
	Parameters *Parameters `protobuf:"bytes,5,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Use camel case to match the ConfigManagementPlugin definition of argocd
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	PreserveFileMode bool `protobuf:"varint,6,opt,name=preserveFileMode,proto3" json:"preserveFileMode,omitempty"`
}

func (x *PluginSpec) Reset() {
	*x = PluginSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginSpec) ProtoMessage() {}

func (x *PluginSpec) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginSpec.ProtoReflect.Descriptor instead.
func (*PluginSpec) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{163}
}

func (x *PluginSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginSpec) GetInit() *Command {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *PluginSpec) GetGenerate() *Command {
	if x != nil {
		return x.Generate
	}
	return nil
}

func (x *PluginSpec) GetDiscover() *Discover {
	if x != nil {
		return x.Discover
	}
	return nil
}

func (x *PluginSpec) GetParameters() *Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *PluginSpec) GetPreserveFileMode() bool {
	if x != nil {
		return x.PreserveFileMode
	}
	return false
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Args    []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{164}
}

func (x *Command) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Command) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type Discover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Find *Find `protobuf:"bytes,1,opt,name=find,proto3" json:"find,omitempty"`
	// Use camel case to match the ConfigManagementPlugin definition of argocd
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *Discover) Reset() {
	*x = Discover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discover) ProtoMessage() {}

func (x *Discover) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discover.ProtoReflect.Descriptor instead.
func (*Discover) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{165}
}

func (x *Discover) GetFind() *Find {
	if x != nil {
		return x.Find
	}
	return nil
}

func (x *Discover) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type Find struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Args    []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Glob    string   `protobuf:"bytes,3,opt,name=glob,proto3" json:"glob,omitempty"`
}

func (x *Find) Reset() {
	*x = Find{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Find) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Find) ProtoMessage() {}

func (x *Find) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Find.ProtoReflect.Descriptor instead.
func (*Find) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{166}
}

func (x *Find) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Find) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Find) GetGlob() string {
	if x != nil {
		return x.Glob
	}
	return ""
}

type Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use camel case to match the ConfigManagementPlugin definition of argocd
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	Static  []*ParameterAnnouncement `protobuf:"bytes,1,rep,name=static,proto3" json:"static,omitempty"`
	Dynamic *Dynamic                 `protobuf:"bytes,2,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{167}
}

func (x *Parameters) GetStatic() []*ParameterAnnouncement {
	if x != nil {
		return x.Static
	}
	return nil
}

func (x *Parameters) GetDynamic() *Dynamic {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

type Dynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Args    []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Dynamic) Reset() {
	*x = Dynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dynamic) ProtoMessage() {}

func (x *Dynamic) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dynamic.ProtoReflect.Descriptor instead.
func (*Dynamic) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{168}
}

func (x *Dynamic) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Dynamic) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type ParameterAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name identifying a parameter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// title is a human-readable text of the parameter name.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// tooltip is a human-readable description of the parameter.
	Tooltip string `protobuf:"bytes,3,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	// required defines if this given parameter is mandatory.
	Required bool `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	// itemType determines the primitive data type represented by the parameter.
	// Parameters are always encoded as strings, but this field lets them be
	// interpreted as other primitive types. Use camel case to match the
	// ConfigManagementPlugin definition of argocd buf:lint:ignore
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	ItemType string `protobuf:"bytes,5,opt,name=itemType,proto3" json:"itemType,omitempty"`
	// collectionType is the type of value this parameter holds - either a single
	// value (a string) or a collection (array or map). If collectionType is set,
	// only the field with that type will be used. If collectionType is not set,
	// `string` is the default. If collectionType is set to an invalid value, a
	// validation error is thrown.
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	CollectionType string `protobuf:"bytes,6,opt,name=collectionType,proto3" json:"collectionType,omitempty"`
	// string is the default value of the parameter if the parameter is a string.
	String_ string `protobuf:"bytes,7,opt,name=string,proto3" json:"string,omitempty"`
	// array is the default value of the parameter if the parameter is an array.
	Array []string `protobuf:"bytes,8,rep,name=array,proto3" json:"array,omitempty"`
	// map is the default value of the parameter if the parameter is a map.
	Map map[string]string `protobuf:"bytes,9,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ParameterAnnouncement) Reset() {
	*x = ParameterAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterAnnouncement) ProtoMessage() {}

func (x *ParameterAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterAnnouncement.ProtoReflect.Descriptor instead.
func (*ParameterAnnouncement) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{169}
}

func (x *ParameterAnnouncement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterAnnouncement) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ParameterAnnouncement) GetTooltip() string {
	if x != nil {
		return x.Tooltip
	}
	return ""
}

func (x *ParameterAnnouncement) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ParameterAnnouncement) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *ParameterAnnouncement) GetCollectionType() string {
	if x != nil {
		return x.CollectionType
	}
	return ""
}

func (x *ParameterAnnouncement) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ParameterAnnouncement) GetArray() []string {
	if x != nil {
		return x.Array
	}
	return nil
}

func (x *ParameterAnnouncement) GetMap() map[string]string {
	if x != nil {
		return x.Map
	}
	return nil
}

type GetInstanceConfigManagementPluginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *GetInstanceConfigManagementPluginsRequest) Reset() {
	*x = GetInstanceConfigManagementPluginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceConfigManagementPluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceConfigManagementPluginsRequest) ProtoMessage() {}

func (x *GetInstanceConfigManagementPluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceConfigManagementPluginsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceConfigManagementPluginsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{170}
}

func (x *GetInstanceConfigManagementPluginsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceConfigManagementPluginsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceConfigManagementPluginsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GetInstanceConfigManagementPluginsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugins []*ConfigManagementPlugin `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (x *GetInstanceConfigManagementPluginsResponse) Reset() {
	*x = GetInstanceConfigManagementPluginsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceConfigManagementPluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceConfigManagementPluginsResponse) ProtoMessage() {}

func (x *GetInstanceConfigManagementPluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceConfigManagementPluginsResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceConfigManagementPluginsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{171}
}

func (x *GetInstanceConfigManagementPluginsResponse) GetPlugins() []*ConfigManagementPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type UpdateInstanceConfigManagementPluginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                    `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Plugins        []*ConfigManagementPlugin `protobuf:"bytes,3,rep,name=plugins,proto3" json:"plugins,omitempty"`
	WorkspaceId    string                    `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *UpdateInstanceConfigManagementPluginsRequest) Reset() {
	*x = UpdateInstanceConfigManagementPluginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceConfigManagementPluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceConfigManagementPluginsRequest) ProtoMessage() {}

func (x *UpdateInstanceConfigManagementPluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceConfigManagementPluginsRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceConfigManagementPluginsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{172}
}

func (x *UpdateInstanceConfigManagementPluginsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceConfigManagementPluginsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceConfigManagementPluginsRequest) GetPlugins() []*ConfigManagementPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *UpdateInstanceConfigManagementPluginsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateInstanceConfigManagementPluginsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceConfigManagementPluginsResponse) Reset() {
	*x = UpdateInstanceConfigManagementPluginsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceConfigManagementPluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceConfigManagementPluginsResponse) ProtoMessage() {}

func (x *UpdateInstanceConfigManagementPluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceConfigManagementPluginsResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceConfigManagementPluginsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{173}
}

type ListInstanceAddonReposRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Limit          *int32 `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset         *int32 `protobuf:"varint,5,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *ListInstanceAddonReposRequest) Reset() {
	*x = ListInstanceAddonReposRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceAddonReposRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceAddonReposRequest) ProtoMessage() {}

func (x *ListInstanceAddonReposRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceAddonReposRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceAddonReposRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{174}
}

func (x *ListInstanceAddonReposRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListInstanceAddonReposRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *ListInstanceAddonReposRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListInstanceAddonReposRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListInstanceAddonReposRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type ListInstanceAddonReposResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonRepos []*AddonRepo `protobuf:"bytes,1,rep,name=addon_repos,json=addonRepos,proto3" json:"addon_repos,omitempty"`
}

func (x *ListInstanceAddonReposResponse) Reset() {
	*x = ListInstanceAddonReposResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceAddonReposResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceAddonReposResponse) ProtoMessage() {}

func (x *ListInstanceAddonReposResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceAddonReposResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceAddonReposResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{175}
}

func (x *ListInstanceAddonReposResponse) GetAddonRepos() []*AddonRepo {
	if x != nil {
		return x.AddonRepos
	}
	return nil
}

type GetInstanceAddonRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceAddonRepoRequest) Reset() {
	*x = GetInstanceAddonRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceAddonRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceAddonRepoRequest) ProtoMessage() {}

func (x *GetInstanceAddonRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceAddonRepoRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceAddonRepoRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{176}
}

func (x *GetInstanceAddonRepoRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceAddonRepoRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *GetInstanceAddonRepoRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInstanceAddonRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceAddonRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonRepo *AddonRepo `protobuf:"bytes,1,opt,name=addon_repo,json=addonRepo,proto3" json:"addon_repo,omitempty"`
}

func (x *GetInstanceAddonRepoResponse) Reset() {
	*x = GetInstanceAddonRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceAddonRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceAddonRepoResponse) ProtoMessage() {}

func (x *GetInstanceAddonRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceAddonRepoResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceAddonRepoResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{177}
}

func (x *GetInstanceAddonRepoResponse) GetAddonRepo() *AddonRepo {
	if x != nil {
		return x.AddonRepo
	}
	return nil
}

type CreateInstanceAddonRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string    `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string    `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string    `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Spec           *RepoSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *CreateInstanceAddonRepoRequest) Reset() {
	*x = CreateInstanceAddonRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceAddonRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceAddonRepoRequest) ProtoMessage() {}

func (x *CreateInstanceAddonRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceAddonRepoRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceAddonRepoRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{178}
}

func (x *CreateInstanceAddonRepoRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateInstanceAddonRepoRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *CreateInstanceAddonRepoRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateInstanceAddonRepoRequest) GetSpec() *RepoSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CreateInstanceAddonRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonRepo *AddonRepo `protobuf:"bytes,1,opt,name=addon_repo,json=addonRepo,proto3" json:"addon_repo,omitempty"`
}

func (x *CreateInstanceAddonRepoResponse) Reset() {
	*x = CreateInstanceAddonRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceAddonRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceAddonRepoResponse) ProtoMessage() {}

func (x *CreateInstanceAddonRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceAddonRepoResponse.ProtoReflect.Descriptor instead.
func (*CreateInstanceAddonRepoResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{179}
}

func (x *CreateInstanceAddonRepoResponse) GetAddonRepo() *AddonRepo {
	if x != nil {
		return x.AddonRepo
	}
	return nil
}

type DeleteInstanceAddonRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteInstanceAddonRepoRequest) Reset() {
	*x = DeleteInstanceAddonRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceAddonRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceAddonRepoRequest) ProtoMessage() {}

func (x *DeleteInstanceAddonRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceAddonRepoRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceAddonRepoRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{180}
}

func (x *DeleteInstanceAddonRepoRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteInstanceAddonRepoRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *DeleteInstanceAddonRepoRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeleteInstanceAddonRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteInstanceAddonRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInstanceAddonRepoResponse) Reset() {
	*x = DeleteInstanceAddonRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceAddonRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceAddonRepoResponse) ProtoMessage() {}

func (x *DeleteInstanceAddonRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceAddonRepoResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceAddonRepoResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{181}
}

type RefreshInstanceAddonRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RefreshInstanceAddonRepoRequest) Reset() {
	*x = RefreshInstanceAddonRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshInstanceAddonRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshInstanceAddonRepoRequest) ProtoMessage() {}

func (x *RefreshInstanceAddonRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshInstanceAddonRepoRequest.ProtoReflect.Descriptor instead.
func (*RefreshInstanceAddonRepoRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{182}
}

func (x *RefreshInstanceAddonRepoRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *RefreshInstanceAddonRepoRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *RefreshInstanceAddonRepoRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RefreshInstanceAddonRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RefreshInstanceAddonRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonRepo *AddonRepo `protobuf:"bytes,1,opt,name=addon_repo,json=addonRepo,proto3" json:"addon_repo,omitempty"`
}

func (x *RefreshInstanceAddonRepoResponse) Reset() {
	*x = RefreshInstanceAddonRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshInstanceAddonRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshInstanceAddonRepoResponse) ProtoMessage() {}

func (x *RefreshInstanceAddonRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshInstanceAddonRepoResponse.ProtoReflect.Descriptor instead.
func (*RefreshInstanceAddonRepoResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{183}
}

func (x *RefreshInstanceAddonRepoResponse) GetAddonRepo() *AddonRepo {
	if x != nil {
		return x.AddonRepo
	}
	return nil
}

type AddonRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId string                 `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string                 `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Spec           *RepoSpec              `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Generation     uint32                 `protobuf:"varint,5,opt,name=generation,proto3" json:"generation,omitempty"`
	Status         *RepoStatus            `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	DeleteTime     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`
}

func (x *AddonRepo) Reset() {
	*x = AddonRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonRepo) ProtoMessage() {}

func (x *AddonRepo) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonRepo.ProtoReflect.Descriptor instead.
func (*AddonRepo) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{184}
}

func (x *AddonRepo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddonRepo) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *AddonRepo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AddonRepo) GetSpec() *RepoSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *AddonRepo) GetGeneration() uint32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *AddonRepo) GetStatus() *RepoStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddonRepo) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

type RepoSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoUrl  string `protobuf:"bytes,1,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`
	Revision string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *RepoSpec) Reset() {
	*x = RepoSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoSpec) ProtoMessage() {}

func (x *RepoSpec) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoSpec.ProtoReflect.Descriptor instead.
func (*RepoSpec) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{185}
}

func (x *RepoSpec) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *RepoSpec) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

type RepoStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSyncTime         string      `protobuf:"bytes,1,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	LastSyncCommit       string      `protobuf:"bytes,2,opt,name=last_sync_commit,json=lastSyncCommit,proto3" json:"last_sync_commit,omitempty"`
	AddonCount           uint32      `protobuf:"varint,3,opt,name=addon_count,json=addonCount,proto3" json:"addon_count,omitempty"`
	ProcessedGeneration  uint32      `protobuf:"varint,5,opt,name=processed_generation,json=processedGeneration,proto3" json:"processed_generation,omitempty"`
	ReconciliationStatus *v14.Status `protobuf:"bytes,6,opt,name=reconciliation_status,json=reconciliationStatus,proto3" json:"reconciliation_status,omitempty"`
}

func (x *RepoStatus) Reset() {
	*x = RepoStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoStatus) ProtoMessage() {}

func (x *RepoStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoStatus.ProtoReflect.Descriptor instead.
func (*RepoStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{186}
}

func (x *RepoStatus) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *RepoStatus) GetLastSyncCommit() string {
	if x != nil {
		return x.LastSyncCommit
	}
	return ""
}

func (x *RepoStatus) GetAddonCount() uint32 {
	if x != nil {
		return x.AddonCount
	}
	return 0
}

func (x *RepoStatus) GetProcessedGeneration() uint32 {
	if x != nil {
		return x.ProcessedGeneration
	}
	return 0
}

func (x *RepoStatus) GetReconciliationStatus() *v14.Status {
	if x != nil {
		return x.ReconciliationStatus
	}
	return nil
}

type GetInstanceAddonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	InstanceName   string `protobuf:"bytes,5,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
}

func (x *GetInstanceAddonRequest) Reset() {
	*x = GetInstanceAddonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceAddonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceAddonRequest) ProtoMessage() {}

func (x *GetInstanceAddonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceAddonRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceAddonRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{187}
}

func (x *GetInstanceAddonRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceAddonRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *GetInstanceAddonRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInstanceAddonRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceAddonRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type GetInstanceAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addon *Addon `protobuf:"bytes,1,opt,name=addon,proto3" json:"addon,omitempty"`
}

func (x *GetInstanceAddonResponse) Reset() {
	*x = GetInstanceAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceAddonResponse) ProtoMessage() {}

func (x *GetInstanceAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceAddonResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceAddonResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{188}
}

func (x *GetInstanceAddonResponse) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

type AddonFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortBy          *SortAddons       `protobuf:"varint,1,opt,name=sort_by,json=sortBy,proto3,enum=akuity.argocd.v1.SortAddons,oneof" json:"sort_by,omitempty"`
	Enabled         *bool             `protobuf:"varint,2,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Name            *string           `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	AddonType       *AddonType        `protobuf:"varint,4,opt,name=addon_type,json=addonType,proto3,enum=akuity.argocd.v1.AddonType,oneof" json:"addon_type,omitempty"`
	ClusterNameLike *string           `protobuf:"bytes,7,opt,name=cluster_name_like,json=clusterNameLike,proto3,oneof" json:"cluster_name_like,omitempty"`
	ClusterLabels   map[string]string `protobuf:"bytes,8,rep,name=cluster_labels,json=clusterLabels,proto3" json:"cluster_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddonFilter) Reset() {
	*x = AddonFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonFilter) ProtoMessage() {}

func (x *AddonFilter) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonFilter.ProtoReflect.Descriptor instead.
func (*AddonFilter) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{189}
}

func (x *AddonFilter) GetSortBy() SortAddons {
	if x != nil && x.SortBy != nil {
		return *x.SortBy
	}
	return SortAddons_SORT_ADDONS_UNSPECIFIED
}

func (x *AddonFilter) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *AddonFilter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AddonFilter) GetAddonType() AddonType {
	if x != nil && x.AddonType != nil {
		return *x.AddonType
	}
	return AddonType_ADDON_TYPE_UNSPECIFIED
}

func (x *AddonFilter) GetClusterNameLike() string {
	if x != nil && x.ClusterNameLike != nil {
		return *x.ClusterNameLike
	}
	return ""
}

func (x *AddonFilter) GetClusterLabels() map[string]string {
	if x != nil {
		return x.ClusterLabels
	}
	return nil
}

type ListInstanceAddonsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string       `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string       `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string       `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Limit          *int32       `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset         *int32       `protobuf:"varint,5,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	Filter         *AddonFilter `protobuf:"bytes,6,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *ListInstanceAddonsRequest) Reset() {
	*x = ListInstanceAddonsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceAddonsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceAddonsRequest) ProtoMessage() {}

func (x *ListInstanceAddonsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceAddonsRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceAddonsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{190}
}

func (x *ListInstanceAddonsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListInstanceAddonsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *ListInstanceAddonsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListInstanceAddonsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListInstanceAddonsRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListInstanceAddonsRequest) GetFilter() *AddonFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListInstanceAddonsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addons     []*Addon `protobuf:"bytes,1,rep,name=addons,proto3" json:"addons,omitempty"`
	TotalCount int32    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListInstanceAddonsResponse) Reset() {
	*x = ListInstanceAddonsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceAddonsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceAddonsResponse) ProtoMessage() {}

func (x *ListInstanceAddonsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceAddonsResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceAddonsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{191}
}

func (x *ListInstanceAddonsResponse) GetAddons() []*Addon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *ListInstanceAddonsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UpdateInstanceAddonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Addon          *Addon `protobuf:"bytes,5,opt,name=addon,proto3" json:"addon,omitempty"`
}

func (x *UpdateInstanceAddonRequest) Reset() {
	*x = UpdateInstanceAddonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceAddonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceAddonRequest) ProtoMessage() {}

func (x *UpdateInstanceAddonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceAddonRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceAddonRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{192}
}

func (x *UpdateInstanceAddonRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceAddonRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceAddonRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *UpdateInstanceAddonRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateInstanceAddonRequest) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

type UpdateInstanceAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addon *Addon `protobuf:"bytes,1,opt,name=addon,proto3" json:"addon,omitempty"`
}

func (x *UpdateInstanceAddonResponse) Reset() {
	*x = UpdateInstanceAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceAddonResponse) ProtoMessage() {}

func (x *UpdateInstanceAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceAddonResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceAddonResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{193}
}

func (x *UpdateInstanceAddonResponse) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

type PatchInstanceAddonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId string           `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string           `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string           `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Patch          *structpb.Struct `protobuf:"bytes,5,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *PatchInstanceAddonRequest) Reset() {
	*x = PatchInstanceAddonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceAddonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceAddonRequest) ProtoMessage() {}

func (x *PatchInstanceAddonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceAddonRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceAddonRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{194}
}

func (x *PatchInstanceAddonRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceAddonRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceAddonRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *PatchInstanceAddonRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *PatchInstanceAddonRequest) GetPatch() *structpb.Struct {
	if x != nil {
		return x.Patch
	}
	return nil
}

type PatchInstanceAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addon *Addon `protobuf:"bytes,1,opt,name=addon,proto3" json:"addon,omitempty"`
}

func (x *PatchInstanceAddonResponse) Reset() {
	*x = PatchInstanceAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceAddonResponse) ProtoMessage() {}

func (x *PatchInstanceAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceAddonResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceAddonResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{195}
}

func (x *PatchInstanceAddonResponse) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

type RefreshInstanceAddonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	InstanceId     string `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *RefreshInstanceAddonRequest) Reset() {
	*x = RefreshInstanceAddonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshInstanceAddonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshInstanceAddonRequest) ProtoMessage() {}

func (x *RefreshInstanceAddonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshInstanceAddonRequest.ProtoReflect.Descriptor instead.
func (*RefreshInstanceAddonRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{196}
}

func (x *RefreshInstanceAddonRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RefreshInstanceAddonRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *RefreshInstanceAddonRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *RefreshInstanceAddonRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type RefreshInstanceAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addon *Addon `protobuf:"bytes,1,opt,name=addon,proto3" json:"addon,omitempty"`
}

func (x *RefreshInstanceAddonResponse) Reset() {
	*x = RefreshInstanceAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshInstanceAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshInstanceAddonResponse) ProtoMessage() {}

func (x *RefreshInstanceAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshInstanceAddonResponse.ProtoReflect.Descriptor instead.
func (*RefreshInstanceAddonResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{197}
}

func (x *RefreshInstanceAddonResponse) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

type ManifestSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KustomizeSource *KustomizeSource `protobuf:"bytes,1,opt,name=kustomize_source,json=kustomizeSource,proto3,oneof" json:"kustomize_source,omitempty"`
	HelmSource      *HelmSource      `protobuf:"bytes,2,opt,name=helm_source,json=helmSource,proto3,oneof" json:"helm_source,omitempty"`
	Path            *string          `protobuf:"bytes,3,opt,name=path,proto3,oneof" json:"path,omitempty"`
}

func (x *ManifestSource) Reset() {
	*x = ManifestSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestSource) ProtoMessage() {}

func (x *ManifestSource) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestSource.ProtoReflect.Descriptor instead.
func (*ManifestSource) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{198}
}

func (x *ManifestSource) GetKustomizeSource() *KustomizeSource {
	if x != nil {
		return x.KustomizeSource
	}
	return nil
}

func (x *ManifestSource) GetHelmSource() *HelmSource {
	if x != nil {
		return x.HelmSource
	}
	return nil
}

func (x *ManifestSource) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type KustomizeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images     []*KustomizeImage     `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	HelmCharts []*KustomizeHelmChart `protobuf:"bytes,2,rep,name=helm_charts,json=helmCharts,proto3" json:"helm_charts,omitempty"`
}

func (x *KustomizeSource) Reset() {
	*x = KustomizeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KustomizeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KustomizeSource) ProtoMessage() {}

func (x *KustomizeSource) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KustomizeSource.ProtoReflect.Descriptor instead.
func (*KustomizeSource) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{199}
}

func (x *KustomizeSource) GetImages() []*KustomizeImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *KustomizeSource) GetHelmCharts() []*KustomizeHelmChart {
	if x != nil {
		return x.HelmCharts
	}
	return nil
}

type KustomizeImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	NewTag string `protobuf:"bytes,2,opt,name=newTag,proto3" json:"newTag,omitempty"`
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	NewName string `protobuf:"bytes,3,opt,name=newName,proto3" json:"newName,omitempty"`
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	TagSuffix string `protobuf:"bytes,4,opt,name=tagSuffix,proto3" json:"tagSuffix,omitempty"`
	Digest    string `protobuf:"bytes,5,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *KustomizeImage) Reset() {
	*x = KustomizeImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KustomizeImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KustomizeImage) ProtoMessage() {}

func (x *KustomizeImage) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KustomizeImage.ProtoReflect.Descriptor instead.
func (*KustomizeImage) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{200}
}

func (x *KustomizeImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KustomizeImage) GetNewTag() string {
	if x != nil {
		return x.NewTag
	}
	return ""
}

func (x *KustomizeImage) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *KustomizeImage) GetTagSuffix() string {
	if x != nil {
		return x.TagSuffix
	}
	return ""
}

func (x *KustomizeImage) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type KustomizeHelmChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *KustomizeHelmChart) Reset() {
	*x = KustomizeHelmChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KustomizeHelmChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KustomizeHelmChart) ProtoMessage() {}

func (x *KustomizeHelmChart) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KustomizeHelmChart.ProtoReflect.Descriptor instead.
func (*KustomizeHelmChart) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{201}
}

func (x *KustomizeHelmChart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KustomizeHelmChart) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type HelmSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values       map[string]string  `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Dependencies []*ChartDependency `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *HelmSource) Reset() {
	*x = HelmSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmSource) ProtoMessage() {}

func (x *HelmSource) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmSource.ProtoReflect.Descriptor instead.
func (*HelmSource) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{202}
}

func (x *HelmSource) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *HelmSource) GetDependencies() []*ChartDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type ClusterSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameFilters  []*Selector `protobuf:"bytes,1,rep,name=name_filters,json=nameFilters,proto3" json:"name_filters,omitempty"`
	LabelFilters []*Selector `protobuf:"bytes,2,rep,name=label_filters,json=labelFilters,proto3" json:"label_filters,omitempty"`
}

func (x *ClusterSelector) Reset() {
	*x = ClusterSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSelector) ProtoMessage() {}

func (x *ClusterSelector) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSelector.ProtoReflect.Descriptor instead.
func (*ClusterSelector) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{203}
}

func (x *ClusterSelector) GetNameFilters() []*Selector {
	if x != nil {
		return x.NameFilters
	}
	return nil
}

func (x *ClusterSelector) GetLabelFilters() []*Selector {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              *string          `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	SelectorOperator SelectorOperator `protobuf:"varint,2,opt,name=selector_operator,json=selectorOperator,proto3,enum=akuity.argocd.v1.SelectorOperator" json:"selector_operator,omitempty"`
	Values           []string         `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{204}
}

func (x *Selector) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Selector) GetSelectorOperator() SelectorOperator {
	if x != nil {
		return x.SelectorOperator
	}
	return SelectorOperator_SELECTOR_OPERATOR_UNSPECIFIED
}

func (x *Selector) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type AddonSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClusterOverrides    map[string]*ManifestSource `protobuf:"bytes,2,rep,name=cluster_overrides,json=clusterOverrides,proto3" json:"cluster_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnvOverrides        map[string]*ManifestSource `protobuf:"bytes,3,rep,name=env_overrides,json=envOverrides,proto3" json:"env_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AddonType           string                     `protobuf:"bytes,4,opt,name=addon_type,json=addonType,proto3" json:"addon_type,omitempty"`
	Enabled             bool                       `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClusterSelector     *ClusterSelector           `protobuf:"bytes,6,opt,name=cluster_selector,json=clusterSelector,proto3" json:"cluster_selector,omitempty"`
	AppTemplate         *AppTemplate               `protobuf:"bytes,7,opt,name=app_template,json=appTemplate,proto3" json:"app_template,omitempty"`
	DefaultManifest     *ManifestSource            `protobuf:"bytes,8,opt,name=default_manifest,json=defaultManifest,proto3" json:"default_manifest,omitempty"`
	HelmValues          *HelmValues                `protobuf:"bytes,9,opt,name=helm_values,json=helmValues,proto3,oneof" json:"helm_values,omitempty"`
	PatchCustomizations []*PatchCustomization      `protobuf:"bytes,10,rep,name=patch_customizations,json=patchCustomizations,proto3" json:"patch_customizations,omitempty"`
}

func (x *AddonSpec) Reset() {
	*x = AddonSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonSpec) ProtoMessage() {}

func (x *AddonSpec) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonSpec.ProtoReflect.Descriptor instead.
func (*AddonSpec) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{205}
}

func (x *AddonSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddonSpec) GetClusterOverrides() map[string]*ManifestSource {
	if x != nil {
		return x.ClusterOverrides
	}
	return nil
}

func (x *AddonSpec) GetEnvOverrides() map[string]*ManifestSource {
	if x != nil {
		return x.EnvOverrides
	}
	return nil
}

func (x *AddonSpec) GetAddonType() string {
	if x != nil {
		return x.AddonType
	}
	return ""
}

func (x *AddonSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AddonSpec) GetClusterSelector() *ClusterSelector {
	if x != nil {
		return x.ClusterSelector
	}
	return nil
}

func (x *AddonSpec) GetAppTemplate() *AppTemplate {
	if x != nil {
		return x.AppTemplate
	}
	return nil
}

func (x *AddonSpec) GetDefaultManifest() *ManifestSource {
	if x != nil {
		return x.DefaultManifest
	}
	return nil
}

func (x *AddonSpec) GetHelmValues() *HelmValues {
	if x != nil {
		return x.HelmValues
	}
	return nil
}

func (x *AddonSpec) GetPatchCustomizations() []*PatchCustomization {
	if x != nil {
		return x.PatchCustomizations
	}
	return nil
}

type PatchCustomization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterSelector *ClusterSelector `protobuf:"bytes,1,opt,name=cluster_selector,json=clusterSelector,proto3" json:"cluster_selector,omitempty"`
	Patch           *structpb.Struct `protobuf:"bytes,2,opt,name=patch,proto3" json:"patch,omitempty"`
	Description     string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PatchCustomization) Reset() {
	*x = PatchCustomization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCustomization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCustomization) ProtoMessage() {}

func (x *PatchCustomization) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCustomization.ProtoReflect.Descriptor instead.
func (*PatchCustomization) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{206}
}

func (x *PatchCustomization) GetClusterSelector() *ClusterSelector {
	if x != nil {
		return x.ClusterSelector
	}
	return nil
}

func (x *PatchCustomization) GetPatch() *structpb.Struct {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *PatchCustomization) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type HelmValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YamlPaths []string `protobuf:"bytes,1,rep,name=yaml_paths,json=yamlPaths,proto3" json:"yaml_paths,omitempty"`
}

func (x *HelmValues) Reset() {
	*x = HelmValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmValues) ProtoMessage() {}

func (x *HelmValues) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmValues.ProtoReflect.Descriptor instead.
func (*HelmValues) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{207}
}

func (x *HelmValues) GetYamlPaths() []string {
	if x != nil {
		return x.YamlPaths
	}
	return nil
}

type ChartDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version        string  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Repository     string  `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	RepositoryName *string `protobuf:"bytes,4,opt,name=repository_name,json=repositoryName,proto3,oneof" json:"repository_name,omitempty"`
}

func (x *ChartDependency) Reset() {
	*x = ChartDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDependency) ProtoMessage() {}

func (x *ChartDependency) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDependency.ProtoReflect.Descriptor instead.
func (*ChartDependency) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{208}
}

func (x *ChartDependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChartDependency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ChartDependency) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ChartDependency) GetRepositoryName() string {
	if x != nil && x.RepositoryName != nil {
		return *x.RepositoryName
	}
	return ""
}

type AppCreationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnConflict OnConflictAction `protobuf:"varint,1,opt,name=on_conflict,json=onConflict,proto3,enum=akuity.argocd.v1.OnConflictAction" json:"on_conflict,omitempty"`
}

func (x *AppCreationOptions) Reset() {
	*x = AppCreationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCreationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCreationOptions) ProtoMessage() {}

func (x *AppCreationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCreationOptions.ProtoReflect.Descriptor instead.
func (*AppCreationOptions) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{209}
}

func (x *AppCreationOptions) GetOnConflict() OnConflictAction {
	if x != nil {
		return x.OnConflict
	}
	return OnConflictAction_ON_CONFLICT_ACTION_UNSPECIFIED
}

type AppDeletionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonCascade bool `protobuf:"varint,1,opt,name=non_cascade,json=nonCascade,proto3" json:"non_cascade,omitempty"`
}

func (x *AppDeletionOptions) Reset() {
	*x = AppDeletionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppDeletionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeletionOptions) ProtoMessage() {}

func (x *AppDeletionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeletionOptions.ProtoReflect.Descriptor instead.
func (*AppDeletionOptions) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{210}
}

func (x *AppDeletionOptions) GetNonCascade() bool {
	if x != nil {
		return x.NonCascade
	}
	return false
}

type AppSyncOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoSync        bool     `protobuf:"varint,1,opt,name=auto_sync,json=autoSync,proto3" json:"auto_sync,omitempty"`
	AutoHeal        bool     `protobuf:"varint,2,opt,name=auto_heal,json=autoHeal,proto3" json:"auto_heal,omitempty"`
	PruneResources  bool     `protobuf:"varint,3,opt,name=prune_resources,json=pruneResources,proto3" json:"prune_resources,omitempty"`
	SyncOptionsList []string `protobuf:"bytes,4,rep,name=sync_options_list,json=syncOptionsList,proto3" json:"sync_options_list,omitempty"`
}

func (x *AppSyncOptions) Reset() {
	*x = AppSyncOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSyncOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSyncOptions) ProtoMessage() {}

func (x *AppSyncOptions) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSyncOptions.ProtoReflect.Descriptor instead.
func (*AppSyncOptions) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{211}
}

func (x *AppSyncOptions) GetAutoSync() bool {
	if x != nil {
		return x.AutoSync
	}
	return false
}

func (x *AppSyncOptions) GetAutoHeal() bool {
	if x != nil {
		return x.AutoHeal
	}
	return false
}

func (x *AppSyncOptions) GetPruneResources() bool {
	if x != nil {
		return x.PruneResources
	}
	return false
}

func (x *AppSyncOptions) GetSyncOptionsList() []string {
	if x != nil {
		return x.SyncOptionsList
	}
	return nil
}

type AppTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameTemplate      string              `protobuf:"bytes,1,opt,name=name_template,json=nameTemplate,proto3" json:"name_template,omitempty"`
	CreationOptions   *AppCreationOptions `protobuf:"bytes,2,opt,name=creation_options,json=creationOptions,proto3" json:"creation_options,omitempty"`
	DeletionOptions   *AppDeletionOptions `protobuf:"bytes,3,opt,name=deletion_options,json=deletionOptions,proto3" json:"deletion_options,omitempty"`
	SyncOptions       *AppSyncOptions     `protobuf:"bytes,4,opt,name=sync_options,json=syncOptions,proto3" json:"sync_options,omitempty"`
	ProjectTemplate   string              `protobuf:"bytes,5,opt,name=project_template,json=projectTemplate,proto3" json:"project_template,omitempty"`
	NamespaceTemplate string              `protobuf:"bytes,6,opt,name=namespace_template,json=namespaceTemplate,proto3" json:"namespace_template,omitempty"`
	HelmOptions       *HelmOptions        `protobuf:"bytes,7,opt,name=helm_options,json=helmOptions,proto3,oneof" json:"helm_options,omitempty"`
	KustomizeOptions  *KustomizeOptions   `protobuf:"bytes,8,opt,name=kustomize_options,json=kustomizeOptions,proto3,oneof" json:"kustomize_options,omitempty"`
}

func (x *AppTemplate) Reset() {
	*x = AppTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTemplate) ProtoMessage() {}

func (x *AppTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTemplate.ProtoReflect.Descriptor instead.
func (*AppTemplate) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{212}
}

func (x *AppTemplate) GetNameTemplate() string {
	if x != nil {
		return x.NameTemplate
	}
	return ""
}

func (x *AppTemplate) GetCreationOptions() *AppCreationOptions {
	if x != nil {
		return x.CreationOptions
	}
	return nil
}

func (x *AppTemplate) GetDeletionOptions() *AppDeletionOptions {
	if x != nil {
		return x.DeletionOptions
	}
	return nil
}

func (x *AppTemplate) GetSyncOptions() *AppSyncOptions {
	if x != nil {
		return x.SyncOptions
	}
	return nil
}

func (x *AppTemplate) GetProjectTemplate() string {
	if x != nil {
		return x.ProjectTemplate
	}
	return ""
}

func (x *AppTemplate) GetNamespaceTemplate() string {
	if x != nil {
		return x.NamespaceTemplate
	}
	return ""
}

func (x *AppTemplate) GetHelmOptions() *HelmOptions {
	if x != nil {
		return x.HelmOptions
	}
	return nil
}

func (x *AppTemplate) GetKustomizeOptions() *KustomizeOptions {
	if x != nil {
		return x.KustomizeOptions
	}
	return nil
}

type HelmOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseNameTemplate string `protobuf:"bytes,1,opt,name=release_name_template,json=releaseNameTemplate,proto3" json:"release_name_template,omitempty"`
	PassCredentials     bool   `protobuf:"varint,2,opt,name=pass_credentials,json=passCredentials,proto3" json:"pass_credentials,omitempty"`
	SkipCrds            bool   `protobuf:"varint,3,opt,name=skip_crds,json=skipCrds,proto3" json:"skip_crds,omitempty"`
}

func (x *HelmOptions) Reset() {
	*x = HelmOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmOptions) ProtoMessage() {}

func (x *HelmOptions) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmOptions.ProtoReflect.Descriptor instead.
func (*HelmOptions) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{213}
}

func (x *HelmOptions) GetReleaseNameTemplate() string {
	if x != nil {
		return x.ReleaseNameTemplate
	}
	return ""
}

func (x *HelmOptions) GetPassCredentials() bool {
	if x != nil {
		return x.PassCredentials
	}
	return false
}

func (x *HelmOptions) GetSkipCrds() bool {
	if x != nil {
		return x.SkipCrds
	}
	return false
}

type KustomizeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamePrefixTemplate string `protobuf:"bytes,1,opt,name=name_prefix_template,json=namePrefixTemplate,proto3" json:"name_prefix_template,omitempty"`
	NameSuffixTemplate string `protobuf:"bytes,2,opt,name=name_suffix_template,json=nameSuffixTemplate,proto3" json:"name_suffix_template,omitempty"`
}

func (x *KustomizeOptions) Reset() {
	*x = KustomizeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KustomizeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KustomizeOptions) ProtoMessage() {}

func (x *KustomizeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KustomizeOptions.ProtoReflect.Descriptor instead.
func (*KustomizeOptions) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{214}
}

func (x *KustomizeOptions) GetNamePrefixTemplate() string {
	if x != nil {
		return x.NamePrefixTemplate
	}
	return ""
}

func (x *KustomizeOptions) GetNameSuffixTemplate() string {
	if x != nil {
		return x.NameSuffixTemplate
	}
	return ""
}

type StatusSourceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	Cancelled      bool                   `protobuf:"varint,2,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
	Sources        *SourceInfo            `protobuf:"bytes,3,opt,name=sources,proto3" json:"sources,omitempty"`
}

func (x *StatusSourceUpdate) Reset() {
	*x = StatusSourceUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusSourceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusSourceUpdate) ProtoMessage() {}

func (x *StatusSourceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusSourceUpdate.ProtoReflect.Descriptor instead.
func (*StatusSourceUpdate) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{215}
}

func (x *StatusSourceUpdate) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *StatusSourceUpdate) GetCancelled() bool {
	if x != nil {
		return x.Cancelled
	}
	return false
}

func (x *StatusSourceUpdate) GetSources() *SourceInfo {
	if x != nil {
		return x.Sources
	}
	return nil
}

type SourceUpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	CompletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=completed_timestamp,json=completedTimestamp,proto3" json:"completed_timestamp,omitempty"`
	Attempts           int32                  `protobuf:"varint,3,opt,name=attempts,proto3" json:"attempts,omitempty"`
	Cancelled          bool                   `protobuf:"varint,4,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
	Error              string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	CommitSha          string                 `protobuf:"bytes,6,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Changes            *structpb.Struct       `protobuf:"bytes,7,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *SourceUpdateResult) Reset() {
	*x = SourceUpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceUpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceUpdateResult) ProtoMessage() {}

func (x *SourceUpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceUpdateResult.ProtoReflect.Descriptor instead.
func (*SourceUpdateResult) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{216}
}

func (x *SourceUpdateResult) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *SourceUpdateResult) GetCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTimestamp
	}
	return nil
}

func (x *SourceUpdateResult) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *SourceUpdateResult) GetCancelled() bool {
	if x != nil {
		return x.Cancelled
	}
	return false
}

func (x *SourceUpdateResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SourceUpdateResult) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *SourceUpdateResult) GetChanges() *structpb.Struct {
	if x != nil {
		return x.Changes
	}
	return nil
}

type SourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultManifest  *ManifestSource            `protobuf:"bytes,1,opt,name=default_manifest,json=defaultManifest,proto3,oneof" json:"default_manifest,omitempty"`
	ClusterOverrides map[string]*ManifestSource `protobuf:"bytes,2,rep,name=cluster_overrides,json=clusterOverrides,proto3" json:"cluster_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnvOverrides     map[string]*ManifestSource `protobuf:"bytes,3,rep,name=env_overrides,json=envOverrides,proto3" json:"env_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceInfo) Reset() {
	*x = SourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInfo) ProtoMessage() {}

func (x *SourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInfo.ProtoReflect.Descriptor instead.
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{217}
}

func (x *SourceInfo) GetDefaultManifest() *ManifestSource {
	if x != nil {
		return x.DefaultManifest
	}
	return nil
}

func (x *SourceInfo) GetClusterOverrides() map[string]*ManifestSource {
	if x != nil {
		return x.ClusterOverrides
	}
	return nil
}

func (x *SourceInfo) GetEnvOverrides() map[string]*ManifestSource {
	if x != nil {
		return x.EnvOverrides
	}
	return nil
}

type AddonStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSyncTime           string                  `protobuf:"bytes,1,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	LastSyncCommit         string                  `protobuf:"bytes,2,opt,name=last_sync_commit,json=lastSyncCommit,proto3" json:"last_sync_commit,omitempty"`
	ClusterCount           uint32                  `protobuf:"varint,3,opt,name=cluster_count,json=clusterCount,proto3" json:"cluster_count,omitempty"`
	ReconciliationStatus   *v14.Status             `protobuf:"bytes,4,opt,name=reconciliation_status,json=reconciliationStatus,proto3" json:"reconciliation_status,omitempty"`
	ProcessedGeneration    uint32                  `protobuf:"varint,5,opt,name=processed_generation,json=processedGeneration,proto3" json:"processed_generation,omitempty"`
	Health                 *ApplicationsHealth     `protobuf:"bytes,6,opt,name=health,proto3" json:"health,omitempty"`
	SyncStatus             *ApplicationsSyncStatus `protobuf:"bytes,7,opt,name=sync_status,json=syncStatus,proto3" json:"sync_status,omitempty"`
	LastSourceUpdateStatus *SourceUpdateResult     `protobuf:"bytes,10,opt,name=last_source_update_status,json=lastSourceUpdateStatus,proto3" json:"last_source_update_status,omitempty"`
}

func (x *AddonStatus) Reset() {
	*x = AddonStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonStatus) ProtoMessage() {}

func (x *AddonStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonStatus.ProtoReflect.Descriptor instead.
func (*AddonStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{218}
}

func (x *AddonStatus) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *AddonStatus) GetLastSyncCommit() string {
	if x != nil {
		return x.LastSyncCommit
	}
	return ""
}

func (x *AddonStatus) GetClusterCount() uint32 {
	if x != nil {
		return x.ClusterCount
	}
	return 0
}

func (x *AddonStatus) GetReconciliationStatus() *v14.Status {
	if x != nil {
		return x.ReconciliationStatus
	}
	return nil
}

func (x *AddonStatus) GetProcessedGeneration() uint32 {
	if x != nil {
		return x.ProcessedGeneration
	}
	return 0
}

func (x *AddonStatus) GetHealth() *ApplicationsHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *AddonStatus) GetSyncStatus() *ApplicationsSyncStatus {
	if x != nil {
		return x.SyncStatus
	}
	return nil
}

func (x *AddonStatus) GetLastSourceUpdateStatus() *SourceUpdateResult {
	if x != nil {
		return x.LastSourceUpdateStatus
	}
	return nil
}

type AddonCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Reason             string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	Status             bool                   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddonCondition) Reset() {
	*x = AddonCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonCondition) ProtoMessage() {}

func (x *AddonCondition) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonCondition.ProtoReflect.Descriptor instead.
func (*AddonCondition) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{219}
}

func (x *AddonCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddonCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AddonCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *AddonCondition) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type ClusterAddonStatusOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision    string   `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Prune       bool     `protobuf:"varint,2,opt,name=prune,proto3" json:"prune,omitempty"`
	SyncOptions []string `protobuf:"bytes,3,rep,name=sync_options,json=syncOptions,proto3" json:"sync_options,omitempty"`
	Initiator   string   `protobuf:"bytes,4,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *ClusterAddonStatusOperation) Reset() {
	*x = ClusterAddonStatusOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAddonStatusOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAddonStatusOperation) ProtoMessage() {}

func (x *ClusterAddonStatusOperation) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAddonStatusOperation.ProtoReflect.Descriptor instead.
func (*ClusterAddonStatusOperation) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{220}
}

func (x *ClusterAddonStatusOperation) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ClusterAddonStatusOperation) GetPrune() bool {
	if x != nil {
		return x.Prune
	}
	return false
}

func (x *ClusterAddonStatusOperation) GetSyncOptions() []string {
	if x != nil {
		return x.SyncOptions
	}
	return nil
}

func (x *ClusterAddonStatusOperation) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

type StatusOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterAddonStatusOperation *ClusterAddonStatusOperation `protobuf:"bytes,1,opt,name=cluster_addon_status_operation,json=clusterAddonStatusOperation,proto3" json:"cluster_addon_status_operation,omitempty"`
	ClusterSelector             *ClusterSelector             `protobuf:"bytes,2,opt,name=cluster_selector,json=clusterSelector,proto3" json:"cluster_selector,omitempty"`
}

func (x *StatusOperation) Reset() {
	*x = StatusOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusOperation) ProtoMessage() {}

func (x *StatusOperation) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusOperation.ProtoReflect.Descriptor instead.
func (*StatusOperation) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{221}
}

func (x *StatusOperation) GetClusterAddonStatusOperation() *ClusterAddonStatusOperation {
	if x != nil {
		return x.ClusterAddonStatusOperation
	}
	return nil
}

func (x *StatusOperation) GetClusterSelector() *ClusterSelector {
	if x != nil {
		return x.ClusterSelector
	}
	return nil
}

type Addon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId     string                 `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId         string                 `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	RepoId             string                 `protobuf:"bytes,4,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	Spec               *AddonSpec             `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	StatusOperation    *StatusOperation       `protobuf:"bytes,6,opt,name=status_operation,json=statusOperation,proto3" json:"status_operation,omitempty"`
	Generation         uint32                 `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty"`
	Status             *AddonStatus           `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	DeleteTime         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`
	StatusSourceUpdate *StatusSourceUpdate    `protobuf:"bytes,11,opt,name=status_source_update,json=statusSourceUpdate,proto3" json:"status_source_update,omitempty"`
	WorkspaceId        string                 `protobuf:"bytes,12,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *Addon) Reset() {
	*x = Addon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addon) ProtoMessage() {}

func (x *Addon) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addon.ProtoReflect.Descriptor instead.
func (*Addon) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{222}
}

func (x *Addon) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Addon) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Addon) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Addon) GetRepoId() string {
	if x != nil {
		return x.RepoId
	}
	return ""
}

func (x *Addon) GetSpec() *AddonSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Addon) GetStatusOperation() *StatusOperation {
	if x != nil {
		return x.StatusOperation
	}
	return nil
}

func (x *Addon) GetGeneration() uint32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Addon) GetStatus() *AddonStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Addon) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Addon) GetStatusSourceUpdate() *StatusSourceUpdate {
	if x != nil {
		return x.StatusSourceUpdate
	}
	return nil
}

func (x *Addon) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type AddonMarketplaceInstallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                         `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string                         `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkspaceId    string                         `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Config         *AddonMarketplaceInstallConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *AddonMarketplaceInstallRequest) Reset() {
	*x = AddonMarketplaceInstallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonMarketplaceInstallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonMarketplaceInstallRequest) ProtoMessage() {}

func (x *AddonMarketplaceInstallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonMarketplaceInstallRequest.ProtoReflect.Descriptor instead.
func (*AddonMarketplaceInstallRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{223}
}

func (x *AddonMarketplaceInstallRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *AddonMarketplaceInstallRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AddonMarketplaceInstallRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *AddonMarketplaceInstallRequest) GetConfig() *AddonMarketplaceInstallConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type AddonMarketplaceInstallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonInstall *AddonMarketplaceInstall `protobuf:"bytes,1,opt,name=addon_install,json=addonInstall,proto3" json:"addon_install,omitempty"`
}

func (x *AddonMarketplaceInstallResponse) Reset() {
	*x = AddonMarketplaceInstallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonMarketplaceInstallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonMarketplaceInstallResponse) ProtoMessage() {}

func (x *AddonMarketplaceInstallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonMarketplaceInstallResponse.ProtoReflect.Descriptor instead.
func (*AddonMarketplaceInstallResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{224}
}

func (x *AddonMarketplaceInstallResponse) GetAddonInstall() *AddonMarketplaceInstall {
	if x != nil {
		return x.AddonInstall
	}
	return nil
}

type UpdateAddonMarketplaceInstallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string             `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string             `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkspaceId    string             `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Id             string             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Refresh        bool               `protobuf:"varint,5,opt,name=refresh,proto3" json:"refresh,omitempty"`
	Dependencies   []*ChartDependency `protobuf:"bytes,6,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	Force          bool               `protobuf:"varint,7,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *UpdateAddonMarketplaceInstallRequest) Reset() {
	*x = UpdateAddonMarketplaceInstallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddonMarketplaceInstallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddonMarketplaceInstallRequest) ProtoMessage() {}

func (x *UpdateAddonMarketplaceInstallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddonMarketplaceInstallRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddonMarketplaceInstallRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{225}
}

func (x *UpdateAddonMarketplaceInstallRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateAddonMarketplaceInstallRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateAddonMarketplaceInstallRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *UpdateAddonMarketplaceInstallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAddonMarketplaceInstallRequest) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *UpdateAddonMarketplaceInstallRequest) GetDependencies() []*ChartDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *UpdateAddonMarketplaceInstallRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type UpdateAddonMarketplaceInstallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonInstall *AddonMarketplaceInstall `protobuf:"bytes,1,opt,name=addon_install,json=addonInstall,proto3" json:"addon_install,omitempty"`
}

func (x *UpdateAddonMarketplaceInstallResponse) Reset() {
	*x = UpdateAddonMarketplaceInstallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddonMarketplaceInstallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddonMarketplaceInstallResponse) ProtoMessage() {}

func (x *UpdateAddonMarketplaceInstallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddonMarketplaceInstallResponse.ProtoReflect.Descriptor instead.
func (*UpdateAddonMarketplaceInstallResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{226}
}

func (x *UpdateAddonMarketplaceInstallResponse) GetAddonInstall() *AddonMarketplaceInstall {
	if x != nil {
		return x.AddonInstall
	}
	return nil
}

type ListAddonMarketplaceInstallsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                         `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string                         `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkspaceId    string                         `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Filter         *AddonMarketplaceInstallFilter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit          *uint32                        `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset         *uint32                        `protobuf:"varint,6,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *ListAddonMarketplaceInstallsRequest) Reset() {
	*x = ListAddonMarketplaceInstallsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddonMarketplaceInstallsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddonMarketplaceInstallsRequest) ProtoMessage() {}

func (x *ListAddonMarketplaceInstallsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddonMarketplaceInstallsRequest.ProtoReflect.Descriptor instead.
func (*ListAddonMarketplaceInstallsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{227}
}

func (x *ListAddonMarketplaceInstallsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListAddonMarketplaceInstallsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListAddonMarketplaceInstallsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *ListAddonMarketplaceInstallsRequest) GetFilter() *AddonMarketplaceInstallFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListAddonMarketplaceInstallsRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListAddonMarketplaceInstallsRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type WatchAddonMarketplaceInstallsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *WatchAddonMarketplaceInstallsRequest) Reset() {
	*x = WatchAddonMarketplaceInstallsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchAddonMarketplaceInstallsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchAddonMarketplaceInstallsRequest) ProtoMessage() {}

func (x *WatchAddonMarketplaceInstallsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchAddonMarketplaceInstallsRequest.ProtoReflect.Descriptor instead.
func (*WatchAddonMarketplaceInstallsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{228}
}

func (x *WatchAddonMarketplaceInstallsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *WatchAddonMarketplaceInstallsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *WatchAddonMarketplaceInstallsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type WatchAddonMarketplaceInstallsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *AddonMarketplaceInstall `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Type v13.EventType            `protobuf:"varint,2,opt,name=type,proto3,enum=akuity.types.events.v1.EventType" json:"type,omitempty"`
}

func (x *WatchAddonMarketplaceInstallsResponse) Reset() {
	*x = WatchAddonMarketplaceInstallsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchAddonMarketplaceInstallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchAddonMarketplaceInstallsResponse) ProtoMessage() {}

func (x *WatchAddonMarketplaceInstallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchAddonMarketplaceInstallsResponse.ProtoReflect.Descriptor instead.
func (*WatchAddonMarketplaceInstallsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{229}
}

func (x *WatchAddonMarketplaceInstallsResponse) GetItem() *AddonMarketplaceInstall {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *WatchAddonMarketplaceInstallsResponse) GetType() v13.EventType {
	if x != nil {
		return x.Type
	}
	return v13.EventType(0)
}

type AddonMarketplaceInstallFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *string            `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	RepoUrl            *string            `protobuf:"bytes,4,opt,name=repo_url,json=repoUrl,proto3,oneof" json:"repo_url,omitempty"`
	Revision           *string            `protobuf:"bytes,5,opt,name=revision,proto3,oneof" json:"revision,omitempty"`
	AddonName          *string            `protobuf:"bytes,6,opt,name=addon_name,json=addonName,proto3,oneof" json:"addon_name,omitempty"`
	Dependency         []*ChartDependency `protobuf:"bytes,7,rep,name=dependency,proto3" json:"dependency,omitempty"`
	ChartDepOrRelation bool               `protobuf:"varint,8,opt,name=chart_dep_or_relation,json=chartDepOrRelation,proto3" json:"chart_dep_or_relation,omitempty"`
}

func (x *AddonMarketplaceInstallFilter) Reset() {
	*x = AddonMarketplaceInstallFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonMarketplaceInstallFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonMarketplaceInstallFilter) ProtoMessage() {}

func (x *AddonMarketplaceInstallFilter) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonMarketplaceInstallFilter.ProtoReflect.Descriptor instead.
func (*AddonMarketplaceInstallFilter) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{230}
}

func (x *AddonMarketplaceInstallFilter) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AddonMarketplaceInstallFilter) GetRepoUrl() string {
	if x != nil && x.RepoUrl != nil {
		return *x.RepoUrl
	}
	return ""
}

func (x *AddonMarketplaceInstallFilter) GetRevision() string {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return ""
}

func (x *AddonMarketplaceInstallFilter) GetAddonName() string {
	if x != nil && x.AddonName != nil {
		return *x.AddonName
	}
	return ""
}

func (x *AddonMarketplaceInstallFilter) GetDependency() []*ChartDependency {
	if x != nil {
		return x.Dependency
	}
	return nil
}

func (x *AddonMarketplaceInstallFilter) GetChartDepOrRelation() bool {
	if x != nil {
		return x.ChartDepOrRelation
	}
	return false
}

type ListAddonMarketplaceInstallsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonInstalls []*AddonMarketplaceInstall `protobuf:"bytes,1,rep,name=addon_installs,json=addonInstalls,proto3" json:"addon_installs,omitempty"`
	TotalCount    uint32                     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListAddonMarketplaceInstallsResponse) Reset() {
	*x = ListAddonMarketplaceInstallsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddonMarketplaceInstallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddonMarketplaceInstallsResponse) ProtoMessage() {}

func (x *ListAddonMarketplaceInstallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddonMarketplaceInstallsResponse.ProtoReflect.Descriptor instead.
func (*ListAddonMarketplaceInstallsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{231}
}

func (x *ListAddonMarketplaceInstallsResponse) GetAddonInstalls() []*AddonMarketplaceInstall {
	if x != nil {
		return x.AddonInstalls
	}
	return nil
}

func (x *ListAddonMarketplaceInstallsResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type AddonMarketplaceInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId  string                         `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId      string                         `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Config          *AddonMarketplaceInstallConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	StatusInfo      *AddonMarketplaceStatus        `protobuf:"bytes,5,opt,name=status_info,json=statusInfo,proto3" json:"status_info,omitempty"`
	AddonFound      bool                           `protobuf:"varint,6,opt,name=addon_found,json=addonFound,proto3" json:"addon_found,omitempty"`
	ChecksumMatched bool                           `protobuf:"varint,7,opt,name=checksum_matched,json=checksumMatched,proto3" json:"checksum_matched,omitempty"`
}

func (x *AddonMarketplaceInstall) Reset() {
	*x = AddonMarketplaceInstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonMarketplaceInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonMarketplaceInstall) ProtoMessage() {}

func (x *AddonMarketplaceInstall) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonMarketplaceInstall.ProtoReflect.Descriptor instead.
func (*AddonMarketplaceInstall) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{232}
}

func (x *AddonMarketplaceInstall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddonMarketplaceInstall) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *AddonMarketplaceInstall) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AddonMarketplaceInstall) GetConfig() *AddonMarketplaceInstallConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AddonMarketplaceInstall) GetStatusInfo() *AddonMarketplaceStatus {
	if x != nil {
		return x.StatusInfo
	}
	return nil
}

func (x *AddonMarketplaceInstall) GetAddonFound() bool {
	if x != nil {
		return x.AddonFound
	}
	return false
}

func (x *AddonMarketplaceInstall) GetChecksumMatched() bool {
	if x != nil {
		return x.ChecksumMatched
	}
	return false
}

type AddonMarketplaceInstallConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoUrl         string                            `protobuf:"bytes,1,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`
	Revision        string                            `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	AddonName       string                            `protobuf:"bytes,3,opt,name=addon_name,json=addonName,proto3" json:"addon_name,omitempty"`
	HelmChartConfig *HelmChartInstallConfig           `protobuf:"bytes,4,opt,name=helm_chart_config,json=helmChartConfig,proto3" json:"helm_chart_config,omitempty"`
	Type            string                            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Overrides       *AddonMarketplaceInstallOverrides `protobuf:"bytes,6,opt,name=overrides,proto3" json:"overrides,omitempty"`
}

func (x *AddonMarketplaceInstallConfig) Reset() {
	*x = AddonMarketplaceInstallConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonMarketplaceInstallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonMarketplaceInstallConfig) ProtoMessage() {}

func (x *AddonMarketplaceInstallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonMarketplaceInstallConfig.ProtoReflect.Descriptor instead.
func (*AddonMarketplaceInstallConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{233}
}

func (x *AddonMarketplaceInstallConfig) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *AddonMarketplaceInstallConfig) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *AddonMarketplaceInstallConfig) GetAddonName() string {
	if x != nil {
		return x.AddonName
	}
	return ""
}

func (x *AddonMarketplaceInstallConfig) GetHelmChartConfig() *HelmChartInstallConfig {
	if x != nil {
		return x.HelmChartConfig
	}
	return nil
}

func (x *AddonMarketplaceInstallConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddonMarketplaceInstallConfig) GetOverrides() *AddonMarketplaceInstallOverrides {
	if x != nil {
		return x.Overrides
	}
	return nil
}

type AddonMarketplaceInstallOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envs     []string `protobuf:"bytes,1,rep,name=envs,proto3" json:"envs,omitempty"`
	Clusters []string `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *AddonMarketplaceInstallOverrides) Reset() {
	*x = AddonMarketplaceInstallOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonMarketplaceInstallOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonMarketplaceInstallOverrides) ProtoMessage() {}

func (x *AddonMarketplaceInstallOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonMarketplaceInstallOverrides.ProtoReflect.Descriptor instead.
func (*AddonMarketplaceInstallOverrides) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{234}
}

func (x *AddonMarketplaceInstallOverrides) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *AddonMarketplaceInstallOverrides) GetClusters() []string {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type HelmChartInstallConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dependencies []*ChartDependency `protobuf:"bytes,1,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	Description  string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name         string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version      string             `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *HelmChartInstallConfig) Reset() {
	*x = HelmChartInstallConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmChartInstallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmChartInstallConfig) ProtoMessage() {}

func (x *HelmChartInstallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmChartInstallConfig.ProtoReflect.Descriptor instead.
func (*HelmChartInstallConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{235}
}

func (x *HelmChartInstallConfig) GetDependencies() []*ChartDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *HelmChartInstallConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HelmChartInstallConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelmChartInstallConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AddonMarketplaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventList         []*AddonEvent `protobuf:"bytes,1,rep,name=event_list,json=eventList,proto3" json:"event_list,omitempty"`
	LastProcessedHash string        `protobuf:"bytes,2,opt,name=last_processed_hash,json=lastProcessedHash,proto3" json:"last_processed_hash,omitempty"`
	Processing        bool          `protobuf:"varint,3,opt,name=processing,proto3" json:"processing,omitempty"`
}

func (x *AddonMarketplaceStatus) Reset() {
	*x = AddonMarketplaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonMarketplaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonMarketplaceStatus) ProtoMessage() {}

func (x *AddonMarketplaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonMarketplaceStatus.ProtoReflect.Descriptor instead.
func (*AddonMarketplaceStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{236}
}

func (x *AddonMarketplaceStatus) GetEventList() []*AddonEvent {
	if x != nil {
		return x.EventList
	}
	return nil
}

func (x *AddonMarketplaceStatus) GetLastProcessedHash() string {
	if x != nil {
		return x.LastProcessedHash
	}
	return ""
}

func (x *AddonMarketplaceStatus) GetProcessing() bool {
	if x != nil {
		return x.Processing
	}
	return false
}

type AddonEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Message      string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Time         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Dependencies []*ChartDependency     `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *AddonEvent) Reset() {
	*x = AddonEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonEvent) ProtoMessage() {}

func (x *AddonEvent) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonEvent.ProtoReflect.Descriptor instead.
func (*AddonEvent) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{237}
}

func (x *AddonEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddonEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddonEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AddonEvent) GetDependencies() []*ChartDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type PatchInstanceSecretRequest_ValueField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *PatchInstanceSecretRequest_ValueField) Reset() {
	*x = PatchInstanceSecretRequest_ValueField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceSecretRequest_ValueField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceSecretRequest_ValueField) ProtoMessage() {}

func (x *PatchInstanceSecretRequest_ValueField) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceSecretRequest_ValueField.ProtoReflect.Descriptor instead.
func (*PatchInstanceSecretRequest_ValueField) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{21, 1}
}

func (x *PatchInstanceSecretRequest_ValueField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PatchInstanceNotificationSecretRequest_ValueField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *PatchInstanceNotificationSecretRequest_ValueField) Reset() {
	*x = PatchInstanceNotificationSecretRequest_ValueField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceNotificationSecretRequest_ValueField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceNotificationSecretRequest_ValueField) ProtoMessage() {}

func (x *PatchInstanceNotificationSecretRequest_ValueField) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceNotificationSecretRequest_ValueField.ProtoReflect.Descriptor instead.
func (*PatchInstanceNotificationSecretRequest_ValueField) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{23, 1}
}

func (x *PatchInstanceNotificationSecretRequest_ValueField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PatchInstanceImageUpdaterSecretRequest_ValueField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *PatchInstanceImageUpdaterSecretRequest_ValueField) Reset() {
	*x = PatchInstanceImageUpdaterSecretRequest_ValueField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceImageUpdaterSecretRequest_ValueField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceImageUpdaterSecretRequest_ValueField) ProtoMessage() {}

func (x *PatchInstanceImageUpdaterSecretRequest_ValueField) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceImageUpdaterSecretRequest_ValueField.ProtoReflect.Descriptor instead.
func (*PatchInstanceImageUpdaterSecretRequest_ValueField) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{25, 1}
}

func (x *PatchInstanceImageUpdaterSecretRequest_ValueField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PatchInstanceAppsetSecretRequest_ValueField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *PatchInstanceAppsetSecretRequest_ValueField) Reset() {
	*x = PatchInstanceAppsetSecretRequest_ValueField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceAppsetSecretRequest_ValueField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceAppsetSecretRequest_ValueField) ProtoMessage() {}

func (x *PatchInstanceAppsetSecretRequest_ValueField) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceAppsetSecretRequest_ValueField.ProtoReflect.Descriptor instead.
func (*PatchInstanceAppsetSecretRequest_ValueField) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{27, 1}
}

func (x *PatchInstanceAppsetSecretRequest_ValueField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_argocd_v1_argocd_proto protoreflect.FileDescriptor

var file_argocd_v1_argocd_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x73, 0x63, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x33, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xed, 0x01, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa3,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x73, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x73, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x27,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0xc5, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x07,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x3a, 0x0a,
	0x0c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x9e, 0x04, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x0a, 0x73, 0x73,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a,
	0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x93, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x15, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf1, 0x02, 0x0a,
	0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x72, 0x0a, 0x0b, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x31, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x95, 0x03, 0x0a, 0x26, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x1a, 0x7e, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x31, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x26, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x7e, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x31, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x78,
	0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x31, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb3,
	0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70,
	0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e,
	0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x21, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x88, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x73, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x27, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x28,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x27, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa5, 0x02, 0x0a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x39, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x73, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8a, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x1c,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1d,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x24, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x28, 0x52, 0x65,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x29, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x9f, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x8a, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xea, 0x02,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x14, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9d, 0x03,
	0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x2f, 0x0a,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc,
	0x02, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x0b, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x03,
	0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x03, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x75, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x72, 0x75, 0x6e, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4e, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x77, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x15, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xb4, 0x06, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x10, 0x6f,
	0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x16, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52,
	0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6b,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xd3, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8f, 0x03,
	0x0a, 0x1c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x99, 0x01, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x1a,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x1e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1f,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x76, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x37, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50,
	0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x68, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x86, 0x02,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xf5, 0x02, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x51,
	0x0a, 0x23, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6b, 0x38, 0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x1f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x73, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x26, 0x0a, 0x24,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b,
	0x38, 0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x97, 0x02, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x27,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x55, 0x0a, 0x28, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x16,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x75, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x97, 0x03, 0x0a, 0x12, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x49, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a,
	0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xb3, 0x08, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43,
	0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12,
	0x58, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67,
	0x6f, 0x43, 0x44, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x12, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x4b, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x6b, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x49, 0x0a, 0x0d, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x48, 0x65, 0x6c, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x65,
	0x6c, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x69, 0x64, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x69,
	0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x57, 0x65, 0x62, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67,
	0x6f, 0x43, 0x44, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x09, 0x64, 0x65,
	0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x73, 0x5f,
	0x72, 0x62, 0x61, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x62, 0x61, 0x63, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x72, 0x62, 0x61,
	0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x44, 0x65,
	0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x69, 0x63, 0x6f,
	0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x66, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x69, 0x66, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x66, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x44,
	0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3f, 0x0a, 0x11, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x71, 0x0a, 0x12, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x1b, 0x41, 0x72, 0x67,
	0x6f, 0x43, 0x44, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x12, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x48,
	0x65, 0x6c, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x69, 0x0a, 0x17, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x4b, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x56, 0x0a, 0x17, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x41, 0x72, 0x67, 0x6f,
	0x43, 0x44, 0x52, 0x42, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x63, 0x73, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x73, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a,
	0x10, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x0d, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x41, 0x72, 0x67, 0x6f, 0x43,
	0x44, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x17, 0x41, 0x72,
	0x67, 0x6f, 0x43, 0x44, 0x57, 0x65, 0x62, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xcb, 0x08, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x3e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x70, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x52,
	0x42, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x48, 0x02, 0x52, 0x0a,
	0x72, 0x62, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1a, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3a, 0x0a,
	0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x6c, 0x0a, 0x11, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x57, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x4f, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x69, 0x0a, 0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70,
	0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x22, 0x33, 0x0a,
	0x1b, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x62, 0x0a, 0x13, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x4b, 0x75, 0x62, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0x5b, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x63, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x33, 0x0a,
	0x17, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x41, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x50, 0x49, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70,
	0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21,
	0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x0d, 0x43, 0x76, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x73, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0xff, 0x01, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x57, 0x0a,
	0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x18, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x3c, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x36, 0x0a, 0x1a, 0x41, 0x49, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x87, 0x11, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a,
	0x0d, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x1e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x14,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x79, 0x6e, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x5d, 0x0a, 0x14, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x5c, 0x0a, 0x16, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x4a,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x40, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x5e, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x38, 0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4b, 0x38, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x1a, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x67, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x50, 0x49, 0x52, 0x14, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69,
	0x73, 0x12, 0x50, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x6e,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x41, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x17, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x41, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x20, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x61, 0x70, 0x70, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x74, 0x0a, 0x1d, 0x61, 0x69, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x49, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x1a, 0x61, 0x69, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x44, 0x0a, 0x10, 0x49, 0x50, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3b, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x09,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x22, 0x9e, 0x01,
	0x0a, 0x1e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xaf,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x22, 0xcb, 0x03, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x63, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x67, 0x6f, 0x43, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x02, 0x52,
	0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6b,
	0x61, 0x72, 0x67, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x63, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x22, 0xcb, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xb0,
	0x01, 0x0a, 0x1e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x22, 0xff, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x22, 0x33, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x70, 0x76, 0x36, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xeb, 0x0b, 0x0a, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x50,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x37, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0d, 0x6b, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x6b, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x0f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x13, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x48, 0x03, 0x52,
	0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x19, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x11, 0x65, 0x6b, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05,
	0x52, 0x0f, 0x65, 0x6b, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x06, 0x52, 0x14,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x07, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x23, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x38, 0x73, 0x5f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x1f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x11, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6b, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x26,
	0x0a, 0x24, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6b, 0x38, 0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb9, 0x07, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x12, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x19, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52, 0x0a,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a,
	0x24, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x21, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0a, 0x6b, 0x38, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x05, 0x52, 0x09, 0x6b, 0x38, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x38, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9,
	0x0d, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x4b, 0x0a, 0x15, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x5f, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x13, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x52, 0x62, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x16, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x13, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x4f, 0x0a, 0x17, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x15, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x61, 0x70, 0x12, 0x56, 0x0a, 0x1b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x14, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x72,
	0x75, 0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x1c, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x19, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12,
	0x54, 0x0a, 0x1a, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x17, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x15, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x1d, 0x72, 0x65, 0x70, 0x6f, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x1d, 0x70, 0x72, 0x75, 0x6e,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x1a, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12,
	0x53, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x16, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xcc, 0x07, 0x0a,
	0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x06, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x4b, 0x0a, 0x15,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x13, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x52, 0x62, 0x61, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x50, 0x0a, 0x17, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x17, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x56, 0x0a, 0x1b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x73,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x18, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x1c, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x19, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x6d, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x1a, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x17, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x53, 0x0a, 0x19, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3b,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x12,
	0x3a, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x90, 0x03, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6b, 0x69,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x46, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x22, 0xdd,
	0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x60,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e,
	0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22,
	0xae, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x37, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x52, 0x0a, 0x08, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x66, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a,
	0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x22, 0x37, 0x0a, 0x07,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6f,
	0x6c, 0x74, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c,
	0x74, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x42, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x01,
	0x0a, 0x29, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x2c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x2d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x5e, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x22, 0xbd, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x5d, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x22,
	0x9d, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x21, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x20, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x22, 0xbd, 0x02, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x15, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbb, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52,
	0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x22, 0xd4, 0x03, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x62, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x22, 0x9c, 0x02,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x05,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22,
	0x4b, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1c, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x6b,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x4b, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x6d, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x0e, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a,
	0x12, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x11,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xe0, 0x06,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5e, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x10,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x10,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x68, 0x65, 0x6c,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x68, 0x65, 0x6c, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a,
	0x14, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x65, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a,
	0x11, 0x45, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xb3, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x79, 0x61, 0x6d, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x79, 0x61, 0x6d, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a,
	0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x22, 0x35, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e,
	0x6f, 0x6e, 0x43, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x41, 0x70,
	0x70, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x04, 0x0a, 0x0b,
	0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x4f, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4f, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x65, 0x6c, 0x6d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x11, 0x6b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x10, 0x6b, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x72, 0x64,
	0x73, 0x22, 0x76, 0x0a, 0x10, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x12,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x53, 0x68, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xf3, 0x03, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e,
	0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x65, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x1a, 0x65, 0x0a,
	0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x22, 0x83, 0x04, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x62, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5f, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90, 0x01,
	0x0a, 0x1b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x75,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x1e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x9d, 0x04, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x71, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x22, 0x9a, 0x02, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22,
	0x77, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x22, 0xa8, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x24, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x25, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x1d, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x65, 0x70, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65,
	0x70, 0x4f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x24,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0xb1, 0x02,
	0x0a, 0x1d, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x68, 0x65, 0x6c, 0x6d,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x50, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x22, 0x52, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x45, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22,
	0xb1, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x2a, 0xea, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x59,
	0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x05,
	0x2a, 0x94, 0x02, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x26,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x53, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10,
	0x03, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x04,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x05, 0x2a, 0x8b, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x10, 0x04, 0x2a, 0x53, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x50, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4b, 0x41, 0x52, 0x47, 0x4f, 0x10, 0x01, 0x2a, 0xd1, 0x02, 0x0a, 0x11, 0x50,
	0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x53, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x52,
	0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x4c, 0x55, 0x47, 0x49, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x55, 0x4e,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x28,
	0x0a, 0x24, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x54, 0x53, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x55, 0x4e,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x10, 0x07, 0x2a, 0x9a,
	0x01, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x46, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x54, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x45, 0x4b, 0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41,
	0x4b, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x49, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x0a, 0x53,
	0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x44, 0x44, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53,
	0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x56, 0x0a,
	0x09, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44,
	0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x4c, 0x4d, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x49, 0x5a, 0x45, 0x10, 0x02, 0x2a, 0x6d, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x10, 0x02, 0x2a, 0x75, 0x0a, 0x10, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x32, 0xe6, 0x93, 0x01, 0x0a,
	0x0d, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x96,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xe7, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x7e, 0x5a, 0x4b, 0x12, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0xfb, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8c,
	0x01, 0x5a, 0x52, 0x12, 0x50, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x30, 0x01, 0x12,
	0xf1, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x84, 0x01, 0x3a,
	0x01, 0x2a, 0x5a, 0x4e, 0x3a, 0x01, 0x2a, 0x22, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0xec, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88, 0x01, 0x5a, 0x50, 0x12, 0x4e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x34, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xfd, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x53, 0x53, 0x12, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x90, 0x01, 0x5a, 0x54, 0x12, 0x52, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x73, 0x73, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x73, 0x73, 0x12, 0xc4, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xa4, 0x01, 0x5a, 0x5e, 0x12, 0x5c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd1, 0x02, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x37, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xbb, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb4, 0x01, 0x5a, 0x66, 0x12, 0x64, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x4a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0xc4, 0x02,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x38, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa4, 0x01,
	0x5a, 0x5e, 0x12, 0x5c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x12, 0xde, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb8, 0x01, 0x5a, 0x68, 0x12,
	0x66, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xe5, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3b, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xbc,
	0x01, 0x5a, 0x6a, 0x12, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x4e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x80, 0x02,
	0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x96, 0x01, 0x3a, 0x05, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5a, 0x57, 0x3a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x32, 0x4e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x34, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x98, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9c, 0x01, 0x3a,
	0x01, 0x2a, 0x5a, 0x5a, 0x3a, 0x01, 0x2a, 0x32, 0x55, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x3b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0xd8, 0x02, 0x0a, 0x1f,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x38, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb8, 0x01, 0x3a, 0x01,
	0x2a, 0x5a, 0x68, 0x3a, 0x01, 0x2a, 0x32, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x49, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0xd8, 0x02, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xbf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb8, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x68, 0x3a, 0x01,
	0x2a, 0x32, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0xac, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x30, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70,
	0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xab, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa4, 0x01, 0x5a, 0x5e, 0x12, 0x5c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x42, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0xb8, 0x02, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x32,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xaa,
	0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x61, 0x3a, 0x01, 0x2a, 0x32, 0x5c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x74,
	0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0xfb, 0x01, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x95, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8e, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x53,
	0x3a, 0x01, 0x2a, 0x1a, 0x4e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x1a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa8, 0x02, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xa0, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x5c, 0x3a, 0x01, 0x2a, 0x1a, 0x57, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x8c, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x12, 0x2a, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x96, 0x01, 0x3a, 0x01, 0x2a,
	0x5a, 0x57, 0x3a, 0x01, 0x2a, 0x1a, 0x52, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x73, 0x73, 0x1a, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x73, 0x73, 0x12, 0xcd, 0x02, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xaa, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x61, 0x3a, 0x01,
	0x2a, 0x1a, 0x5c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xdb, 0x02, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xbf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb8, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x68, 0x3a, 0x01,
	0x2a, 0x1a, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xec, 0x02, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc0, 0x01,
	0x3a, 0x01, 0x2a, 0x5a, 0x6c, 0x3a, 0x01, 0x2a, 0x1a, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xed, 0x02, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xbe, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x6b, 0x3a, 0x01, 0x2a, 0x1a, 0x66, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x4c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0xf4, 0x02, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3e, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xc2, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x6d, 0x3a, 0x01, 0x2a, 0x1a, 0x68, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x1a, 0x4e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xf5, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88, 0x01, 0x5a, 0x50, 0x2a, 0x4e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xab, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xac,
	0x01, 0x5a, 0x62, 0x12, 0x60, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xc2, 0x02,
	0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xc0, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x6c, 0x3a, 0x01, 0x2a, 0x1a, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x1a, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0xec, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xd2, 0x01, 0x3a,
	0x01, 0x2a, 0x5a, 0x75, 0x3a, 0x01, 0x2a, 0x1a, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x56, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x8f, 0x03, 0x0a, 0x21, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xe9, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x80, 0x01,
	0x3a, 0x01, 0x2a, 0x22, 0x7b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0xbc, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xba, 0x01, 0x5a, 0x69, 0x2a, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2a, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0xab, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xac, 0x01, 0x5a, 0x62, 0x12, 0x60, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0xbe, 0x02, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xba, 0x01, 0x5a, 0x69, 0x12, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x30,
	0x01, 0x12, 0xb4, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0xb2, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x65, 0x3a, 0x01, 0x2a, 0x22, 0x60,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa4, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x96, 0x01, 0x5a, 0x57, 0x12, 0x55, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x75, 0x74, 0x69,
	0x6c, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x12,
	0xaf, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xbd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb6, 0x01, 0x5a, 0x67, 0x12, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x4b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xc1, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xc0, 0x01, 0x5a, 0x6c, 0x12, 0x6a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x50, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xea, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64,
	0x79, 0x22, 0xfc, 0x01, 0x92, 0x41, 0x28, 0x12, 0x26, 0x47, 0x65, 0x74, 0x20, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0xca, 0x01, 0x5a, 0x71, 0x12, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x12, 0x55, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73,
	0x30, 0x01, 0x12, 0xbe, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xbc, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x6a, 0x3a, 0x01, 0x2a, 0x1a,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x4b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xa5, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa0, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x5c,
	0x3a, 0x01, 0x2a, 0x1a, 0x57, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xd1, 0x02, 0x0a, 0x22,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xce,
	0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x73, 0x3a, 0x01, 0x2a, 0x22, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0xfb, 0x02, 0x0a, 0x20, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xd8, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x78, 0x3a, 0x01, 0x2a, 0x22, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0x59, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x2d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0xb8, 0x02,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xb6, 0x01, 0x5a, 0x67, 0x2a, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2a, 0x4b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd4, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x32, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc6, 0x01, 0x5a, 0x6f, 0x12, 0x6d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x53, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0xd6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x3a, 0x01, 0x2a, 0x22, 0x48,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x61, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x3a, 0x01,
	0x2a, 0x22, 0x45, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4b, 0x3a, 0x01, 0x2a, 0x22, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x84, 0x02, 0x0a,
	0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9a, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x59, 0x3a, 0x01,
	0x2a, 0x22, 0x54, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x83, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x96, 0x01, 0x5a, 0x57, 0x12, 0x55, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xe8, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x65, 0x12,
	0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x2d, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x12, 0xe7, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x2d, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x6a, 0x12, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xee,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x30, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x3a, 0x01, 0x2a, 0x22, 0x63, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12,
	0xfe, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x31, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x75, 0x3a, 0x01, 0x2a, 0x22, 0x70,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x2d, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x12, 0xf0, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x30, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6a, 0x2a, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xd7, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x12, 0x5e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0xa7, 0x02,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xb4, 0x01, 0x5a, 0x4d, 0x12, 0x4b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xed, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x12, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x70, 0x3a, 0x01, 0x2a, 0x22, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0xe2, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12,
	0x2c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x68, 0x3a, 0x01, 0x2a, 0x1a, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe3, 0x01, 0x0a,
	0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x3a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x32, 0x63, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xe3, 0x01, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x12,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x30, 0x01, 0x12, 0xf4, 0x01, 0x0a, 0x17, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x6c, 0x12, 0x6a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x30, 0x01, 0x12,
	0xfd, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x30, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x77, 0x3a, 0x01, 0x2a, 0x22, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x92, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x35, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x3a, 0x01, 0x2a, 0x22, 0x77, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x2d,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x96, 0x02, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7b,
	0x12, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x30, 0x01, 0x12, 0x95, 0x02,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12,
	0x36, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x3a, 0x01, 0x2a, 0x22, 0x77, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0xc9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0b,
	0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x69, 0x6f, 0x2f, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x41, 0x58, 0xaa, 0x02, 0x10, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x41, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x5c, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c,
	0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x5c, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_argocd_v1_argocd_proto_rawDescOnce sync.Once
	file_argocd_v1_argocd_proto_rawDescData = file_argocd_v1_argocd_proto_rawDesc
)

func file_argocd_v1_argocd_proto_rawDescGZIP() []byte {
	file_argocd_v1_argocd_proto_rawDescOnce.Do(func() {
		file_argocd_v1_argocd_proto_rawDescData = protoimpl.X.CompressGZIP(file_argocd_v1_argocd_proto_rawDescData)
	})
	return file_argocd_v1_argocd_proto_rawDescData
}

var file_argocd_v1_argocd_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_argocd_v1_argocd_proto_msgTypes = make([]protoimpl.MessageInfo, 273)
var file_argocd_v1_argocd_proto_goTypes = []interface{}{
	(SyncOperationField)(0),                               // 0: akuity.argocd.v1.SyncOperationField
	(SyncOperationGroupField)(0),                          // 1: akuity.argocd.v1.SyncOperationGroupField
	(ClusterSize)(0),                                      // 2: akuity.argocd.v1.ClusterSize
	(DirectClusterType)(0),                                // 3: akuity.argocd.v1.DirectClusterType
	(PruneResourceType)(0),                                // 4: akuity.argocd.v1.PruneResourceType
	(ClusterCommandFor)(0),                                // 5: akuity.argocd.v1.ClusterCommandFor
	(SortAddons)(0),                                       // 6: akuity.argocd.v1.SortAddons
	(AddonType)(0),                                        // 7: akuity.argocd.v1.AddonType
	(SelectorOperator)(0),                                 // 8: akuity.argocd.v1.SelectorOperator
	(OnConflictAction)(0),                                 // 9: akuity.argocd.v1.OnConflictAction
	(*ListInstanceVersionsRequest)(nil),                   // 10: akuity.argocd.v1.ListInstanceVersionsRequest
	(*ListInstanceVersionsResponse)(nil),                  // 11: akuity.argocd.v1.ListInstanceVersionsResponse
	(*ListInstancesRequest)(nil),                          // 12: akuity.argocd.v1.ListInstancesRequest
	(*ListInstancesResponse)(nil),                         // 13: akuity.argocd.v1.ListInstancesResponse
	(*CreateInstanceRequest)(nil),                         // 14: akuity.argocd.v1.CreateInstanceRequest
	(*CreateInstanceResponse)(nil),                        // 15: akuity.argocd.v1.CreateInstanceResponse
	(*GetInstanceRequest)(nil),                            // 16: akuity.argocd.v1.GetInstanceRequest
	(*GetInstanceResponse)(nil),                           // 17: akuity.argocd.v1.GetInstanceResponse
	(*GetInstanceCSSRequest)(nil),                         // 18: akuity.argocd.v1.GetInstanceCSSRequest
	(*GetInstanceCSSResponse)(nil),                        // 19: akuity.argocd.v1.GetInstanceCSSResponse
	(*GetInstanceNotificationSettingsRequest)(nil),        // 20: akuity.argocd.v1.GetInstanceNotificationSettingsRequest
	(*GetInstanceNotificationSettingsResponse)(nil),       // 21: akuity.argocd.v1.GetInstanceNotificationSettingsResponse
	(*GetInstanceNotificationCatalogRequest)(nil),         // 22: akuity.argocd.v1.GetInstanceNotificationCatalogRequest
	(*GetInstanceNotificationCatalogResponse)(nil),        // 23: akuity.argocd.v1.GetInstanceNotificationCatalogResponse
	(*GetInstanceImageUpdaterSettingsRequest)(nil),        // 24: akuity.argocd.v1.GetInstanceImageUpdaterSettingsRequest
	(*GetInstanceImageUpdaterSettingsResponse)(nil),       // 25: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse
	(*ResourceCustomizationConfig)(nil),                   // 26: akuity.argocd.v1.ResourceCustomizationConfig
	(*GetInstanceResourceCustomizationsRequest)(nil),      // 27: akuity.argocd.v1.GetInstanceResourceCustomizationsRequest
	(*GetInstanceResourceCustomizationsResponse)(nil),     // 28: akuity.argocd.v1.GetInstanceResourceCustomizationsResponse
	(*PatchInstanceRequest)(nil),                          // 29: akuity.argocd.v1.PatchInstanceRequest
	(*PatchInstanceResponse)(nil),                         // 30: akuity.argocd.v1.PatchInstanceResponse
	(*PatchInstanceSecretRequest)(nil),                    // 31: akuity.argocd.v1.PatchInstanceSecretRequest
	(*PatchInstanceSecretResponse)(nil),                   // 32: akuity.argocd.v1.PatchInstanceSecretResponse
	(*PatchInstanceNotificationSecretRequest)(nil),        // 33: akuity.argocd.v1.PatchInstanceNotificationSecretRequest
	(*PatchInstanceNotificationSecretResponse)(nil),       // 34: akuity.argocd.v1.PatchInstanceNotificationSecretResponse
	(*PatchInstanceImageUpdaterSecretRequest)(nil),        // 35: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest
	(*PatchInstanceImageUpdaterSecretResponse)(nil),       // 36: akuity.argocd.v1.PatchInstanceImageUpdaterSecretResponse
	(*PatchInstanceAppsetSecretRequest)(nil),              // 37: akuity.argocd.v1.PatchInstanceAppsetSecretRequest
	(*PatchInstanceAppsetSecretResponse)(nil),             // 38: akuity.argocd.v1.PatchInstanceAppsetSecretResponse
	(*GetInstanceAppsetSecretRequest)(nil),                // 39: akuity.argocd.v1.GetInstanceAppsetSecretRequest
	(*GetInstanceAppsetSecretResponse)(nil),               // 40: akuity.argocd.v1.GetInstanceAppsetSecretResponse
	(*UpdateInstanceRequest)(nil),                         // 41: akuity.argocd.v1.UpdateInstanceRequest
	(*UpdateInstanceResponse)(nil),                        // 42: akuity.argocd.v1.UpdateInstanceResponse
	(*UpdateInstanceWorkspaceRequest)(nil),                // 43: akuity.argocd.v1.UpdateInstanceWorkspaceRequest
	(*UpdateInstanceWorkspaceResponse)(nil),               // 44: akuity.argocd.v1.UpdateInstanceWorkspaceResponse
	(*UpdateInstanceCSSRequest)(nil),                      // 45: akuity.argocd.v1.UpdateInstanceCSSRequest
	(*UpdateInstanceCSSResponse)(nil),                     // 46: akuity.argocd.v1.UpdateInstanceCSSResponse
	(*UpdateInstanceNotificationConfigRequest)(nil),       // 47: akuity.argocd.v1.UpdateInstanceNotificationConfigRequest
	(*UpdateInstanceNotificationConfigResponse)(nil),      // 48: akuity.argocd.v1.UpdateInstanceNotificationConfigResponse
	(*UpdateInstanceImageUpdaterConfigRequest)(nil),       // 49: akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest
	(*UpdateInstanceImageUpdaterConfigResponse)(nil),      // 50: akuity.argocd.v1.UpdateInstanceImageUpdaterConfigResponse
	(*UpdateInstanceImageUpdaterSSHConfigRequest)(nil),    // 51: akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest
	(*UpdateInstanceImageUpdaterSSHConfigResponse)(nil),   // 52: akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigResponse
	(*UpdateInstanceResourceCustomizationsRequest)(nil),   // 53: akuity.argocd.v1.UpdateInstanceResourceCustomizationsRequest
	(*UpdateInstanceResourceCustomizationsResponse)(nil),  // 54: akuity.argocd.v1.UpdateInstanceResourceCustomizationsResponse
	(*DeleteInstanceRequest)(nil),                         // 55: akuity.argocd.v1.DeleteInstanceRequest
	(*DeleteInstanceResponse)(nil),                        // 56: akuity.argocd.v1.DeleteInstanceResponse
	(*ListInstanceAccountsRequest)(nil),                   // 57: akuity.argocd.v1.ListInstanceAccountsRequest
	(*ListInstanceAccountsResponse)(nil),                  // 58: akuity.argocd.v1.ListInstanceAccountsResponse
	(*UpsertInstanceAccountRequest)(nil),                  // 59: akuity.argocd.v1.UpsertInstanceAccountRequest
	(*UpsertInstanceAccountResponse)(nil),                 // 60: akuity.argocd.v1.UpsertInstanceAccountResponse
	(*UpdateInstanceAccountPasswordRequest)(nil),          // 61: akuity.argocd.v1.UpdateInstanceAccountPasswordRequest
	(*UpdateInstanceAccountPasswordResponse)(nil),         // 62: akuity.argocd.v1.UpdateInstanceAccountPasswordResponse
	(*RegenerateInstanceAccountPasswordRequest)(nil),      // 63: akuity.argocd.v1.RegenerateInstanceAccountPasswordRequest
	(*RegenerateInstanceAccountPasswordResponse)(nil),     // 64: akuity.argocd.v1.RegenerateInstanceAccountPasswordResponse
	(*DeleteInstanceAccountRequest)(nil),                  // 65: akuity.argocd.v1.DeleteInstanceAccountRequest
	(*DeleteInstanceAccountResponse)(nil),                 // 66: akuity.argocd.v1.DeleteInstanceAccountResponse
	(*GetAIAssistantUsageStatsRequest)(nil),               // 67: akuity.argocd.v1.GetAIAssistantUsageStatsRequest
	(*GetAIAssistantUsageStatsResponse)(nil),              // 68: akuity.argocd.v1.GetAIAssistantUsageStatsResponse
	(*GetSyncOperationsStatsRequest)(nil),                 // 69: akuity.argocd.v1.GetSyncOperationsStatsRequest
	(*GetSyncOperationsEventsRequest)(nil),                // 70: akuity.argocd.v1.GetSyncOperationsEventsRequest
	(*SyncOperationFilter)(nil),                           // 71: akuity.argocd.v1.SyncOperationFilter
	(*Label)(nil),                                         // 72: akuity.argocd.v1.Label
	(*SyncOperationStat)(nil),                             // 73: akuity.argocd.v1.SyncOperationStat
	(*SyncOperationEvent)(nil),                            // 74: akuity.argocd.v1.SyncOperationEvent
	(*SyncOperationEventDetails)(nil),                     // 75: akuity.argocd.v1.SyncOperationEventDetails
	(*OperationInitiator)(nil),                            // 76: akuity.argocd.v1.OperationInitiator
	(*GetSyncOperationsStatsResponse)(nil),                // 77: akuity.argocd.v1.GetSyncOperationsStatsResponse
	(*GetSyncOperationsEventsResponse)(nil),               // 78: akuity.argocd.v1.GetSyncOperationsEventsResponse
	(*ClusterFilter)(nil),                                 // 79: akuity.argocd.v1.ClusterFilter
	(*ListInstanceClustersRequest)(nil),                   // 80: akuity.argocd.v1.ListInstanceClustersRequest
	(*WatchInstanceClustersRequest)(nil),                  // 81: akuity.argocd.v1.WatchInstanceClustersRequest
	(*WatchInstancesRequest)(nil),                         // 82: akuity.argocd.v1.WatchInstancesRequest
	(*WatchInstanceAddonsRequest)(nil),                    // 83: akuity.argocd.v1.WatchInstanceAddonsRequest
	(*WatchInstanceAddonReposRequest)(nil),                // 84: akuity.argocd.v1.WatchInstanceAddonReposRequest
	(*WatchInstancesResponse)(nil),                        // 85: akuity.argocd.v1.WatchInstancesResponse
	(*WatchInstanceAddonsResponse)(nil),                   // 86: akuity.argocd.v1.WatchInstanceAddonsResponse
	(*WatchInstanceAddonReposResponse)(nil),               // 87: akuity.argocd.v1.WatchInstanceAddonReposResponse
	(*WatchInstanceClustersResponse)(nil),                 // 88: akuity.argocd.v1.WatchInstanceClustersResponse
	(*ListInstanceClustersResponse)(nil),                  // 89: akuity.argocd.v1.ListInstanceClustersResponse
	(*CreateInstanceClusterRequest)(nil),                  // 90: akuity.argocd.v1.CreateInstanceClusterRequest
	(*CreateInstanceClusterResponse)(nil),                 // 91: akuity.argocd.v1.CreateInstanceClusterResponse
	(*GetClusterAPIServerCADataRequest)(nil),              // 92: akuity.argocd.v1.GetClusterAPIServerCADataRequest
	(*GetClusterAPIServerCADataResponse)(nil),             // 93: akuity.argocd.v1.GetClusterAPIServerCADataResponse
	(*GetInstanceClusterRequest)(nil),                     // 94: akuity.argocd.v1.GetInstanceClusterRequest
	(*GetInstanceClusterResponse)(nil),                    // 95: akuity.argocd.v1.GetInstanceClusterResponse
	(*GetInstanceClusterInfoResponse)(nil),                // 96: akuity.argocd.v1.GetInstanceClusterInfoResponse
	(*GetInstanceClusterManifestsRequest)(nil),            // 97: akuity.argocd.v1.GetInstanceClusterManifestsRequest
	(*UpdateInstanceClusterRequest)(nil),                  // 98: akuity.argocd.v1.UpdateInstanceClusterRequest
	(*UpdateInstanceClusterResponse)(nil),                 // 99: akuity.argocd.v1.UpdateInstanceClusterResponse
	(*UpdateInstanceClustersRequest)(nil),                 // 100: akuity.argocd.v1.UpdateInstanceClustersRequest
	(*UpdateInstanceClustersResponse)(nil),                // 101: akuity.argocd.v1.UpdateInstanceClustersResponse
	(*UpdateInstanceClustersAgentVersionRequest)(nil),     // 102: akuity.argocd.v1.UpdateInstanceClustersAgentVersionRequest
	(*RotateInstanceClusterCredentialsRequest)(nil),       // 103: akuity.argocd.v1.RotateInstanceClusterCredentialsRequest
	(*RotateInstanceClusterCredentialsResponse)(nil),      // 104: akuity.argocd.v1.RotateInstanceClusterCredentialsResponse
	(*DeleteInstanceClusterRequest)(nil),                  // 105: akuity.argocd.v1.DeleteInstanceClusterRequest
	(*DeleteInstanceClusterResponse)(nil),                 // 106: akuity.argocd.v1.DeleteInstanceClusterResponse
	(*ApplicationsHealth)(nil),                            // 107: akuity.argocd.v1.ApplicationsHealth
	(*ApplicationsSyncStatus)(nil),                        // 108: akuity.argocd.v1.ApplicationsSyncStatus
	(*ApplicationsStatus)(nil),                            // 109: akuity.argocd.v1.ApplicationsStatus
	(*ArgoCDConfigMap)(nil),                               // 110: akuity.argocd.v1.ArgoCDConfigMap
	(*DeepLink)(nil),                                      // 111: akuity.argocd.v1.DeepLink
	(*ArgoCDDeepLinks)(nil),                               // 112: akuity.argocd.v1.ArgoCDDeepLinks
	(*ArgoCDAlertConfig)(nil),                             // 113: akuity.argocd.v1.ArgoCDAlertConfig
	(*ArgoCDBannerConfig)(nil),                            // 114: akuity.argocd.v1.ArgoCDBannerConfig
	(*ArgoCDExtensionInstallEntry)(nil),                   // 115: akuity.argocd.v1.ArgoCDExtensionInstallEntry
	(*ArgoCDGoogleAnalyticsConfig)(nil),                   // 116: akuity.argocd.v1.ArgoCDGoogleAnalyticsConfig
	(*ArgoCDHelmSettings)(nil),                            // 117: akuity.argocd.v1.ArgoCDHelmSettings
	(*ArgoCDKustomizeSettings)(nil),                       // 118: akuity.argocd.v1.ArgoCDKustomizeSettings
	(*ArgoCDStatusBadgeConfig)(nil),                       // 119: akuity.argocd.v1.ArgoCDStatusBadgeConfig
	(*ArgoCDRBACConfigMap)(nil),                           // 120: akuity.argocd.v1.ArgoCDRBACConfigMap
	(*OverlayPolicy)(nil),                                 // 121: akuity.argocd.v1.OverlayPolicy
	(*ArgoCDResourceSettings)(nil),                        // 122: akuity.argocd.v1.ArgoCDResourceSettings
	(*ArgoCDWebTerminalConfig)(nil),                       // 123: akuity.argocd.v1.ArgoCDWebTerminalConfig
	(*ClusterCustomization)(nil),                          // 124: akuity.argocd.v1.ClusterCustomization
	(*Instance)(nil),                                      // 125: akuity.argocd.v1.Instance
	(*InstanceAccount)(nil),                               // 126: akuity.argocd.v1.InstanceAccount
	(*CertificateStatus)(nil),                             // 127: akuity.argocd.v1.CertificateStatus
	(*InstanceInfo)(nil),                                  // 128: akuity.argocd.v1.InstanceInfo
	(*AppsetPolicy)(nil),                                  // 129: akuity.argocd.v1.AppsetPolicy
	(*AgentPermissionsRule)(nil),                          // 130: akuity.argocd.v1.AgentPermissionsRule
	(*CrossplaneExtensionResource)(nil),                   // 131: akuity.argocd.v1.CrossplaneExtensionResource
	(*CrossplaneExtension)(nil),                           // 132: akuity.argocd.v1.CrossplaneExtension
	(*KubeVisionArgoExtension)(nil),                       // 133: akuity.argocd.v1.KubeVisionArgoExtension
	(*KubeVisionConfig)(nil),                              // 134: akuity.argocd.v1.KubeVisionConfig
	(*AppInAnyNamespaceConfig)(nil),                       // 135: akuity.argocd.v1.AppInAnyNamespaceConfig
	(*CustomDeprecatedAPI)(nil),                           // 136: akuity.argocd.v1.CustomDeprecatedAPI
	(*CveScanConfig)(nil),                                 // 137: akuity.argocd.v1.CveScanConfig
	(*ObjectSelector)(nil),                                // 138: akuity.argocd.v1.ObjectSelector
	(*LabelSelectorRequirement)(nil),                      // 139: akuity.argocd.v1.LabelSelectorRequirement
	(*ClusterSecretMapping)(nil),                          // 140: akuity.argocd.v1.ClusterSecretMapping
	(*SecretsManagementConfig)(nil),                       // 141: akuity.argocd.v1.SecretsManagementConfig
	(*AISupportEngineerExtension)(nil),                    // 142: akuity.argocd.v1.AISupportEngineerExtension
	(*InstanceSpec)(nil),                                  // 143: akuity.argocd.v1.InstanceSpec
	(*ManagedCluster)(nil),                                // 144: akuity.argocd.v1.ManagedCluster
	(*RepoServerDelegate)(nil),                            // 145: akuity.argocd.v1.RepoServerDelegate
	(*ImageUpdaterDelegate)(nil),                          // 146: akuity.argocd.v1.ImageUpdaterDelegate
	(*AppSetDelegate)(nil),                                // 147: akuity.argocd.v1.AppSetDelegate
	(*InstanceAccountCapabilities)(nil),                   // 148: akuity.argocd.v1.InstanceAccountCapabilities
	(*InstanceVersion)(nil),                               // 149: akuity.argocd.v1.InstanceVersion
	(*IPAllowListEntry)(nil),                              // 150: akuity.argocd.v1.IPAllowListEntry
	(*HostAliases)(nil),                                   // 151: akuity.argocd.v1.HostAliases
	(*Resources)(nil),                                     // 152: akuity.argocd.v1.Resources
	(*ApplicationControllerResources)(nil),                // 153: akuity.argocd.v1.ApplicationControllerResources
	(*RepoServerResources)(nil),                           // 154: akuity.argocd.v1.RepoServerResources
	(*AgentResources)(nil),                                // 155: akuity.argocd.v1.AgentResources
	(*AgentState)(nil),                                    // 156: akuity.argocd.v1.AgentState
	(*DirectClusterSpec)(nil),                             // 157: akuity.argocd.v1.DirectClusterSpec
	(*ManagedClusterConfig)(nil),                          // 158: akuity.argocd.v1.ManagedClusterConfig
	(*AutoScalerConfig)(nil),                              // 159: akuity.argocd.v1.AutoScalerConfig
	(*AppControllerAutoScalingConfig)(nil),                // 160: akuity.argocd.v1.AppControllerAutoScalingConfig
	(*RepoServerAutoScalingConfig)(nil),                   // 161: akuity.argocd.v1.RepoServerAutoScalingConfig
	(*ClusterCompatibility)(nil),                          // 162: akuity.argocd.v1.ClusterCompatibility
	(*ClusterData)(nil),                                   // 163: akuity.argocd.v1.ClusterData
	(*Cluster)(nil),                                       // 164: akuity.argocd.v1.Cluster
	(*ClusterKubernetesStatus)(nil),                       // 165: akuity.argocd.v1.ClusterKubernetesStatus
	(*ApplyInstanceRequest)(nil),                          // 166: akuity.argocd.v1.ApplyInstanceRequest
	(*ApplyInstanceResponse)(nil),                         // 167: akuity.argocd.v1.ApplyInstanceResponse
	(*ExportInstanceRequest)(nil),                         // 168: akuity.argocd.v1.ExportInstanceRequest
	(*ExportInstanceResponse)(nil),                        // 169: akuity.argocd.v1.ExportInstanceResponse
	(*GetInstanceClusterCommandRequest)(nil),              // 170: akuity.argocd.v1.GetInstanceClusterCommandRequest
	(*GetInstanceClusterCommandResponse)(nil),             // 171: akuity.argocd.v1.GetInstanceClusterCommandResponse
	(*ConfigManagementPlugin)(nil),                        // 172: akuity.argocd.v1.ConfigManagementPlugin
	(*PluginSpec)(nil),                                    // 173: akuity.argocd.v1.PluginSpec
	(*Command)(nil),                                       // 174: akuity.argocd.v1.Command
	(*Discover)(nil),                                      // 175: akuity.argocd.v1.Discover
	(*Find)(nil),                                          // 176: akuity.argocd.v1.Find
	(*Parameters)(nil),                                    // 177: akuity.argocd.v1.Parameters
	(*Dynamic)(nil),                                       // 178: akuity.argocd.v1.Dynamic
	(*ParameterAnnouncement)(nil),                         // 179: akuity.argocd.v1.ParameterAnnouncement
	(*GetInstanceConfigManagementPluginsRequest)(nil),     // 180: akuity.argocd.v1.GetInstanceConfigManagementPluginsRequest
	(*GetInstanceConfigManagementPluginsResponse)(nil),    // 181: akuity.argocd.v1.GetInstanceConfigManagementPluginsResponse
	(*UpdateInstanceConfigManagementPluginsRequest)(nil),  // 182: akuity.argocd.v1.UpdateInstanceConfigManagementPluginsRequest
	(*UpdateInstanceConfigManagementPluginsResponse)(nil), // 183: akuity.argocd.v1.UpdateInstanceConfigManagementPluginsResponse
	(*ListInstanceAddonReposRequest)(nil),                 // 184: akuity.argocd.v1.ListInstanceAddonReposRequest
	(*ListInstanceAddonReposResponse)(nil),                // 185: akuity.argocd.v1.ListInstanceAddonReposResponse
	(*GetInstanceAddonRepoRequest)(nil),                   // 186: akuity.argocd.v1.GetInstanceAddonRepoRequest
	(*GetInstanceAddonRepoResponse)(nil),                  // 187: akuity.argocd.v1.GetInstanceAddonRepoResponse
	(*CreateInstanceAddonRepoRequest)(nil),                // 188: akuity.argocd.v1.CreateInstanceAddonRepoRequest
	(*CreateInstanceAddonRepoResponse)(nil),               // 189: akuity.argocd.v1.CreateInstanceAddonRepoResponse
	(*DeleteInstanceAddonRepoRequest)(nil),                // 190: akuity.argocd.v1.DeleteInstanceAddonRepoRequest
	(*DeleteInstanceAddonRepoResponse)(nil),               // 191: akuity.argocd.v1.DeleteInstanceAddonRepoResponse
	(*RefreshInstanceAddonRepoRequest)(nil),               // 192: akuity.argocd.v1.RefreshInstanceAddonRepoRequest
	(*RefreshInstanceAddonRepoResponse)(nil),              // 193: akuity.argocd.v1.RefreshInstanceAddonRepoResponse
	(*AddonRepo)(nil),                                     // 194: akuity.argocd.v1.AddonRepo
	(*RepoSpec)(nil),                                      // 195: akuity.argocd.v1.RepoSpec
	(*RepoStatus)(nil),                                    // 196: akuity.argocd.v1.RepoStatus
	(*GetInstanceAddonRequest)(nil),                       // 197: akuity.argocd.v1.GetInstanceAddonRequest
	(*GetInstanceAddonResponse)(nil),                      // 198: akuity.argocd.v1.GetInstanceAddonResponse
	(*AddonFilter)(nil),                                   // 199: akuity.argocd.v1.AddonFilter
	(*ListInstanceAddonsRequest)(nil),                     // 200: akuity.argocd.v1.ListInstanceAddonsRequest
	(*ListInstanceAddonsResponse)(nil),                    // 201: akuity.argocd.v1.ListInstanceAddonsResponse
	(*UpdateInstanceAddonRequest)(nil),                    // 202: akuity.argocd.v1.UpdateInstanceAddonRequest
	(*UpdateInstanceAddonResponse)(nil),                   // 203: akuity.argocd.v1.UpdateInstanceAddonResponse
	(*PatchInstanceAddonRequest)(nil),                     // 204: akuity.argocd.v1.PatchInstanceAddonRequest
	(*PatchInstanceAddonResponse)(nil),                    // 205: akuity.argocd.v1.PatchInstanceAddonResponse
	(*RefreshInstanceAddonRequest)(nil),                   // 206: akuity.argocd.v1.RefreshInstanceAddonRequest
	(*RefreshInstanceAddonResponse)(nil),                  // 207: akuity.argocd.v1.RefreshInstanceAddonResponse
	(*ManifestSource)(nil),                                // 208: akuity.argocd.v1.ManifestSource
	(*KustomizeSource)(nil),                               // 209: akuity.argocd.v1.KustomizeSource
	(*KustomizeImage)(nil),                                // 210: akuity.argocd.v1.KustomizeImage
	(*KustomizeHelmChart)(nil),                            // 211: akuity.argocd.v1.KustomizeHelmChart
	(*HelmSource)(nil),                                    // 212: akuity.argocd.v1.HelmSource
	(*ClusterSelector)(nil),                               // 213: akuity.argocd.v1.ClusterSelector
	(*Selector)(nil),                                      // 214: akuity.argocd.v1.Selector
	(*AddonSpec)(nil),                                     // 215: akuity.argocd.v1.AddonSpec
	(*PatchCustomization)(nil),                            // 216: akuity.argocd.v1.PatchCustomization
	(*HelmValues)(nil),                                    // 217: akuity.argocd.v1.HelmValues
	(*ChartDependency)(nil),                               // 218: akuity.argocd.v1.ChartDependency
	(*AppCreationOptions)(nil),                            // 219: akuity.argocd.v1.AppCreationOptions
	(*AppDeletionOptions)(nil),                            // 220: akuity.argocd.v1.AppDeletionOptions
	(*AppSyncOptions)(nil),                                // 221: akuity.argocd.v1.AppSyncOptions
	(*AppTemplate)(nil),                                   // 222: akuity.argocd.v1.AppTemplate
	(*HelmOptions)(nil),                                   // 223: akuity.argocd.v1.HelmOptions
	(*KustomizeOptions)(nil),                              // 224: akuity.argocd.v1.KustomizeOptions
	(*StatusSourceUpdate)(nil),                            // 225: akuity.argocd.v1.StatusSourceUpdate
	(*SourceUpdateResult)(nil),                            // 226: akuity.argocd.v1.SourceUpdateResult
	(*SourceInfo)(nil),                                    // 227: akuity.argocd.v1.SourceInfo
	(*AddonStatus)(nil),                                   // 228: akuity.argocd.v1.AddonStatus
	(*AddonCondition)(nil),                                // 229: akuity.argocd.v1.AddonCondition
	(*ClusterAddonStatusOperation)(nil),                   // 230: akuity.argocd.v1.ClusterAddonStatusOperation
	(*StatusOperation)(nil),                               // 231: akuity.argocd.v1.StatusOperation
	(*Addon)(nil),                                         // 232: akuity.argocd.v1.Addon
	(*AddonMarketplaceInstallRequest)(nil),                // 233: akuity.argocd.v1.AddonMarketplaceInstallRequest
	(*AddonMarketplaceInstallResponse)(nil),               // 234: akuity.argocd.v1.AddonMarketplaceInstallResponse
	(*UpdateAddonMarketplaceInstallRequest)(nil),          // 235: akuity.argocd.v1.UpdateAddonMarketplaceInstallRequest
	(*UpdateAddonMarketplaceInstallResponse)(nil),         // 236: akuity.argocd.v1.UpdateAddonMarketplaceInstallResponse
	(*ListAddonMarketplaceInstallsRequest)(nil),           // 237: akuity.argocd.v1.ListAddonMarketplaceInstallsRequest
	(*WatchAddonMarketplaceInstallsRequest)(nil),          // 238: akuity.argocd.v1.WatchAddonMarketplaceInstallsRequest
	(*WatchAddonMarketplaceInstallsResponse)(nil),         // 239: akuity.argocd.v1.WatchAddonMarketplaceInstallsResponse
	(*AddonMarketplaceInstallFilter)(nil),                 // 240: akuity.argocd.v1.AddonMarketplaceInstallFilter
	(*ListAddonMarketplaceInstallsResponse)(nil),          // 241: akuity.argocd.v1.ListAddonMarketplaceInstallsResponse
	(*AddonMarketplaceInstall)(nil),                       // 242: akuity.argocd.v1.AddonMarketplaceInstall
	(*AddonMarketplaceInstallConfig)(nil),                 // 243: akuity.argocd.v1.AddonMarketplaceInstallConfig
	(*AddonMarketplaceInstallOverrides)(nil),              // 244: akuity.argocd.v1.AddonMarketplaceInstallOverrides
	(*HelmChartInstallConfig)(nil),                        // 245: akuity.argocd.v1.HelmChartInstallConfig
	(*AddonMarketplaceStatus)(nil),                        // 246: akuity.argocd.v1.AddonMarketplaceStatus
	(*AddonEvent)(nil),                                    // 247: akuity.argocd.v1.AddonEvent
	nil,                                                   // 248: akuity.argocd.v1.GetInstanceNotificationSettingsResponse.SecretEntry
	nil,                                                   // 249: akuity.argocd.v1.GetInstanceNotificationSettingsResponse.ConfigEntry
	nil,                                                   // 250: akuity.argocd.v1.GetInstanceNotificationCatalogResponse.CatalogEntry
	nil,                                                   // 251: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.SecretEntry
	nil,                                                   // 252: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.ConfigEntry
	nil,                                                   // 253: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.SshConfigEntry
	nil,                                                   // 254: akuity.argocd.v1.PatchInstanceSecretRequest.SecretEntry
	(*PatchInstanceSecretRequest_ValueField)(nil),         // 255: akuity.argocd.v1.PatchInstanceSecretRequest.ValueField
	nil, // 256: akuity.argocd.v1.PatchInstanceNotificationSecretRequest.SecretEntry
	(*PatchInstanceNotificationSecretRequest_ValueField)(nil), // 257: akuity.argocd.v1.PatchInstanceNotificationSecretRequest.ValueField
	nil, // 258: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.SecretEntry
	(*PatchInstanceImageUpdaterSecretRequest_ValueField)(nil), // 259: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.ValueField
	nil, // 260: akuity.argocd.v1.PatchInstanceAppsetSecretRequest.SecretEntry
	(*PatchInstanceAppsetSecretRequest_ValueField)(nil), // 261: akuity.argocd.v1.PatchInstanceAppsetSecretRequest.ValueField
	nil,                           // 262: akuity.argocd.v1.GetInstanceAppsetSecretResponse.SecretEntry
	nil,                           // 263: akuity.argocd.v1.UpdateInstanceNotificationConfigRequest.ConfigEntry
	nil,                           // 264: akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest.ConfigEntry
	nil,                           // 265: akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest.ConfigEntry
	nil,                           // 266: akuity.argocd.v1.SyncOperationFilter.LabelsEntry
	nil,                           // 267: akuity.argocd.v1.SyncOperationStat.CountMapEntry
	nil,                           // 268: akuity.argocd.v1.SyncOperationStat.AverageMapEntry
	nil,                           // 269: akuity.argocd.v1.SyncOperationEventDetails.LabelsEntry
	nil,                           // 270: akuity.argocd.v1.ClusterFilter.LabelsEntry
	nil,                           // 271: akuity.argocd.v1.Instance.SecretsEntry
	nil,                           // 272: akuity.argocd.v1.ObjectSelector.MatchLabelsEntry
	nil,                           // 273: akuity.argocd.v1.ClusterData.LabelsEntry
	nil,                           // 274: akuity.argocd.v1.ClusterData.AnnotationsEntry
	nil,                           // 275: akuity.argocd.v1.GetInstanceClusterCommandResponse.VariablesEntry
	nil,                           // 276: akuity.argocd.v1.ParameterAnnouncement.MapEntry
	nil,                           // 277: akuity.argocd.v1.AddonFilter.ClusterLabelsEntry
	nil,                           // 278: akuity.argocd.v1.HelmSource.ValuesEntry
	nil,                           // 279: akuity.argocd.v1.AddonSpec.ClusterOverridesEntry
	nil,                           // 280: akuity.argocd.v1.AddonSpec.EnvOverridesEntry
	nil,                           // 281: akuity.argocd.v1.SourceInfo.ClusterOverridesEntry
	nil,                           // 282: akuity.argocd.v1.SourceInfo.EnvOverridesEntry
	(v1.Type)(0),                  // 283: akuity.types.id.v1.Type
	(*structpb.Struct)(nil),       // 284: google.protobuf.Struct
	(v11.GroupByInterval)(0),      // 285: akuity.types.misc.v1.GroupByInterval
	(v12.TenantPhase)(0),          // 286: akuity.types.status.health.v1.TenantPhase
	(v13.EventType)(0),            // 287: akuity.types.events.v1.EventType
	(*v12.Status)(nil),            // 288: akuity.types.status.health.v1.Status
	(*v14.Status)(nil),            // 289: akuity.types.status.reconciliation.v1.Status
	(*timestamppb.Timestamp)(nil), // 290: google.protobuf.Timestamp
	(*v12.AgentAggregatedHealthResponse)(nil), // 291: akuity.types.status.health.v1.AgentAggregatedHealthResponse
	(*httpbody.HttpBody)(nil),                 // 292: google.api.HttpBody
	(*emptypb.Empty)(nil),                     // 293: google.protobuf.Empty
}
var file_argocd_v1_argocd_proto_depIdxs = []int32{
	149, // 0: akuity.argocd.v1.ListInstanceVersionsResponse.versions:type_name -> akuity.argocd.v1.InstanceVersion
	125, // 1: akuity.argocd.v1.ListInstancesResponse.instances:type_name -> akuity.argocd.v1.Instance
	125, // 2: akuity.argocd.v1.CreateInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	283, // 3: akuity.argocd.v1.GetInstanceRequest.id_type:type_name -> akuity.types.id.v1.Type
	125, // 4: akuity.argocd.v1.GetInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	248, // 5: akuity.argocd.v1.GetInstanceNotificationSettingsResponse.secret:type_name -> akuity.argocd.v1.GetInstanceNotificationSettingsResponse.SecretEntry
	249, // 6: akuity.argocd.v1.GetInstanceNotificationSettingsResponse.config:type_name -> akuity.argocd.v1.GetInstanceNotificationSettingsResponse.ConfigEntry
	250, // 7: akuity.argocd.v1.GetInstanceNotificationCatalogResponse.catalog:type_name -> akuity.argocd.v1.GetInstanceNotificationCatalogResponse.CatalogEntry
	251, // 8: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.secret:type_name -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.SecretEntry
	252, // 9: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.config:type_name -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.ConfigEntry
	253, // 10: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.ssh_config:type_name -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.SshConfigEntry
	26,  // 11: akuity.argocd.v1.GetInstanceResourceCustomizationsResponse.resource_customizations:type_name -> akuity.argocd.v1.ResourceCustomizationConfig
	284, // 12: akuity.argocd.v1.PatchInstanceRequest.patch:type_name -> google.protobuf.Struct
	125, // 13: akuity.argocd.v1.PatchInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	254, // 14: akuity.argocd.v1.PatchInstanceSecretRequest.secret:type_name -> akuity.argocd.v1.PatchInstanceSecretRequest.SecretEntry
	256, // 15: akuity.argocd.v1.PatchInstanceNotificationSecretRequest.secret:type_name -> akuity.argocd.v1.PatchInstanceNotificationSecretRequest.SecretEntry
	258, // 16: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.secret:type_name -> akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.SecretEntry
	260, // 17: akuity.argocd.v1.PatchInstanceAppsetSecretRequest.secret:type_name -> akuity.argocd.v1.PatchInstanceAppsetSecretRequest.SecretEntry
	262, // 18: akuity.argocd.v1.GetInstanceAppsetSecretResponse.secret:type_name -> akuity.argocd.v1.GetInstanceAppsetSecretResponse.SecretEntry
	125, // 19: akuity.argocd.v1.UpdateInstanceRequest.instance:type_name -> akuity.argocd.v1.Instance
	125, // 20: akuity.argocd.v1.UpdateInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	263, // 21: akuity.argocd.v1.UpdateInstanceNotificationConfigRequest.config:type_name -> akuity.argocd.v1.UpdateInstanceNotificationConfigRequest.ConfigEntry
	264, // 22: akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest.config:type_name -> akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest.ConfigEntry
	265, // 23: akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest.config:type_name -> akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest.ConfigEntry
	26,  // 24: akuity.argocd.v1.UpdateInstanceResourceCustomizationsRequest.resources:type_name -> akuity.argocd.v1.ResourceCustomizationConfig
	126, // 25: akuity.argocd.v1.ListInstanceAccountsResponse.accounts:type_name -> akuity.argocd.v1.InstanceAccount
	148, // 26: akuity.argocd.v1.UpsertInstanceAccountRequest.capabilities:type_name -> akuity.argocd.v1.InstanceAccountCapabilities
	126, // 27: akuity.argocd.v1.UpsertInstanceAccountResponse.account:type_name -> akuity.argocd.v1.InstanceAccount
	71,  // 28: akuity.argocd.v1.GetSyncOperationsStatsRequest.filter:type_name -> akuity.argocd.v1.SyncOperationFilter
	285, // 29: akuity.argocd.v1.GetSyncOperationsStatsRequest.interval:type_name -> akuity.types.misc.v1.GroupByInterval
	1,   // 30: akuity.argocd.v1.GetSyncOperationsStatsRequest.group_by_field:type_name -> akuity.argocd.v1.SyncOperationGroupField
	71,  // 31: akuity.argocd.v1.GetSyncOperationsEventsRequest.filter:type_name -> akuity.argocd.v1.SyncOperationFilter
	0,   // 32: akuity.argocd.v1.GetSyncOperationsEventsRequest.field:type_name -> akuity.argocd.v1.SyncOperationField
	266, // 33: akuity.argocd.v1.SyncOperationFilter.labels:type_name -> akuity.argocd.v1.SyncOperationFilter.LabelsEntry
	267, // 34: akuity.argocd.v1.SyncOperationStat.count_map:type_name -> akuity.argocd.v1.SyncOperationStat.CountMapEntry
	268, // 35: akuity.argocd.v1.SyncOperationStat.average_map:type_name -> akuity.argocd.v1.SyncOperationStat.AverageMapEntry
	75,  // 36: akuity.argocd.v1.SyncOperationEvent.details:type_name -> akuity.argocd.v1.SyncOperationEventDetails
	269, // 37: akuity.argocd.v1.SyncOperationEventDetails.labels:type_name -> akuity.argocd.v1.SyncOperationEventDetails.LabelsEntry
	76,  // 38: akuity.argocd.v1.SyncOperationEventDetails.initiated_by:type_name -> akuity.argocd.v1.OperationInitiator
	73,  // 39: akuity.argocd.v1.GetSyncOperationsStatsResponse.sync_operation_stats:type_name -> akuity.argocd.v1.SyncOperationStat
	74,  // 40: akuity.argocd.v1.GetSyncOperationsEventsResponse.sync_operation_events:type_name -> akuity.argocd.v1.SyncOperationEvent
	286, // 41: akuity.argocd.v1.ClusterFilter.agent_status:type_name -> akuity.types.status.health.v1.TenantPhase
	270, // 42: akuity.argocd.v1.ClusterFilter.labels:type_name -> akuity.argocd.v1.ClusterFilter.LabelsEntry
	79,  // 43: akuity.argocd.v1.ListInstanceClustersRequest.filter:type_name -> akuity.argocd.v1.ClusterFilter
	79,  // 44: akuity.argocd.v1.WatchInstanceClustersRequest.filter:type_name -> akuity.argocd.v1.ClusterFilter
	199, // 45: akuity.argocd.v1.WatchInstanceAddonsRequest.filter:type_name -> akuity.argocd.v1.AddonFilter
	125, // 46: akuity.argocd.v1.WatchInstancesResponse.item:type_name -> akuity.argocd.v1.Instance
	287, // 47: akuity.argocd.v1.WatchInstancesResponse.type:type_name -> akuity.types.events.v1.EventType
	232, // 48: akuity.argocd.v1.WatchInstanceAddonsResponse.item:type_name -> akuity.argocd.v1.Addon
	287, // 49: akuity.argocd.v1.WatchInstanceAddonsResponse.type:type_name -> akuity.types.events.v1.EventType
	194, // 50: akuity.argocd.v1.WatchInstanceAddonReposResponse.item:type_name -> akuity.argocd.v1.AddonRepo
	287, // 51: akuity.argocd.v1.WatchInstanceAddonReposResponse.type:type_name -> akuity.types.events.v1.EventType
	164, // 52: akuity.argocd.v1.WatchInstanceClustersResponse.item:type_name -> akuity.argocd.v1.Cluster
	287, // 53: akuity.argocd.v1.WatchInstanceClustersResponse.type:type_name -> akuity.types.events.v1.EventType
	164, // 54: akuity.argocd.v1.ListInstanceClustersResponse.clusters:type_name -> akuity.argocd.v1.Cluster
	163, // 55: akuity.argocd.v1.CreateInstanceClusterRequest.data:type_name -> akuity.argocd.v1.ClusterData
	164, // 56: akuity.argocd.v1.CreateInstanceClusterResponse.cluster:type_name -> akuity.argocd.v1.Cluster
	283, // 57: akuity.argocd.v1.GetInstanceClusterRequest.id_type:type_name -> akuity.types.id.v1.Type
	164, // 58: akuity.argocd.v1.GetInstanceClusterResponse.cluster:type_name -> akuity.argocd.v1.Cluster
	163, // 59: akuity.argocd.v1.UpdateInstanceClusterRequest.data:type_name -> akuity.argocd.v1.ClusterData
	164, // 60: akuity.argocd.v1.UpdateInstanceClusterResponse.cluster:type_name -> akuity.argocd.v1.Cluster
	124, // 61: akuity.argocd.v1.UpdateInstanceClustersRequest.cluster_customizations:type_name -> akuity.argocd.v1.ClusterCustomization
	107, // 62: akuity.argocd.v1.ApplicationsStatus.health:type_name -> akuity.argocd.v1.ApplicationsHealth
	108, // 63: akuity.argocd.v1.ApplicationsStatus.sync_status:type_name -> akuity.argocd.v1.ApplicationsSyncStatus
	119, // 64: akuity.argocd.v1.ArgoCDConfigMap.status_badge:type_name -> akuity.argocd.v1.ArgoCDStatusBadgeConfig
	116, // 65: akuity.argocd.v1.ArgoCDConfigMap.google_analytics:type_name -> akuity.argocd.v1.ArgoCDGoogleAnalyticsConfig
	114, // 66: akuity.argocd.v1.ArgoCDConfigMap.banner:type_name -> akuity.argocd.v1.ArgoCDBannerConfig
	113, // 67: akuity.argocd.v1.ArgoCDConfigMap.chat:type_name -> akuity.argocd.v1.ArgoCDAlertConfig
	118, // 68: akuity.argocd.v1.ArgoCDConfigMap.kustomize_settings:type_name -> akuity.argocd.v1.ArgoCDKustomizeSettings
	117, // 69: akuity.argocd.v1.ArgoCDConfigMap.helm_settings:type_name -> akuity.argocd.v1.ArgoCDHelmSettings
	122, // 70: akuity.argocd.v1.ArgoCDConfigMap.resource_settings:type_name -> akuity.argocd.v1.ArgoCDResourceSettings
	123, // 71: akuity.argocd.v1.ArgoCDConfigMap.web_terminal:type_name -> akuity.argocd.v1.ArgoCDWebTerminalConfig
	112, // 72: akuity.argocd.v1.ArgoCDConfigMap.deep_links:type_name -> akuity.argocd.v1.ArgoCDDeepLinks
	111, // 73: akuity.argocd.v1.ArgoCDDeepLinks.project_links:type_name -> akuity.argocd.v1.DeepLink
	111, // 74: akuity.argocd.v1.ArgoCDDeepLinks.application_links:type_name -> akuity.argocd.v1.DeepLink
	111, // 75: akuity.argocd.v1.ArgoCDDeepLinks.resource_links:type_name -> akuity.argocd.v1.DeepLink
	121, // 76: akuity.argocd.v1.ArgoCDRBACConfigMap.overlay_policies:type_name -> akuity.argocd.v1.OverlayPolicy
	284, // 77: akuity.argocd.v1.ClusterCustomization.kustomization:type_name -> google.protobuf.Struct
	271, // 78: akuity.argocd.v1.Instance.secrets:type_name -> akuity.argocd.v1.Instance.SecretsEntry
	288, // 79: akuity.argocd.v1.Instance.health_status:type_name -> akuity.types.status.health.v1.Status
	289, // 80: akuity.argocd.v1.Instance.reconciliation_status:type_name -> akuity.types.status.reconciliation.v1.Status
	290, // 81: akuity.argocd.v1.Instance.delete_time:type_name -> google.protobuf.Timestamp
	143, // 82: akuity.argocd.v1.Instance.spec:type_name -> akuity.argocd.v1.InstanceSpec
	110, // 83: akuity.argocd.v1.Instance.config:type_name -> akuity.argocd.v1.ArgoCDConfigMap
	120, // 84: akuity.argocd.v1.Instance.rbac_config:type_name -> akuity.argocd.v1.ArgoCDRBACConfigMap
	128, // 85: akuity.argocd.v1.Instance.info:type_name -> akuity.argocd.v1.InstanceInfo
	148, // 86: akuity.argocd.v1.InstanceAccount.capabilities:type_name -> akuity.argocd.v1.InstanceAccountCapabilities
	109, // 87: akuity.argocd.v1.InstanceInfo.applications_status:type_name -> akuity.argocd.v1.ApplicationsStatus
	127, // 88: akuity.argocd.v1.InstanceInfo.certificate_status:type_name -> akuity.argocd.v1.CertificateStatus
	131, // 89: akuity.argocd.v1.CrossplaneExtension.resources:type_name -> akuity.argocd.v1.CrossplaneExtensionResource
	137, // 90: akuity.argocd.v1.KubeVisionConfig.cve_scan_config:type_name -> akuity.argocd.v1.CveScanConfig
	272, // 91: akuity.argocd.v1.ObjectSelector.match_labels:type_name -> akuity.argocd.v1.ObjectSelector.MatchLabelsEntry
	139, // 92: akuity.argocd.v1.ObjectSelector.match_expressions:type_name -> akuity.argocd.v1.LabelSelectorRequirement
	138, // 93: akuity.argocd.v1.ClusterSecretMapping.clusters:type_name -> akuity.argocd.v1.ObjectSelector
	138, // 94: akuity.argocd.v1.ClusterSecretMapping.secrets:type_name -> akuity.argocd.v1.ObjectSelector
	140, // 95: akuity.argocd.v1.SecretsManagementConfig.sources:type_name -> akuity.argocd.v1.ClusterSecretMapping
	140, // 96: akuity.argocd.v1.SecretsManagementConfig.destinations:type_name -> akuity.argocd.v1.ClusterSecretMapping
	150, // 97: akuity.argocd.v1.InstanceSpec.ip_allow_list:type_name -> akuity.argocd.v1.IPAllowListEntry
	115, // 98: akuity.argocd.v1.InstanceSpec.extensions:type_name -> akuity.argocd.v1.ArgoCDExtensionInstallEntry
	124, // 99: akuity.argocd.v1.InstanceSpec.cluster_customization_defaults:type_name -> akuity.argocd.v1.ClusterCustomization
	145, // 100: akuity.argocd.v1.InstanceSpec.repo_server_delegate:type_name -> akuity.argocd.v1.RepoServerDelegate
	132, // 101: akuity.argocd.v1.InstanceSpec.crossplane_extension:type_name -> akuity.argocd.v1.CrossplaneExtension
	146, // 102: akuity.argocd.v1.InstanceSpec.image_updater_delegate:type_name -> akuity.argocd.v1.ImageUpdaterDelegate
	147, // 103: akuity.argocd.v1.InstanceSpec.app_set_delegate:type_name -> akuity.argocd.v1.AppSetDelegate
	129, // 104: akuity.argocd.v1.InstanceSpec.appset_policy:type_name -> akuity.argocd.v1.AppsetPolicy
	151, // 105: akuity.argocd.v1.InstanceSpec.host_aliases:type_name -> akuity.argocd.v1.HostAliases
	130, // 106: akuity.argocd.v1.InstanceSpec.agent_permissions_rules:type_name -> akuity.argocd.v1.AgentPermissionsRule
	133, // 107: akuity.argocd.v1.InstanceSpec.kube_vision_argo_extension:type_name -> akuity.argocd.v1.KubeVisionArgoExtension
	136, // 108: akuity.argocd.v1.InstanceSpec.custom_deprecated_apis:type_name -> akuity.argocd.v1.CustomDeprecatedAPI
	134, // 109: akuity.argocd.v1.InstanceSpec.kube_vision_config:type_name -> akuity.argocd.v1.KubeVisionConfig
	135, // 110: akuity.argocd.v1.InstanceSpec.app_in_any_namespace_config:type_name -> akuity.argocd.v1.AppInAnyNamespaceConfig
	142, // 111: akuity.argocd.v1.InstanceSpec.ai_support_engineer_extension:type_name -> akuity.argocd.v1.AISupportEngineerExtension
	141, // 112: akuity.argocd.v1.InstanceSpec.secrets:type_name -> akuity.argocd.v1.SecretsManagementConfig
	144, // 113: akuity.argocd.v1.RepoServerDelegate.managed_cluster:type_name -> akuity.argocd.v1.ManagedCluster
	144, // 114: akuity.argocd.v1.ImageUpdaterDelegate.managed_cluster:type_name -> akuity.argocd.v1.ManagedCluster
	144, // 115: akuity.argocd.v1.AppSetDelegate.managed_cluster:type_name -> akuity.argocd.v1.ManagedCluster
	152, // 116: akuity.argocd.v1.ApplicationControllerResources.requests:type_name -> akuity.argocd.v1.Resources
	152, // 117: akuity.argocd.v1.ApplicationControllerResources.limits:type_name -> akuity.argocd.v1.Resources
	152, // 118: akuity.argocd.v1.RepoServerResources.requests:type_name -> akuity.argocd.v1.Resources
	152, // 119: akuity.argocd.v1.RepoServerResources.limits:type_name -> akuity.argocd.v1.Resources
	153, // 120: akuity.argocd.v1.AgentResources.application_controller:type_name -> akuity.argocd.v1.ApplicationControllerResources
	154, // 121: akuity.argocd.v1.AgentResources.repo_server:type_name -> akuity.argocd.v1.RepoServerResources
	290, // 122: akuity.argocd.v1.AgentState.observe_time:type_name -> google.protobuf.Timestamp
	291, // 123: akuity.argocd.v1.AgentState.status:type_name -> akuity.types.status.health.v1.AgentAggregatedHealthResponse
	155, // 124: akuity.argocd.v1.AgentState.agent_resources:type_name -> akuity.argocd.v1.AgentResources
	3,   // 125: akuity.argocd.v1.DirectClusterSpec.cluster_type:type_name -> akuity.argocd.v1.DirectClusterType
	160, // 126: akuity.argocd.v1.AutoScalerConfig.application_controller:type_name -> akuity.argocd.v1.AppControllerAutoScalingConfig
	161, // 127: akuity.argocd.v1.AutoScalerConfig.repo_server:type_name -> akuity.argocd.v1.RepoServerAutoScalingConfig
	152, // 128: akuity.argocd.v1.AppControllerAutoScalingConfig.resource_minimum:type_name -> akuity.argocd.v1.Resources
	152, // 129: akuity.argocd.v1.AppControllerAutoScalingConfig.resource_maximum:type_name -> akuity.argocd.v1.Resources
	152, // 130: akuity.argocd.v1.RepoServerAutoScalingConfig.resource_minimum:type_name -> akuity.argocd.v1.Resources
	152, // 131: akuity.argocd.v1.RepoServerAutoScalingConfig.resource_maximum:type_name -> akuity.argocd.v1.Resources
	2,   // 132: akuity.argocd.v1.ClusterData.size:type_name -> akuity.argocd.v1.ClusterSize
	273, // 133: akuity.argocd.v1.ClusterData.labels:type_name -> akuity.argocd.v1.ClusterData.LabelsEntry
	274, // 134: akuity.argocd.v1.ClusterData.annotations:type_name -> akuity.argocd.v1.ClusterData.AnnotationsEntry
	284, // 135: akuity.argocd.v1.ClusterData.kustomization:type_name -> google.protobuf.Struct
	157, // 136: akuity.argocd.v1.ClusterData.direct_cluster_spec:type_name -> akuity.argocd.v1.DirectClusterSpec
	158, // 137: akuity.argocd.v1.ClusterData.managed_cluster_config:type_name -> akuity.argocd.v1.ManagedClusterConfig
	159, // 138: akuity.argocd.v1.ClusterData.autoscaler_config:type_name -> akuity.argocd.v1.AutoScalerConfig
	162, // 139: akuity.argocd.v1.ClusterData.compatibility:type_name -> akuity.argocd.v1.ClusterCompatibility
	163, // 140: akuity.argocd.v1.Cluster.data:type_name -> akuity.argocd.v1.ClusterData
	290, // 141: akuity.argocd.v1.Cluster.delete_time:type_name -> google.protobuf.Timestamp
	156, // 142: akuity.argocd.v1.Cluster.agent_state:type_name -> akuity.argocd.v1.AgentState
	288, // 143: akuity.argocd.v1.Cluster.health_status:type_name -> akuity.types.status.health.v1.Status
	289, // 144: akuity.argocd.v1.Cluster.reconciliation_status:type_name -> akuity.types.status.reconciliation.v1.Status
	165, // 145: akuity.argocd.v1.Cluster.k8s_status:type_name -> akuity.argocd.v1.ClusterKubernetesStatus
	283, // 146: akuity.argocd.v1.ApplyInstanceRequest.id_type:type_name -> akuity.types.id.v1.Type
	284, // 147: akuity.argocd.v1.ApplyInstanceRequest.argocd:type_name -> google.protobuf.Struct
	284, // 148: akuity.argocd.v1.ApplyInstanceRequest.argocd_configmap:type_name -> google.protobuf.Struct
	284, // 149: akuity.argocd.v1.ApplyInstanceRequest.argocd_rbac_configmap:type_name -> google.protobuf.Struct
	284, // 150: akuity.argocd.v1.ApplyInstanceRequest.argocd_secret:type_name -> google.protobuf.Struct
	284, // 151: akuity.argocd.v1.ApplyInstanceRequest.notifications_configmap:type_name -> google.protobuf.Struct
	284, // 152: akuity.argocd.v1.ApplyInstanceRequest.notifications_secret:type_name -> google.protobuf.Struct
	284, // 153: akuity.argocd.v1.ApplyInstanceRequest.image_updater_configmap:type_name -> google.protobuf.Struct
	284, // 154: akuity.argocd.v1.ApplyInstanceRequest.image_updater_ssh_configmap:type_name -> google.protobuf.Struct
	284, // 155: akuity.argocd.v1.ApplyInstanceRequest.image_updater_secret:type_name -> google.protobuf.Struct
	284, // 156: akuity.argocd.v1.ApplyInstanceRequest.clusters:type_name -> google.protobuf.Struct
	284, // 157: akuity.argocd.v1.ApplyInstanceRequest.argocd_known_hosts_configmap:type_name -> google.protobuf.Struct
	284, // 158: akuity.argocd.v1.ApplyInstanceRequest.argocd_tls_certs_configmap:type_name -> google.protobuf.Struct
	284, // 159: akuity.argocd.v1.ApplyInstanceRequest.repo_credential_secrets:type_name -> google.protobuf.Struct
	284, // 160: akuity.argocd.v1.ApplyInstanceRequest.repo_template_credential_secrets:type_name -> google.protobuf.Struct
	284, // 161: akuity.argocd.v1.ApplyInstanceRequest.config_management_plugins:type_name -> google.protobuf.Struct
	4,   // 162: akuity.argocd.v1.ApplyInstanceRequest.prune_resource_types:type_name -> akuity.argocd.v1.PruneResourceType
	284, // 163: akuity.argocd.v1.ApplyInstanceRequest.application_set_secret:type_name -> google.protobuf.Struct
	284, // 164: akuity.argocd.v1.ApplyInstanceRequest.applications:type_name -> google.protobuf.Struct
	284, // 165: akuity.argocd.v1.ApplyInstanceRequest.application_sets:type_name -> google.protobuf.Struct
	284, // 166: akuity.argocd.v1.ApplyInstanceRequest.app_projects:type_name -> google.protobuf.Struct
	283, // 167: akuity.argocd.v1.ExportInstanceRequest.id_type:type_name -> akuity.types.id.v1.Type
	284, // 168: akuity.argocd.v1.ExportInstanceResponse.argocd:type_name -> google.protobuf.Struct
	284, // 169: akuity.argocd.v1.ExportInstanceResponse.argocd_configmap:type_name -> google.protobuf.Struct
	284, // 170: akuity.argocd.v1.ExportInstanceResponse.argocd_rbac_configmap:type_name -> google.protobuf.Struct
	284, // 171: akuity.argocd.v1.ExportInstanceResponse.notifications_configmap:type_name -> google.protobuf.Struct
	284, // 172: akuity.argocd.v1.ExportInstanceResponse.image_updater_configmap:type_name -> google.protobuf.Struct
	284, // 173: akuity.argocd.v1.ExportInstanceResponse.image_updater_ssh_configmap:type_name -> google.protobuf.Struct
	284, // 174: akuity.argocd.v1.ExportInstanceResponse.clusters:type_name -> google.protobuf.Struct
	284, // 175: akuity.argocd.v1.ExportInstanceResponse.argocd_known_hosts_configmap:type_name -> google.protobuf.Struct
	284, // 176: akuity.argocd.v1.ExportInstanceResponse.argocd_tls_certs_configmap:type_name -> google.protobuf.Struct
	284, // 177: akuity.argocd.v1.ExportInstanceResponse.config_management_plugins:type_name -> google.protobuf.Struct
	284, // 178: akuity.argocd.v1.ExportInstanceResponse.applications:type_name -> google.protobuf.Struct
	284, // 179: akuity.argocd.v1.ExportInstanceResponse.application_sets:type_name -> google.protobuf.Struct
	284, // 180: akuity.argocd.v1.ExportInstanceResponse.app_projects:type_name -> google.protobuf.Struct
	5,   // 181: akuity.argocd.v1.GetInstanceClusterCommandRequest.command_for:type_name -> akuity.argocd.v1.ClusterCommandFor
	275, // 182: akuity.argocd.v1.GetInstanceClusterCommandResponse.variables:type_name -> akuity.argocd.v1.GetInstanceClusterCommandResponse.VariablesEntry
	173, // 183: akuity.argocd.v1.ConfigManagementPlugin.spec:type_name -> akuity.argocd.v1.PluginSpec
	174, // 184: akuity.argocd.v1.PluginSpec.init:type_name -> akuity.argocd.v1.Command
	174, // 185: akuity.argocd.v1.PluginSpec.generate:type_name -> akuity.argocd.v1.Command
	175, // 186: akuity.argocd.v1.PluginSpec.discover:type_name -> akuity.argocd.v1.Discover
	177, // 187: akuity.argocd.v1.PluginSpec.parameters:type_name -> akuity.argocd.v1.Parameters
	176, // 188: akuity.argocd.v1.Discover.find:type_name -> akuity.argocd.v1.Find
	179, // 189: akuity.argocd.v1.Parameters.static:type_name -> akuity.argocd.v1.ParameterAnnouncement
	178, // 190: akuity.argocd.v1.Parameters.dynamic:type_name -> akuity.argocd.v1.Dynamic
	276, // 191: akuity.argocd.v1.ParameterAnnouncement.map:type_name -> akuity.argocd.v1.ParameterAnnouncement.MapEntry
	172, // 192: akuity.argocd.v1.GetInstanceConfigManagementPluginsResponse.plugins:type_name -> akuity.argocd.v1.ConfigManagementPlugin
	172, // 193: akuity.argocd.v1.UpdateInstanceConfigManagementPluginsRequest.plugins:type_name -> akuity.argocd.v1.ConfigManagementPlugin
	194, // 194: akuity.argocd.v1.ListInstanceAddonReposResponse.addon_repos:type_name -> akuity.argocd.v1.AddonRepo
	194, // 195: akuity.argocd.v1.GetInstanceAddonRepoResponse.addon_repo:type_name -> akuity.argocd.v1.AddonRepo
	195, // 196: akuity.argocd.v1.CreateInstanceAddonRepoRequest.spec:type_name -> akuity.argocd.v1.RepoSpec
	194, // 197: akuity.argocd.v1.CreateInstanceAddonRepoResponse.addon_repo:type_name -> akuity.argocd.v1.AddonRepo
	194, // 198: akuity.argocd.v1.RefreshInstanceAddonRepoResponse.addon_repo:type_name -> akuity.argocd.v1.AddonRepo
	195, // 199: akuity.argocd.v1.AddonRepo.spec:type_name -> akuity.argocd.v1.RepoSpec
	196, // 200: akuity.argocd.v1.AddonRepo.status:type_name -> akuity.argocd.v1.RepoStatus
	290, // 201: akuity.argocd.v1.AddonRepo.delete_time:type_name -> google.protobuf.Timestamp
	289, // 202: akuity.argocd.v1.RepoStatus.reconciliation_status:type_name -> akuity.types.status.reconciliation.v1.Status
	232, // 203: akuity.argocd.v1.GetInstanceAddonResponse.addon:type_name -> akuity.argocd.v1.Addon
	6,   // 204: akuity.argocd.v1.AddonFilter.sort_by:type_name -> akuity.argocd.v1.SortAddons
	7,   // 205: akuity.argocd.v1.AddonFilter.addon_type:type_name -> akuity.argocd.v1.AddonType
	277, // 206: akuity.argocd.v1.AddonFilter.cluster_labels:type_name -> akuity.argocd.v1.AddonFilter.ClusterLabelsEntry
	199, // 207: akuity.argocd.v1.ListInstanceAddonsRequest.filter:type_name -> akuity.argocd.v1.AddonFilter
	232, // 208: akuity.argocd.v1.ListInstanceAddonsResponse.addons:type_name -> akuity.argocd.v1.Addon
	232, // 209: akuity.argocd.v1.UpdateInstanceAddonRequest.addon:type_name -> akuity.argocd.v1.Addon
	232, // 210: akuity.argocd.v1.UpdateInstanceAddonResponse.addon:type_name -> akuity.argocd.v1.Addon
	284, // 211: akuity.argocd.v1.PatchInstanceAddonRequest.patch:type_name -> google.protobuf.Struct
	232, // 212: akuity.argocd.v1.PatchInstanceAddonResponse.addon:type_name -> akuity.argocd.v1.Addon
	232, // 213: akuity.argocd.v1.RefreshInstanceAddonResponse.addon:type_name -> akuity.argocd.v1.Addon
	209, // 214: akuity.argocd.v1.ManifestSource.kustomize_source:type_name -> akuity.argocd.v1.KustomizeSource
	212, // 215: akuity.argocd.v1.ManifestSource.helm_source:type_name -> akuity.argocd.v1.HelmSource
	210, // 216: akuity.argocd.v1.KustomizeSource.images:type_name -> akuity.argocd.v1.KustomizeImage
	211, // 217: akuity.argocd.v1.KustomizeSource.helm_charts:type_name -> akuity.argocd.v1.KustomizeHelmChart
	278, // 218: akuity.argocd.v1.HelmSource.values:type_name -> akuity.argocd.v1.HelmSource.ValuesEntry
	218, // 219: akuity.argocd.v1.HelmSource.dependencies:type_name -> akuity.argocd.v1.ChartDependency
	214, // 220: akuity.argocd.v1.ClusterSelector.name_filters:type_name -> akuity.argocd.v1.Selector
	214, // 221: akuity.argocd.v1.ClusterSelector.label_filters:type_name -> akuity.argocd.v1.Selector
	8,   // 222: akuity.argocd.v1.Selector.selector_operator:type_name -> akuity.argocd.v1.SelectorOperator
	279, // 223: akuity.argocd.v1.AddonSpec.cluster_overrides:type_name -> akuity.argocd.v1.AddonSpec.ClusterOverridesEntry
	280, // 224: akuity.argocd.v1.AddonSpec.env_overrides:type_name -> akuity.argocd.v1.AddonSpec.EnvOverridesEntry
	213, // 225: akuity.argocd.v1.AddonSpec.cluster_selector:type_name -> akuity.argocd.v1.ClusterSelector
	222, // 226: akuity.argocd.v1.AddonSpec.app_template:type_name -> akuity.argocd.v1.AppTemplate
	208, // 227: akuity.argocd.v1.AddonSpec.default_manifest:type_name -> akuity.argocd.v1.ManifestSource
	217, // 228: akuity.argocd.v1.AddonSpec.helm_values:type_name -> akuity.argocd.v1.HelmValues
	216, // 229: akuity.argocd.v1.AddonSpec.patch_customizations:type_name -> akuity.argocd.v1.PatchCustomization
	213, // 230: akuity.argocd.v1.PatchCustomization.cluster_selector:type_name -> akuity.argocd.v1.ClusterSelector
	284, // 231: akuity.argocd.v1.PatchCustomization.patch:type_name -> google.protobuf.Struct
	9,   // 232: akuity.argocd.v1.AppCreationOptions.on_conflict:type_name -> akuity.argocd.v1.OnConflictAction
	219, // 233: akuity.argocd.v1.AppTemplate.creation_options:type_name -> akuity.argocd.v1.AppCreationOptions
	220, // 234: akuity.argocd.v1.AppTemplate.deletion_options:type_name -> akuity.argocd.v1.AppDeletionOptions
	221, // 235: akuity.argocd.v1.AppTemplate.sync_options:type_name -> akuity.argocd.v1.AppSyncOptions
	223, // 236: akuity.argocd.v1.AppTemplate.helm_options:type_name -> akuity.argocd.v1.HelmOptions
	224, // 237: akuity.argocd.v1.AppTemplate.kustomize_options:type_name -> akuity.argocd.v1.KustomizeOptions
	290, // 238: akuity.argocd.v1.StatusSourceUpdate.start_timestamp:type_name -> google.protobuf.Timestamp
	227, // 239: akuity.argocd.v1.StatusSourceUpdate.sources:type_name -> akuity.argocd.v1.SourceInfo
	290, // 240: akuity.argocd.v1.SourceUpdateResult.start_timestamp:type_name -> google.protobuf.Timestamp
	290, // 241: akuity.argocd.v1.SourceUpdateResult.completed_timestamp:type_name -> google.protobuf.Timestamp
	284, // 242: akuity.argocd.v1.SourceUpdateResult.changes:type_name -> google.protobuf.Struct
	208, // 243: akuity.argocd.v1.SourceInfo.default_manifest:type_name -> akuity.argocd.v1.ManifestSource
	281, // 244: akuity.argocd.v1.SourceInfo.cluster_overrides:type_name -> akuity.argocd.v1.SourceInfo.ClusterOverridesEntry
	282, // 245: akuity.argocd.v1.SourceInfo.env_overrides:type_name -> akuity.argocd.v1.SourceInfo.EnvOverridesEntry
	289, // 246: akuity.argocd.v1.AddonStatus.reconciliation_status:type_name -> akuity.types.status.reconciliation.v1.Status
	107, // 247: akuity.argocd.v1.AddonStatus.health:type_name -> akuity.argocd.v1.ApplicationsHealth
	108, // 248: akuity.argocd.v1.AddonStatus.sync_status:type_name -> akuity.argocd.v1.ApplicationsSyncStatus
	226, // 249: akuity.argocd.v1.AddonStatus.last_source_update_status:type_name -> akuity.argocd.v1.SourceUpdateResult
	290, // 250: akuity.argocd.v1.AddonCondition.last_transition_time:type_name -> google.protobuf.Timestamp
	230, // 251: akuity.argocd.v1.StatusOperation.cluster_addon_status_operation:type_name -> akuity.argocd.v1.ClusterAddonStatusOperation
	213, // 252: akuity.argocd.v1.StatusOperation.cluster_selector:type_name -> akuity.argocd.v1.ClusterSelector
	215, // 253: akuity.argocd.v1.Addon.spec:type_name -> akuity.argocd.v1.AddonSpec
	231, // 254: akuity.argocd.v1.Addon.status_operation:type_name -> akuity.argocd.v1.StatusOperation
	228, // 255: akuity.argocd.v1.Addon.status:type_name -> akuity.argocd.v1.AddonStatus
	290, // 256: akuity.argocd.v1.Addon.delete_time:type_name -> google.protobuf.Timestamp
	225, // 257: akuity.argocd.v1.Addon.status_source_update:type_name -> akuity.argocd.v1.StatusSourceUpdate
	243, // 258: akuity.argocd.v1.AddonMarketplaceInstallRequest.config:type_name -> akuity.argocd.v1.AddonMarketplaceInstallConfig
	242, // 259: akuity.argocd.v1.AddonMarketplaceInstallResponse.addon_install:type_name -> akuity.argocd.v1.AddonMarketplaceInstall
	218, // 260: akuity.argocd.v1.UpdateAddonMarketplaceInstallRequest.dependencies:type_name -> akuity.argocd.v1.ChartDependency
	242, // 261: akuity.argocd.v1.UpdateAddonMarketplaceInstallResponse.addon_install:type_name -> akuity.argocd.v1.AddonMarketplaceInstall
	240, // 262: akuity.argocd.v1.ListAddonMarketplaceInstallsRequest.filter:type_name -> akuity.argocd.v1.AddonMarketplaceInstallFilter
	242, // 263: akuity.argocd.v1.WatchAddonMarketplaceInstallsResponse.item:type_name -> akuity.argocd.v1.AddonMarketplaceInstall
	287, // 264: akuity.argocd.v1.WatchAddonMarketplaceInstallsResponse.type:type_name -> akuity.types.events.v1.EventType
	218, // 265: akuity.argocd.v1.AddonMarketplaceInstallFilter.dependency:type_name -> akuity.argocd.v1.ChartDependency
	242, // 266: akuity.argocd.v1.ListAddonMarketplaceInstallsResponse.addon_installs:type_name -> akuity.argocd.v1.AddonMarketplaceInstall
	243, // 267: akuity.argocd.v1.AddonMarketplaceInstall.config:type_name -> akuity.argocd.v1.AddonMarketplaceInstallConfig
	246, // 268: akuity.argocd.v1.AddonMarketplaceInstall.status_info:type_name -> akuity.argocd.v1.AddonMarketplaceStatus
	245, // 269: akuity.argocd.v1.AddonMarketplaceInstallConfig.helm_chart_config:type_name -> akuity.argocd.v1.HelmChartInstallConfig
	244, // 270: akuity.argocd.v1.AddonMarketplaceInstallConfig.overrides:type_name -> akuity.argocd.v1.AddonMarketplaceInstallOverrides
	218, // 271: akuity.argocd.v1.HelmChartInstallConfig.dependencies:type_name -> akuity.argocd.v1.ChartDependency
	247, // 272: akuity.argocd.v1.AddonMarketplaceStatus.event_list:type_name -> akuity.argocd.v1.AddonEvent
	290, // 273: akuity.argocd.v1.AddonEvent.time:type_name -> google.protobuf.Timestamp
	218, // 274: akuity.argocd.v1.AddonEvent.dependencies:type_name -> akuity.argocd.v1.ChartDependency
	255, // 275: akuity.argocd.v1.PatchInstanceSecretRequest.SecretEntry.value:type_name -> akuity.argocd.v1.PatchInstanceSecretRequest.ValueField
	257, // 276: akuity.argocd.v1.PatchInstanceNotificationSecretRequest.SecretEntry.value:type_name -> akuity.argocd.v1.PatchInstanceNotificationSecretRequest.ValueField
	259, // 277: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.SecretEntry.value:type_name -> akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.ValueField
	261, // 278: akuity.argocd.v1.PatchInstanceAppsetSecretRequest.SecretEntry.value:type_name -> akuity.argocd.v1.PatchInstanceAppsetSecretRequest.ValueField
	208, // 279: akuity.argocd.v1.AddonSpec.ClusterOverridesEntry.value:type_name -> akuity.argocd.v1.ManifestSource
	208, // 280: akuity.argocd.v1.AddonSpec.EnvOverridesEntry.value:type_name -> akuity.argocd.v1.ManifestSource
	208, // 281: akuity.argocd.v1.SourceInfo.ClusterOverridesEntry.value:type_name -> akuity.argocd.v1.ManifestSource
	208, // 282: akuity.argocd.v1.SourceInfo.EnvOverridesEntry.value:type_name -> akuity.argocd.v1.ManifestSource
	10,  // 283: akuity.argocd.v1.ArgoCDService.ListInstanceVersions:input_type -> akuity.argocd.v1.ListInstanceVersionsRequest
	12,  // 284: akuity.argocd.v1.ArgoCDService.ListInstances:input_type -> akuity.argocd.v1.ListInstancesRequest
	82,  // 285: akuity.argocd.v1.ArgoCDService.WatchInstances:input_type -> akuity.argocd.v1.WatchInstancesRequest
	14,  // 286: akuity.argocd.v1.ArgoCDService.CreateInstance:input_type -> akuity.argocd.v1.CreateInstanceRequest
	16,  // 287: akuity.argocd.v1.ArgoCDService.GetInstance:input_type -> akuity.argocd.v1.GetInstanceRequest
	18,  // 288: akuity.argocd.v1.ArgoCDService.GetInstanceCSS:input_type -> akuity.argocd.v1.GetInstanceCSSRequest
	20,  // 289: akuity.argocd.v1.ArgoCDService.GetInstanceNotificationSettings:input_type -> akuity.argocd.v1.GetInstanceNotificationSettingsRequest
	22,  // 290: akuity.argocd.v1.ArgoCDService.GetInstanceNotificationCatalog:input_type -> akuity.argocd.v1.GetInstanceNotificationCatalogRequest
	24,  // 291: akuity.argocd.v1.ArgoCDService.GetInstanceImageUpdaterSettings:input_type -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsRequest
	27,  // 292: akuity.argocd.v1.ArgoCDService.GetInstanceResourceCustomizations:input_type -> akuity.argocd.v1.GetInstanceResourceCustomizationsRequest
	180, // 293: akuity.argocd.v1.ArgoCDService.GetInstanceConfigManagementPlugins:input_type -> akuity.argocd.v1.GetInstanceConfigManagementPluginsRequest
	29,  // 294: akuity.argocd.v1.ArgoCDService.PatchInstance:input_type -> akuity.argocd.v1.PatchInstanceRequest
	31,  // 295: akuity.argocd.v1.ArgoCDService.PatchInstanceSecret:input_type -> akuity.argocd.v1.PatchInstanceSecretRequest
	33,  // 296: akuity.argocd.v1.ArgoCDService.PatchInstanceNotificationSecret:input_type -> akuity.argocd.v1.PatchInstanceNotificationSecretRequest
	35,  // 297: akuity.argocd.v1.ArgoCDService.PatchInstanceImageUpdaterSecret:input_type -> akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest
	39,  // 298: akuity.argocd.v1.ArgoCDService.GetInstanceAppsetSecret:input_type -> akuity.argocd.v1.GetInstanceAppsetSecretRequest
	37,  // 299: akuity.argocd.v1.ArgoCDService.PatchInstanceAppsetSecret:input_type -> akuity.argocd.v1.PatchInstanceAppsetSecretRequest
	41,  // 300: akuity.argocd.v1.ArgoCDService.UpdateInstance:input_type -> akuity.argocd.v1.UpdateInstanceRequest
	43,  // 301: akuity.argocd.v1.ArgoCDService.UpdateInstanceWorkspace:input_type -> akuity.argocd.v1.UpdateInstanceWorkspaceRequest
	45,  // 302: akuity.argocd.v1.ArgoCDService.UpdateInstanceCSS:input_type -> akuity.argocd.v1.UpdateInstanceCSSRequest
	47,  // 303: akuity.argocd.v1.ArgoCDService.UpdateInstanceNotificationConfig:input_type -> akuity.argocd.v1.UpdateInstanceNotificationConfigRequest
	49,  // 304: akuity.argocd.v1.ArgoCDService.UpdateInstanceImageUpdaterConfig:input_type -> akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest
	51,  // 305: akuity.argocd.v1.ArgoCDService.UpdateInstanceImageUpdaterSSHConfig:input_type -> akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest
	53,  // 306: akuity.argocd.v1.ArgoCDService.UpdateInstanceResourceCustomizations:input_type -> akuity.argocd.v1.UpdateInstanceResourceCustomizationsRequest
	182, // 307: akuity.argocd.v1.ArgoCDService.UpdateInstanceConfigManagementPlugins:input_type -> akuity.argocd.v1.UpdateInstanceConfigManagementPluginsRequest
	55,  // 308: akuity.argocd.v1.ArgoCDService.DeleteInstance:input_type -> akuity.argocd.v1.DeleteInstanceRequest
	57,  // 309: akuity.argocd.v1.ArgoCDService.ListInstanceAccounts:input_type -> akuity.argocd.v1.ListInstanceAccountsRequest
	59,  // 310: akuity.argocd.v1.ArgoCDService.UpsertInstanceAccount:input_type -> akuity.argocd.v1.UpsertInstanceAccountRequest
	61,  // 311: akuity.argocd.v1.ArgoCDService.UpdateInstanceAccountPassword:input_type -> akuity.argocd.v1.UpdateInstanceAccountPasswordRequest
	63,  // 312: akuity.argocd.v1.ArgoCDService.RegenerateInstanceAccountPassword:input_type -> akuity.argocd.v1.RegenerateInstanceAccountPasswordRequest
	65,  // 313: akuity.argocd.v1.ArgoCDService.DeleteInstanceAccount:input_type -> akuity.argocd.v1.DeleteInstanceAccountRequest
	80,  // 314: akuity.argocd.v1.ArgoCDService.ListInstanceClusters:input_type -> akuity.argocd.v1.ListInstanceClustersRequest
	81,  // 315: akuity.argocd.v1.ArgoCDService.WatchInstanceClusters:input_type -> akuity.argocd.v1.WatchInstanceClustersRequest
	90,  // 316: akuity.argocd.v1.ArgoCDService.CreateInstanceCluster:input_type -> akuity.argocd.v1.CreateInstanceClusterRequest
	92,  // 317: akuity.argocd.v1.ArgoCDService.GetClusterAPIServerCAData:input_type -> akuity.argocd.v1.GetClusterAPIServerCADataRequest
	94,  // 318: akuity.argocd.v1.ArgoCDService.GetInstanceCluster:input_type -> akuity.argocd.v1.GetInstanceClusterRequest
	94,  // 319: akuity.argocd.v1.ArgoCDService.GetInstanceClusterInfo:input_type -> akuity.argocd.v1.GetInstanceClusterRequest
	97,  // 320: akuity.argocd.v1.ArgoCDService.GetInstanceClusterManifests:input_type -> akuity.argocd.v1.GetInstanceClusterManifestsRequest
	98,  // 321: akuity.argocd.v1.ArgoCDService.UpdateInstanceCluster:input_type -> akuity.argocd.v1.UpdateInstanceClusterRequest
	100, // 322: akuity.argocd.v1.ArgoCDService.UpdateInstanceClusters:input_type -> akuity.argocd.v1.UpdateInstanceClustersRequest
	102, // 323: akuity.argocd.v1.ArgoCDService.UpdateInstanceClustersAgentVersion:input_type -> akuity.argocd.v1.UpdateInstanceClustersAgentVersionRequest
	103, // 324: akuity.argocd.v1.ArgoCDService.RotateInstanceClusterCredentials:input_type -> akuity.argocd.v1.RotateInstanceClusterCredentialsRequest
	105, // 325: akuity.argocd.v1.ArgoCDService.DeleteInstanceCluster:input_type -> akuity.argocd.v1.DeleteInstanceClusterRequest
	170, // 326: akuity.argocd.v1.ArgoCDService.GetInstanceClusterCommand:input_type -> akuity.argocd.v1.GetInstanceClusterCommandRequest
	67,  // 327: akuity.argocd.v1.ArgoCDService.GetAIAssistantUsageStats:input_type -> akuity.argocd.v1.GetAIAssistantUsageStatsRequest
	69,  // 328: akuity.argocd.v1.ArgoCDService.GetSyncOperationsStats:input_type -> akuity.argocd.v1.GetSyncOperationsStatsRequest
	70,  // 329: akuity.argocd.v1.ArgoCDService.GetSyncOperationsEvents:input_type -> akuity.argocd.v1.GetSyncOperationsEventsRequest
	166, // 330: akuity.argocd.v1.ArgoCDService.ApplyInstance:input_type -> akuity.argocd.v1.ApplyInstanceRequest
	168, // 331: akuity.argocd.v1.ArgoCDService.ExportInstance:input_type -> akuity.argocd.v1.ExportInstanceRequest
	184, // 332: akuity.argocd.v1.ArgoCDService.ListInstanceAddonRepos:input_type -> akuity.argocd.v1.ListInstanceAddonReposRequest
	186, // 333: akuity.argocd.v1.ArgoCDService.GetInstanceAddonRepo:input_type -> akuity.argocd.v1.GetInstanceAddonRepoRequest
	188, // 334: akuity.argocd.v1.ArgoCDService.CreateInstanceAddonRepo:input_type -> akuity.argocd.v1.CreateInstanceAddonRepoRequest
	192, // 335: akuity.argocd.v1.ArgoCDService.RefreshInstanceAddonRepo:input_type -> akuity.argocd.v1.RefreshInstanceAddonRepoRequest
	190, // 336: akuity.argocd.v1.ArgoCDService.DeleteInstanceAddonRepo:input_type -> akuity.argocd.v1.DeleteInstanceAddonRepoRequest
	200, // 337: akuity.argocd.v1.ArgoCDService.ListInstanceAddons:input_type -> akuity.argocd.v1.ListInstanceAddonsRequest
	197, // 338: akuity.argocd.v1.ArgoCDService.GetInstanceAddon:input_type -> akuity.argocd.v1.GetInstanceAddonRequest
	206, // 339: akuity.argocd.v1.ArgoCDService.RefreshInstanceAddon:input_type -> akuity.argocd.v1.RefreshInstanceAddonRequest
	202, // 340: akuity.argocd.v1.ArgoCDService.UpdateInstanceAddon:input_type -> akuity.argocd.v1.UpdateInstanceAddonRequest
	204, // 341: akuity.argocd.v1.ArgoCDService.PatchInstanceAddon:input_type -> akuity.argocd.v1.PatchInstanceAddonRequest
	83,  // 342: akuity.argocd.v1.ArgoCDService.WatchInstanceAddons:input_type -> akuity.argocd.v1.WatchInstanceAddonsRequest
	84,  // 343: akuity.argocd.v1.ArgoCDService.WatchInstanceAddonRepos:input_type -> akuity.argocd.v1.WatchInstanceAddonReposRequest
	233, // 344: akuity.argocd.v1.ArgoCDService.AddonMarketplaceInstall:input_type -> akuity.argocd.v1.AddonMarketplaceInstallRequest
	237, // 345: akuity.argocd.v1.ArgoCDService.ListAddonMarketplaceInstalls:input_type -> akuity.argocd.v1.ListAddonMarketplaceInstallsRequest
	238, // 346: akuity.argocd.v1.ArgoCDService.WatchAddonMarketplaceInstalls:input_type -> akuity.argocd.v1.WatchAddonMarketplaceInstallsRequest
	235, // 347: akuity.argocd.v1.ArgoCDService.UpdateAddonMarketplaceInstall:input_type -> akuity.argocd.v1.UpdateAddonMarketplaceInstallRequest
	11,  // 348: akuity.argocd.v1.ArgoCDService.ListInstanceVersions:output_type -> akuity.argocd.v1.ListInstanceVersionsResponse
	13,  // 349: akuity.argocd.v1.ArgoCDService.ListInstances:output_type -> akuity.argocd.v1.ListInstancesResponse
	85,  // 350: akuity.argocd.v1.ArgoCDService.WatchInstances:output_type -> akuity.argocd.v1.WatchInstancesResponse
	15,  // 351: akuity.argocd.v1.ArgoCDService.CreateInstance:output_type -> akuity.argocd.v1.CreateInstanceResponse
	17,  // 352: akuity.argocd.v1.ArgoCDService.GetInstance:output_type -> akuity.argocd.v1.GetInstanceResponse
	19,  // 353: akuity.argocd.v1.ArgoCDService.GetInstanceCSS:output_type -> akuity.argocd.v1.GetInstanceCSSResponse
	21,  // 354: akuity.argocd.v1.ArgoCDService.GetInstanceNotificationSettings:output_type -> akuity.argocd.v1.GetInstanceNotificationSettingsResponse
	23,  // 355: akuity.argocd.v1.ArgoCDService.GetInstanceNotificationCatalog:output_type -> akuity.argocd.v1.GetInstanceNotificationCatalogResponse
	25,  // 356: akuity.argocd.v1.ArgoCDService.GetInstanceImageUpdaterSettings:output_type -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse
	28,  // 357: akuity.argocd.v1.ArgoCDService.GetInstanceResourceCustomizations:output_type -> akuity.argocd.v1.GetInstanceResourceCustomizationsResponse
	181, // 358: akuity.argocd.v1.ArgoCDService.GetInstanceConfigManagementPlugins:output_type -> akuity.argocd.v1.GetInstanceConfigManagementPluginsResponse
	30,  // 359: akuity.argocd.v1.ArgoCDService.PatchInstance:output_type -> akuity.argocd.v1.PatchInstanceResponse
	32,  // 360: akuity.argocd.v1.ArgoCDService.PatchInstanceSecret:output_type -> akuity.argocd.v1.PatchInstanceSecretResponse
	34,  // 361: akuity.argocd.v1.ArgoCDService.PatchInstanceNotificationSecret:output_type -> akuity.argocd.v1.PatchInstanceNotificationSecretResponse
	36,  // 362: akuity.argocd.v1.ArgoCDService.PatchInstanceImageUpdaterSecret:output_type -> akuity.argocd.v1.PatchInstanceImageUpdaterSecretResponse
	40,  // 363: akuity.argocd.v1.ArgoCDService.GetInstanceAppsetSecret:output_type -> akuity.argocd.v1.GetInstanceAppsetSecretResponse
	38,  // 364: akuity.argocd.v1.ArgoCDService.PatchInstanceAppsetSecret:output_type -> akuity.argocd.v1.PatchInstanceAppsetSecretResponse
	42,  // 365: akuity.argocd.v1.ArgoCDService.UpdateInstance:output_type -> akuity.argocd.v1.UpdateInstanceResponse
	44,  // 366: akuity.argocd.v1.ArgoCDService.UpdateInstanceWorkspace:output_type -> akuity.argocd.v1.UpdateInstanceWorkspaceResponse
	46,  // 367: akuity.argocd.v1.ArgoCDService.UpdateInstanceCSS:output_type -> akuity.argocd.v1.UpdateInstanceCSSResponse
	48,  // 368: akuity.argocd.v1.ArgoCDService.UpdateInstanceNotificationConfig:output_type -> akuity.argocd.v1.UpdateInstanceNotificationConfigResponse
	50,  // 369: akuity.argocd.v1.ArgoCDService.UpdateInstanceImageUpdaterConfig:output_type -> akuity.argocd.v1.UpdateInstanceImageUpdaterConfigResponse
	52,  // 370: akuity.argocd.v1.ArgoCDService.UpdateInstanceImageUpdaterSSHConfig:output_type -> akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigResponse
	54,  // 371: akuity.argocd.v1.ArgoCDService.UpdateInstanceResourceCustomizations:output_type -> akuity.argocd.v1.UpdateInstanceResourceCustomizationsResponse
	183, // 372: akuity.argocd.v1.ArgoCDService.UpdateInstanceConfigManagementPlugins:output_type -> akuity.argocd.v1.UpdateInstanceConfigManagementPluginsResponse
	56,  // 373: akuity.argocd.v1.ArgoCDService.DeleteInstance:output_type -> akuity.argocd.v1.DeleteInstanceResponse
	58,  // 374: akuity.argocd.v1.ArgoCDService.ListInstanceAccounts:output_type -> akuity.argocd.v1.ListInstanceAccountsResponse
	60,  // 375: akuity.argocd.v1.ArgoCDService.UpsertInstanceAccount:output_type -> akuity.argocd.v1.UpsertInstanceAccountResponse
	62,  // 376: akuity.argocd.v1.ArgoCDService.UpdateInstanceAccountPassword:output_type -> akuity.argocd.v1.UpdateInstanceAccountPasswordResponse
	64,  // 377: akuity.argocd.v1.ArgoCDService.RegenerateInstanceAccountPassword:output_type -> akuity.argocd.v1.RegenerateInstanceAccountPasswordResponse
	66,  // 378: akuity.argocd.v1.ArgoCDService.DeleteInstanceAccount:output_type -> akuity.argocd.v1.DeleteInstanceAccountResponse
	89,  // 379: akuity.argocd.v1.ArgoCDService.ListInstanceClusters:output_type -> akuity.argocd.v1.ListInstanceClustersResponse
	88,  // 380: akuity.argocd.v1.ArgoCDService.WatchInstanceClusters:output_type -> akuity.argocd.v1.WatchInstanceClustersResponse
	91,  // 381: akuity.argocd.v1.ArgoCDService.CreateInstanceCluster:output_type -> akuity.argocd.v1.CreateInstanceClusterResponse
	93,  // 382: akuity.argocd.v1.ArgoCDService.GetClusterAPIServerCAData:output_type -> akuity.argocd.v1.GetClusterAPIServerCADataResponse
	95,  // 383: akuity.argocd.v1.ArgoCDService.GetInstanceCluster:output_type -> akuity.argocd.v1.GetInstanceClusterResponse
	96,  // 384: akuity.argocd.v1.ArgoCDService.GetInstanceClusterInfo:output_type -> akuity.argocd.v1.GetInstanceClusterInfoResponse
	292, // 385: akuity.argocd.v1.ArgoCDService.GetInstanceClusterManifests:output_type -> google.api.HttpBody
	99,  // 386: akuity.argocd.v1.ArgoCDService.UpdateInstanceCluster:output_type -> akuity.argocd.v1.UpdateInstanceClusterResponse
	101, // 387: akuity.argocd.v1.ArgoCDService.UpdateInstanceClusters:output_type -> akuity.argocd.v1.UpdateInstanceClustersResponse
	293, // 388: akuity.argocd.v1.ArgoCDService.UpdateInstanceClustersAgentVersion:output_type -> google.protobuf.Empty
	104, // 389: akuity.argocd.v1.ArgoCDService.RotateInstanceClusterCredentials:output_type -> akuity.argocd.v1.RotateInstanceClusterCredentialsResponse
	106, // 390: akuity.argocd.v1.ArgoCDService.DeleteInstanceCluster:output_type -> akuity.argocd.v1.DeleteInstanceClusterResponse
	171, // 391: akuity.argocd.v1.ArgoCDService.GetInstanceClusterCommand:output_type -> akuity.argocd.v1.GetInstanceClusterCommandResponse
	68,  // 392: akuity.argocd.v1.ArgoCDService.GetAIAssistantUsageStats:output_type -> akuity.argocd.v1.GetAIAssistantUsageStatsResponse
	77,  // 393: akuity.argocd.v1.ArgoCDService.GetSyncOperationsStats:output_type -> akuity.argocd.v1.GetSyncOperationsStatsResponse
	78,  // 394: akuity.argocd.v1.ArgoCDService.GetSyncOperationsEvents:output_type -> akuity.argocd.v1.GetSyncOperationsEventsResponse
	167, // 395: akuity.argocd.v1.ArgoCDService.ApplyInstance:output_type -> akuity.argocd.v1.ApplyInstanceResponse
	169, // 396: akuity.argocd.v1.ArgoCDService.ExportInstance:output_type -> akuity.argocd.v1.ExportInstanceResponse
	185, // 397: akuity.argocd.v1.ArgoCDService.ListInstanceAddonRepos:output_type -> akuity.argocd.v1.ListInstanceAddonReposResponse
	187, // 398: akuity.argocd.v1.ArgoCDService.GetInstanceAddonRepo:output_type -> akuity.argocd.v1.GetInstanceAddonRepoResponse
	189, // 399: akuity.argocd.v1.ArgoCDService.CreateInstanceAddonRepo:output_type -> akuity.argocd.v1.CreateInstanceAddonRepoResponse
	193, // 400: akuity.argocd.v1.ArgoCDService.RefreshInstanceAddonRepo:output_type -> akuity.argocd.v1.RefreshInstanceAddonRepoResponse
	191, // 401: akuity.argocd.v1.ArgoCDService.DeleteInstanceAddonRepo:output_type -> akuity.argocd.v1.DeleteInstanceAddonRepoResponse
	201, // 402: akuity.argocd.v1.ArgoCDService.ListInstanceAddons:output_type -> akuity.argocd.v1.ListInstanceAddonsResponse
	198, // 403: akuity.argocd.v1.ArgoCDService.GetInstanceAddon:output_type -> akuity.argocd.v1.GetInstanceAddonResponse
	207, // 404: akuity.argocd.v1.ArgoCDService.RefreshInstanceAddon:output_type -> akuity.argocd.v1.RefreshInstanceAddonResponse
	203, // 405: akuity.argocd.v1.ArgoCDService.UpdateInstanceAddon:output_type -> akuity.argocd.v1.UpdateInstanceAddonResponse
	205, // 406: akuity.argocd.v1.ArgoCDService.PatchInstanceAddon:output_type -> akuity.argocd.v1.PatchInstanceAddonResponse
	86,  // 407: akuity.argocd.v1.ArgoCDService.WatchInstanceAddons:output_type -> akuity.argocd.v1.WatchInstanceAddonsResponse
	87,  // 408: akuity.argocd.v1.ArgoCDService.WatchInstanceAddonRepos:output_type -> akuity.argocd.v1.WatchInstanceAddonReposResponse
	234, // 409: akuity.argocd.v1.ArgoCDService.AddonMarketplaceInstall:output_type -> akuity.argocd.v1.AddonMarketplaceInstallResponse
	241, // 410: akuity.argocd.v1.ArgoCDService.ListAddonMarketplaceInstalls:output_type -> akuity.argocd.v1.ListAddonMarketplaceInstallsResponse
	239, // 411: akuity.argocd.v1.ArgoCDService.WatchAddonMarketplaceInstalls:output_type -> akuity.argocd.v1.WatchAddonMarketplaceInstallsResponse
	236, // 412: akuity.argocd.v1.ArgoCDService.UpdateAddonMarketplaceInstall:output_type -> akuity.argocd.v1.UpdateAddonMarketplaceInstallResponse
	348, // [348:413] is the sub-list for method output_type
	283, // [283:348] is the sub-list for method input_type
	283, // [283:283] is the sub-list for extension type_name
	283, // [283:283] is the sub-list for extension extendee
	0,   // [0:283] is the sub-list for field type_name
}

func init() { file_argocd_v1_argocd_proto_init() }
func file_argocd_v1_argocd_proto_init() {
	if File_argocd_v1_argocd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_argocd_v1_argocd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceCSSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceCSSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceNotificationSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceNotificationSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceNotificationCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceNotificationCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceImageUpdaterSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceImageUpdaterSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCustomizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceResourceCustomizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceResourceCustomizationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceNotificationSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceNotificationSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceImageUpdaterSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceImageUpdaterSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceAppsetSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceAppsetSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceAppsetSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceAppsetSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceCSSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceCSSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceNotificationConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceNotificationConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceImageUpdaterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceImageUpdaterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceImageUpdaterSSHConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceImageUpdaterSSHConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceResourceCustomizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceResourceCustomizationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertInstanceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertInstanceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceAccountPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceAccountPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateInstanceAccountPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateInstanceAccountPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAIAssistantUsageStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAIAssistantUsageStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncOperationsStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncOperationsEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOperationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOperationStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOperationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOperationEventDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationInitiator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncOperationsStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncOperationsEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstanceClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstanceAddonsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstanceAddonReposRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstanceAddonsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstanceAddonReposResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstanceClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterAPIServerCADataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterAPIServerCADataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterManifestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClustersAgentVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateInstanceClusterCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateInstanceClusterCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsSyncStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDDeepLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDAlertConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDBannerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDExtensionInstallEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDGoogleAnalyticsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDHelmSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDKustomizeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDStatusBadgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDRBACConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDResourceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDWebTerminalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCustomization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppsetPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentPermissionsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossplaneExtensionResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossplaneExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeVisionArgoExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeVisionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInAnyNamespaceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDeprecatedAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CveScanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelectorRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecretMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretsManagementConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AISupportEngineerExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoServerDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageUpdaterDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSetDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAccountCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAllowListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostAliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationControllerResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoServerResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoScalerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppControllerAutoScalingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoServerAutoScalingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCompatibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterKubernetesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigManagementPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Find); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceConfigManagementPluginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceConfigManagementPluginsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceConfigManagementPluginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceConfigManagementPluginsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceAddonReposRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceAddonReposResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceAddonRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceAddonRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceAddonRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceAddonRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceAddonRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceAddonRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshInstanceAddonRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshInstanceAddonRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceAddonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceAddonsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceAddonsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceAddonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceAddonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshInstanceAddonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshInstanceAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KustomizeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KustomizeImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KustomizeHelmChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCustomization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCreationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppDeletionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSyncOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KustomizeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusSourceUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceUpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAddonStatusOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonMarketplaceInstallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonMarketplaceInstallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddonMarketplaceInstallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddonMarketplaceInstallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddonMarketplaceInstallsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAddonMarketplaceInstallsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAddonMarketplaceInstallsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonMarketplaceInstallFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddonMarketplaceInstallsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonMarketplaceInstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonMarketplaceInstallConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonMarketplaceInstallOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmChartInstallConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonMarketplaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceSecretRequest_ValueField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceNotificationSecretRequest_ValueField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceImageUpdaterSecretRequest_ValueField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceAppsetSecretRequest_ValueField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_argocd_v1_argocd_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[90].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[92].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[93].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[101].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[104].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[106].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[107].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[108].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[109].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[113].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[115].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[118].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[129].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[133].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[143].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[144].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[146].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[147].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[153].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[154].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[160].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[174].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[184].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[189].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[190].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[198].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[204].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[205].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[208].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[212].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[217].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[222].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[227].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[230].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[245].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[247].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[249].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[251].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_argocd_v1_argocd_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   273,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_argocd_v1_argocd_proto_goTypes,
		DependencyIndexes: file_argocd_v1_argocd_proto_depIdxs,
		EnumInfos:         file_argocd_v1_argocd_proto_enumTypes,
		MessageInfos:      file_argocd_v1_argocd_proto_msgTypes,
	}.Build()
	File_argocd_v1_argocd_proto = out.File
	file_argocd_v1_argocd_proto_rawDesc = nil
	file_argocd_v1_argocd_proto_goTypes = nil
	file_argocd_v1_argocd_proto_depIdxs = nil
}
