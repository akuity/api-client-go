// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: argocd/v1/argocd.proto

package argocdv1

import (
	v13 "github.com/akuity/api-client-go/pkg/api/gen/types/events/v1"
	v1 "github.com/akuity/api-client-go/pkg/api/gen/types/id/v1"
	v11 "github.com/akuity/api-client-go/pkg/api/gen/types/misc/v1"
	v12 "github.com/akuity/api-client-go/pkg/api/gen/types/status/health/v1"
	v14 "github.com/akuity/api-client-go/pkg/api/gen/types/status/reconciliation/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncOperationField int32

const (
	SyncOperationField_SYNC_OPERATION_FIELD_UNSPECIFIED    SyncOperationField = 0
	SyncOperationField_SYNC_OPERATION_FIELD_APPS           SyncOperationField = 1
	SyncOperationField_SYNC_OPERATION_FIELD_PROJECTS       SyncOperationField = 2
	SyncOperationField_SYNC_OPERATION_FIELD_INITIATORS     SyncOperationField = 3
	SyncOperationField_SYNC_OPERATION_FIELD_REPOS          SyncOperationField = 4
	SyncOperationField_SYNC_OPERATION_FIELD_INSTANCE_NAMES SyncOperationField = 5
)

// Enum value maps for SyncOperationField.
var (
	SyncOperationField_name = map[int32]string{
		0: "SYNC_OPERATION_FIELD_UNSPECIFIED",
		1: "SYNC_OPERATION_FIELD_APPS",
		2: "SYNC_OPERATION_FIELD_PROJECTS",
		3: "SYNC_OPERATION_FIELD_INITIATORS",
		4: "SYNC_OPERATION_FIELD_REPOS",
		5: "SYNC_OPERATION_FIELD_INSTANCE_NAMES",
	}
	SyncOperationField_value = map[string]int32{
		"SYNC_OPERATION_FIELD_UNSPECIFIED":    0,
		"SYNC_OPERATION_FIELD_APPS":           1,
		"SYNC_OPERATION_FIELD_PROJECTS":       2,
		"SYNC_OPERATION_FIELD_INITIATORS":     3,
		"SYNC_OPERATION_FIELD_REPOS":          4,
		"SYNC_OPERATION_FIELD_INSTANCE_NAMES": 5,
	}
)

func (x SyncOperationField) Enum() *SyncOperationField {
	p := new(SyncOperationField)
	*p = x
	return p
}

func (x SyncOperationField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncOperationField) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[0].Descriptor()
}

func (SyncOperationField) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[0]
}

func (x SyncOperationField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncOperationField.Descriptor instead.
func (SyncOperationField) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{0}
}

type SyncOperationGroupField int32

const (
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_UNSPECIFIED    SyncOperationGroupField = 0
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_APPS           SyncOperationGroupField = 1
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_PROJECTS       SyncOperationGroupField = 2
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_INITIATORS     SyncOperationGroupField = 3
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_INSTANCE_NAMES SyncOperationGroupField = 4
	SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_STATUS         SyncOperationGroupField = 5
)

// Enum value maps for SyncOperationGroupField.
var (
	SyncOperationGroupField_name = map[int32]string{
		0: "SYNC_OPERATION_GROUP_FIELD_UNSPECIFIED",
		1: "SYNC_OPERATION_GROUP_FIELD_APPS",
		2: "SYNC_OPERATION_GROUP_FIELD_PROJECTS",
		3: "SYNC_OPERATION_GROUP_FIELD_INITIATORS",
		4: "SYNC_OPERATION_GROUP_FIELD_INSTANCE_NAMES",
		5: "SYNC_OPERATION_GROUP_FIELD_STATUS",
	}
	SyncOperationGroupField_value = map[string]int32{
		"SYNC_OPERATION_GROUP_FIELD_UNSPECIFIED":    0,
		"SYNC_OPERATION_GROUP_FIELD_APPS":           1,
		"SYNC_OPERATION_GROUP_FIELD_PROJECTS":       2,
		"SYNC_OPERATION_GROUP_FIELD_INITIATORS":     3,
		"SYNC_OPERATION_GROUP_FIELD_INSTANCE_NAMES": 4,
		"SYNC_OPERATION_GROUP_FIELD_STATUS":         5,
	}
)

func (x SyncOperationGroupField) Enum() *SyncOperationGroupField {
	p := new(SyncOperationGroupField)
	*p = x
	return p
}

func (x SyncOperationGroupField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncOperationGroupField) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[1].Descriptor()
}

func (SyncOperationGroupField) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[1]
}

func (x SyncOperationGroupField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncOperationGroupField.Descriptor instead.
func (SyncOperationGroupField) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{1}
}

type ClusterSize int32

const (
	ClusterSize_CLUSTER_SIZE_UNSPECIFIED ClusterSize = 0
	ClusterSize_CLUSTER_SIZE_SMALL       ClusterSize = 1
	ClusterSize_CLUSTER_SIZE_MEDIUM      ClusterSize = 2
	ClusterSize_CLUSTER_SIZE_LARGE       ClusterSize = 3
)

// Enum value maps for ClusterSize.
var (
	ClusterSize_name = map[int32]string{
		0: "CLUSTER_SIZE_UNSPECIFIED",
		1: "CLUSTER_SIZE_SMALL",
		2: "CLUSTER_SIZE_MEDIUM",
		3: "CLUSTER_SIZE_LARGE",
	}
	ClusterSize_value = map[string]int32{
		"CLUSTER_SIZE_UNSPECIFIED": 0,
		"CLUSTER_SIZE_SMALL":       1,
		"CLUSTER_SIZE_MEDIUM":      2,
		"CLUSTER_SIZE_LARGE":       3,
	}
)

func (x ClusterSize) Enum() *ClusterSize {
	p := new(ClusterSize)
	*p = x
	return p
}

func (x ClusterSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterSize) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[2].Descriptor()
}

func (ClusterSize) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[2]
}

func (x ClusterSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterSize.Descriptor instead.
func (ClusterSize) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{2}
}

type DirectClusterType int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	DirectClusterType_DIRECT_CLUSTER_TYPE_UPBOUND DirectClusterType = 0
	DirectClusterType_DIRECT_CLUSTER_TYPE_KARGO   DirectClusterType = 1
)

// Enum value maps for DirectClusterType.
var (
	DirectClusterType_name = map[int32]string{
		0: "DIRECT_CLUSTER_TYPE_UPBOUND",
		1: "DIRECT_CLUSTER_TYPE_KARGO",
	}
	DirectClusterType_value = map[string]int32{
		"DIRECT_CLUSTER_TYPE_UPBOUND": 0,
		"DIRECT_CLUSTER_TYPE_KARGO":   1,
	}
)

func (x DirectClusterType) Enum() *DirectClusterType {
	p := new(DirectClusterType)
	*p = x
	return p
}

func (x DirectClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[3].Descriptor()
}

func (DirectClusterType) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[3]
}

func (x DirectClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectClusterType.Descriptor instead.
func (DirectClusterType) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{3}
}

type PruneResourceType int32

const (
	PruneResourceType_PRUNE_RESOURCE_TYPE_UNSPECIFIED               PruneResourceType = 0
	PruneResourceType_PRUNE_RESOURCE_TYPE_ALL                       PruneResourceType = 1
	PruneResourceType_PRUNE_RESOURCE_TYPE_CLUSTERS                  PruneResourceType = 2
	PruneResourceType_PRUNE_RESOURCE_TYPE_REPO_CREDENTIAL_SECRETS   PruneResourceType = 3
	PruneResourceType_PRUNE_RESOURCE_TYPE_CONFIG_MANAGEMENT_PLUGINS PruneResourceType = 4
	PruneResourceType_PRUNE_RESOURCE_TYPE_APPLICATIONS              PruneResourceType = 5
	PruneResourceType_PRUNE_RESOURCE_TYPE_APPLICATION_SETS          PruneResourceType = 6
	PruneResourceType_PRUNE_RESOURCE_TYPE_APP_PROJECTS              PruneResourceType = 7
)

// Enum value maps for PruneResourceType.
var (
	PruneResourceType_name = map[int32]string{
		0: "PRUNE_RESOURCE_TYPE_UNSPECIFIED",
		1: "PRUNE_RESOURCE_TYPE_ALL",
		2: "PRUNE_RESOURCE_TYPE_CLUSTERS",
		3: "PRUNE_RESOURCE_TYPE_REPO_CREDENTIAL_SECRETS",
		4: "PRUNE_RESOURCE_TYPE_CONFIG_MANAGEMENT_PLUGINS",
		5: "PRUNE_RESOURCE_TYPE_APPLICATIONS",
		6: "PRUNE_RESOURCE_TYPE_APPLICATION_SETS",
		7: "PRUNE_RESOURCE_TYPE_APP_PROJECTS",
	}
	PruneResourceType_value = map[string]int32{
		"PRUNE_RESOURCE_TYPE_UNSPECIFIED":               0,
		"PRUNE_RESOURCE_TYPE_ALL":                       1,
		"PRUNE_RESOURCE_TYPE_CLUSTERS":                  2,
		"PRUNE_RESOURCE_TYPE_REPO_CREDENTIAL_SECRETS":   3,
		"PRUNE_RESOURCE_TYPE_CONFIG_MANAGEMENT_PLUGINS": 4,
		"PRUNE_RESOURCE_TYPE_APPLICATIONS":              5,
		"PRUNE_RESOURCE_TYPE_APPLICATION_SETS":          6,
		"PRUNE_RESOURCE_TYPE_APP_PROJECTS":              7,
	}
)

func (x PruneResourceType) Enum() *PruneResourceType {
	p := new(PruneResourceType)
	*p = x
	return p
}

func (x PruneResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PruneResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[4].Descriptor()
}

func (PruneResourceType) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[4]
}

func (x PruneResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PruneResourceType.Descriptor instead.
func (PruneResourceType) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{4}
}

type ClusterCommandFor int32

const (
	ClusterCommandFor_CLUSTER_COMMAND_FOR_UNSPECIFIED ClusterCommandFor = 0
	ClusterCommandFor_CLUSTER_COMMAND_FOR_KUBECTL     ClusterCommandFor = 1
	ClusterCommandFor_CLUSTER_COMMAND_FOR_EKS         ClusterCommandFor = 2
	ClusterCommandFor_CLUSTER_COMMAND_FOR_AKUITY_CLI  ClusterCommandFor = 3
)

// Enum value maps for ClusterCommandFor.
var (
	ClusterCommandFor_name = map[int32]string{
		0: "CLUSTER_COMMAND_FOR_UNSPECIFIED",
		1: "CLUSTER_COMMAND_FOR_KUBECTL",
		2: "CLUSTER_COMMAND_FOR_EKS",
		3: "CLUSTER_COMMAND_FOR_AKUITY_CLI",
	}
	ClusterCommandFor_value = map[string]int32{
		"CLUSTER_COMMAND_FOR_UNSPECIFIED": 0,
		"CLUSTER_COMMAND_FOR_KUBECTL":     1,
		"CLUSTER_COMMAND_FOR_EKS":         2,
		"CLUSTER_COMMAND_FOR_AKUITY_CLI":  3,
	}
)

func (x ClusterCommandFor) Enum() *ClusterCommandFor {
	p := new(ClusterCommandFor)
	*p = x
	return p
}

func (x ClusterCommandFor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterCommandFor) Descriptor() protoreflect.EnumDescriptor {
	return file_argocd_v1_argocd_proto_enumTypes[5].Descriptor()
}

func (ClusterCommandFor) Type() protoreflect.EnumType {
	return &file_argocd_v1_argocd_proto_enumTypes[5]
}

func (x ClusterCommandFor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterCommandFor.Descriptor instead.
func (ClusterCommandFor) EnumDescriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{5}
}

type ListInstanceVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListInstanceVersionsRequest) Reset() {
	*x = ListInstanceVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceVersionsRequest) ProtoMessage() {}

func (x *ListInstanceVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceVersionsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{0}
}

type ListInstanceVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []*InstanceVersion `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *ListInstanceVersionsResponse) Reset() {
	*x = ListInstanceVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceVersionsResponse) ProtoMessage() {}

func (x *ListInstanceVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceVersionsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{1}
}

func (x *ListInstanceVersionsResponse) GetVersions() []*InstanceVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

type ListInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    *string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3,oneof" json:"workspace_id,omitempty"`
}

func (x *ListInstancesRequest) Reset() {
	*x = ListInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesRequest) ProtoMessage() {}

func (x *ListInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListInstancesRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{2}
}

func (x *ListInstancesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListInstancesRequest) GetWorkspaceId() string {
	if x != nil && x.WorkspaceId != nil {
		return *x.WorkspaceId
	}
	return ""
}

type ListInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ListInstancesResponse) Reset() {
	*x = ListInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse) ProtoMessage() {}

func (x *ListInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{3}
}

func (x *ListInstancesResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type CreateInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version        string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Description    *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Shard          *string `protobuf:"bytes,5,opt,name=shard,proto3,oneof" json:"shard,omitempty"`
}

func (x *CreateInstanceRequest) Reset() {
	*x = CreateInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceRequest) ProtoMessage() {}

func (x *CreateInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{4}
}

func (x *CreateInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInstanceRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateInstanceRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateInstanceRequest) GetShard() string {
	if x != nil && x.Shard != nil {
		return *x.Shard
	}
	return ""
}

type CreateInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *CreateInstanceResponse) Reset() {
	*x = CreateInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceResponse) ProtoMessage() {}

func (x *CreateInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{5}
}

func (x *CreateInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type GetInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	IdType         v1.Type `protobuf:"varint,2,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id             string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceRequest) Reset() {
	*x = GetInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceRequest) ProtoMessage() {}

func (x *GetInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{6}
}

func (x *GetInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *GetInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *GetInstanceResponse) Reset() {
	*x = GetInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceResponse) ProtoMessage() {}

func (x *GetInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{7}
}

func (x *GetInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type GetInstanceCSSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceCSSRequest) Reset() {
	*x = GetInstanceCSSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceCSSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceCSSRequest) ProtoMessage() {}

func (x *GetInstanceCSSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceCSSRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceCSSRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{8}
}

func (x *GetInstanceCSSRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceCSSRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceCSSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Css string `protobuf:"bytes,1,opt,name=css,proto3" json:"css,omitempty"`
}

func (x *GetInstanceCSSResponse) Reset() {
	*x = GetInstanceCSSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceCSSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceCSSResponse) ProtoMessage() {}

func (x *GetInstanceCSSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceCSSResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceCSSResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{9}
}

func (x *GetInstanceCSSResponse) GetCss() string {
	if x != nil {
		return x.Css
	}
	return ""
}

type GetInstanceNotificationSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceNotificationSettingsRequest) Reset() {
	*x = GetInstanceNotificationSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceNotificationSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceNotificationSettingsRequest) ProtoMessage() {}

func (x *GetInstanceNotificationSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceNotificationSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceNotificationSettingsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{10}
}

func (x *GetInstanceNotificationSettingsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceNotificationSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceNotificationSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret map[string]string `protobuf:"bytes,1,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceNotificationSettingsResponse) Reset() {
	*x = GetInstanceNotificationSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceNotificationSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceNotificationSettingsResponse) ProtoMessage() {}

func (x *GetInstanceNotificationSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceNotificationSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceNotificationSettingsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{11}
}

func (x *GetInstanceNotificationSettingsResponse) GetSecret() map[string]string {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *GetInstanceNotificationSettingsResponse) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetInstanceNotificationCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceNotificationCatalogRequest) Reset() {
	*x = GetInstanceNotificationCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceNotificationCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceNotificationCatalogRequest) ProtoMessage() {}

func (x *GetInstanceNotificationCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceNotificationCatalogRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceNotificationCatalogRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{12}
}

func (x *GetInstanceNotificationCatalogRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceNotificationCatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceNotificationCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog map[string]string `protobuf:"bytes,1,rep,name=catalog,proto3" json:"catalog,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceNotificationCatalogResponse) Reset() {
	*x = GetInstanceNotificationCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceNotificationCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceNotificationCatalogResponse) ProtoMessage() {}

func (x *GetInstanceNotificationCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceNotificationCatalogResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceNotificationCatalogResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{13}
}

func (x *GetInstanceNotificationCatalogResponse) GetCatalog() map[string]string {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type GetInstanceImageUpdaterSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceImageUpdaterSettingsRequest) Reset() {
	*x = GetInstanceImageUpdaterSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceImageUpdaterSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceImageUpdaterSettingsRequest) ProtoMessage() {}

func (x *GetInstanceImageUpdaterSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceImageUpdaterSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceImageUpdaterSettingsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{14}
}

func (x *GetInstanceImageUpdaterSettingsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceImageUpdaterSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceImageUpdaterSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret    map[string]string `protobuf:"bytes,1,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config    map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SshConfig map[string]string `protobuf:"bytes,3,rep,name=ssh_config,json=sshConfig,proto3" json:"ssh_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceImageUpdaterSettingsResponse) Reset() {
	*x = GetInstanceImageUpdaterSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceImageUpdaterSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceImageUpdaterSettingsResponse) ProtoMessage() {}

func (x *GetInstanceImageUpdaterSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceImageUpdaterSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceImageUpdaterSettingsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{15}
}

func (x *GetInstanceImageUpdaterSettingsResponse) GetSecret() map[string]string {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *GetInstanceImageUpdaterSettingsResponse) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetInstanceImageUpdaterSettingsResponse) GetSshConfig() map[string]string {
	if x != nil {
		return x.SshConfig
	}
	return nil
}

type ResourceCustomizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group             string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Kind              string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Health            string `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`
	Actions           string `protobuf:"bytes,4,opt,name=actions,proto3" json:"actions,omitempty"`
	IgnoreDifferences string `protobuf:"bytes,5,opt,name=ignore_differences,json=ignoreDifferences,proto3" json:"ignore_differences,omitempty"`
}

func (x *ResourceCustomizationConfig) Reset() {
	*x = ResourceCustomizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCustomizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCustomizationConfig) ProtoMessage() {}

func (x *ResourceCustomizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCustomizationConfig.ProtoReflect.Descriptor instead.
func (*ResourceCustomizationConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{16}
}

func (x *ResourceCustomizationConfig) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ResourceCustomizationConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceCustomizationConfig) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *ResourceCustomizationConfig) GetActions() string {
	if x != nil {
		return x.Actions
	}
	return ""
}

func (x *ResourceCustomizationConfig) GetIgnoreDifferences() string {
	if x != nil {
		return x.IgnoreDifferences
	}
	return ""
}

type GetInstanceResourceCustomizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceResourceCustomizationsRequest) Reset() {
	*x = GetInstanceResourceCustomizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceResourceCustomizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceResourceCustomizationsRequest) ProtoMessage() {}

func (x *GetInstanceResourceCustomizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceResourceCustomizationsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceResourceCustomizationsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{17}
}

func (x *GetInstanceResourceCustomizationsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceResourceCustomizationsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceResourceCustomizationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceCustomizations []*ResourceCustomizationConfig `protobuf:"bytes,1,rep,name=resource_customizations,json=resourceCustomizations,proto3" json:"resource_customizations,omitempty"`
}

func (x *GetInstanceResourceCustomizationsResponse) Reset() {
	*x = GetInstanceResourceCustomizationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceResourceCustomizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceResourceCustomizationsResponse) ProtoMessage() {}

func (x *GetInstanceResourceCustomizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceResourceCustomizationsResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceResourceCustomizationsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{18}
}

func (x *GetInstanceResourceCustomizationsResponse) GetResourceCustomizations() []*ResourceCustomizationConfig {
	if x != nil {
		return x.ResourceCustomizations
	}
	return nil
}

type PatchInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string           `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Patch          *structpb.Struct `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *PatchInstanceRequest) Reset() {
	*x = PatchInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceRequest) ProtoMessage() {}

func (x *PatchInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{19}
}

func (x *PatchInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceRequest) GetPatch() *structpb.Struct {
	if x != nil {
		return x.Patch
	}
	return nil
}

type PatchInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *PatchInstanceResponse) Reset() {
	*x = PatchInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceResponse) ProtoMessage() {}

func (x *PatchInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{20}
}

func (x *PatchInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type PatchInstanceSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                                            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Secret         map[string]*PatchInstanceSecretRequest_ValueField `protobuf:"bytes,3,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PatchInstanceSecretRequest) Reset() {
	*x = PatchInstanceSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceSecretRequest) ProtoMessage() {}

func (x *PatchInstanceSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceSecretRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{21}
}

func (x *PatchInstanceSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceSecretRequest) GetSecret() map[string]*PatchInstanceSecretRequest_ValueField {
	if x != nil {
		return x.Secret
	}
	return nil
}

type PatchInstanceSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatchInstanceSecretResponse) Reset() {
	*x = PatchInstanceSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceSecretResponse) ProtoMessage() {}

func (x *PatchInstanceSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceSecretResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{22}
}

type PatchInstanceNotificationSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                                                        `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                                                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Secret         map[string]*PatchInstanceNotificationSecretRequest_ValueField `protobuf:"bytes,3,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PatchInstanceNotificationSecretRequest) Reset() {
	*x = PatchInstanceNotificationSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceNotificationSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceNotificationSecretRequest) ProtoMessage() {}

func (x *PatchInstanceNotificationSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceNotificationSecretRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceNotificationSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{23}
}

func (x *PatchInstanceNotificationSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceNotificationSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceNotificationSecretRequest) GetSecret() map[string]*PatchInstanceNotificationSecretRequest_ValueField {
	if x != nil {
		return x.Secret
	}
	return nil
}

type PatchInstanceNotificationSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatchInstanceNotificationSecretResponse) Reset() {
	*x = PatchInstanceNotificationSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceNotificationSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceNotificationSecretResponse) ProtoMessage() {}

func (x *PatchInstanceNotificationSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceNotificationSecretResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceNotificationSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{24}
}

type PatchInstanceImageUpdaterSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                                                        `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                                                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Secret         map[string]*PatchInstanceImageUpdaterSecretRequest_ValueField `protobuf:"bytes,3,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PatchInstanceImageUpdaterSecretRequest) Reset() {
	*x = PatchInstanceImageUpdaterSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceImageUpdaterSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceImageUpdaterSecretRequest) ProtoMessage() {}

func (x *PatchInstanceImageUpdaterSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceImageUpdaterSecretRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceImageUpdaterSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{25}
}

func (x *PatchInstanceImageUpdaterSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceImageUpdaterSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceImageUpdaterSecretRequest) GetSecret() map[string]*PatchInstanceImageUpdaterSecretRequest_ValueField {
	if x != nil {
		return x.Secret
	}
	return nil
}

type PatchInstanceImageUpdaterSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatchInstanceImageUpdaterSecretResponse) Reset() {
	*x = PatchInstanceImageUpdaterSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceImageUpdaterSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceImageUpdaterSecretResponse) ProtoMessage() {}

func (x *PatchInstanceImageUpdaterSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceImageUpdaterSecretResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceImageUpdaterSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{26}
}

type PatchInstanceAppsetSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                                                  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                                                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Secret         map[string]*PatchInstanceAppsetSecretRequest_ValueField `protobuf:"bytes,3,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PatchInstanceAppsetSecretRequest) Reset() {
	*x = PatchInstanceAppsetSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceAppsetSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceAppsetSecretRequest) ProtoMessage() {}

func (x *PatchInstanceAppsetSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceAppsetSecretRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceAppsetSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{27}
}

func (x *PatchInstanceAppsetSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PatchInstanceAppsetSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceAppsetSecretRequest) GetSecret() map[string]*PatchInstanceAppsetSecretRequest_ValueField {
	if x != nil {
		return x.Secret
	}
	return nil
}

type PatchInstanceAppsetSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatchInstanceAppsetSecretResponse) Reset() {
	*x = PatchInstanceAppsetSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceAppsetSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceAppsetSecretResponse) ProtoMessage() {}

func (x *PatchInstanceAppsetSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceAppsetSecretResponse.ProtoReflect.Descriptor instead.
func (*PatchInstanceAppsetSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{28}
}

type GetInstanceAppsetSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceAppsetSecretRequest) Reset() {
	*x = GetInstanceAppsetSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceAppsetSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceAppsetSecretRequest) ProtoMessage() {}

func (x *GetInstanceAppsetSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceAppsetSecretRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceAppsetSecretRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{29}
}

func (x *GetInstanceAppsetSecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceAppsetSecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceAppsetSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret map[string]string `protobuf:"bytes,1,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceAppsetSecretResponse) Reset() {
	*x = GetInstanceAppsetSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceAppsetSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceAppsetSecretResponse) ProtoMessage() {}

func (x *GetInstanceAppsetSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceAppsetSecretResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceAppsetSecretResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{30}
}

func (x *GetInstanceAppsetSecretResponse) GetSecret() map[string]string {
	if x != nil {
		return x.Secret
	}
	return nil
}

type UpdateInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string    `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Instance       *Instance `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *UpdateInstanceRequest) Reset() {
	*x = UpdateInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceRequest) ProtoMessage() {}

func (x *UpdateInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceRequest) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type UpdateInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *UpdateInstanceResponse) Reset() {
	*x = UpdateInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceResponse) ProtoMessage() {}

func (x *UpdateInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateInstanceResponse) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type UpdateInstanceCSSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Css            string `protobuf:"bytes,3,opt,name=css,proto3" json:"css,omitempty"`
}

func (x *UpdateInstanceCSSRequest) Reset() {
	*x = UpdateInstanceCSSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceCSSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceCSSRequest) ProtoMessage() {}

func (x *UpdateInstanceCSSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceCSSRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceCSSRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateInstanceCSSRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceCSSRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceCSSRequest) GetCss() string {
	if x != nil {
		return x.Css
	}
	return ""
}

type UpdateInstanceCSSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Css string `protobuf:"bytes,1,opt,name=css,proto3" json:"css,omitempty"`
}

func (x *UpdateInstanceCSSResponse) Reset() {
	*x = UpdateInstanceCSSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceCSSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceCSSResponse) ProtoMessage() {}

func (x *UpdateInstanceCSSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceCSSResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceCSSResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateInstanceCSSResponse) GetCss() string {
	if x != nil {
		return x.Css
	}
	return ""
}

type UpdateInstanceNotificationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Config         map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateInstanceNotificationConfigRequest) Reset() {
	*x = UpdateInstanceNotificationConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceNotificationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceNotificationConfigRequest) ProtoMessage() {}

func (x *UpdateInstanceNotificationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceNotificationConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceNotificationConfigRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateInstanceNotificationConfigRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceNotificationConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceNotificationConfigRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateInstanceNotificationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceNotificationConfigResponse) Reset() {
	*x = UpdateInstanceNotificationConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceNotificationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceNotificationConfigResponse) ProtoMessage() {}

func (x *UpdateInstanceNotificationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceNotificationConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceNotificationConfigResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{36}
}

type UpdateInstanceImageUpdaterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Config         map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateInstanceImageUpdaterConfigRequest) Reset() {
	*x = UpdateInstanceImageUpdaterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceImageUpdaterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceImageUpdaterConfigRequest) ProtoMessage() {}

func (x *UpdateInstanceImageUpdaterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceImageUpdaterConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceImageUpdaterConfigRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateInstanceImageUpdaterConfigRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceImageUpdaterConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceImageUpdaterConfigRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateInstanceImageUpdaterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceImageUpdaterConfigResponse) Reset() {
	*x = UpdateInstanceImageUpdaterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceImageUpdaterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceImageUpdaterConfigResponse) ProtoMessage() {}

func (x *UpdateInstanceImageUpdaterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceImageUpdaterConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceImageUpdaterConfigResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{38}
}

type UpdateInstanceImageUpdaterSSHConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string            `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Config         map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) Reset() {
	*x = UpdateInstanceImageUpdaterSSHConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceImageUpdaterSSHConfigRequest) ProtoMessage() {}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceImageUpdaterSSHConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceImageUpdaterSSHConfigRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceImageUpdaterSSHConfigRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateInstanceImageUpdaterSSHConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceImageUpdaterSSHConfigResponse) Reset() {
	*x = UpdateInstanceImageUpdaterSSHConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceImageUpdaterSSHConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceImageUpdaterSSHConfigResponse) ProtoMessage() {}

func (x *UpdateInstanceImageUpdaterSSHConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceImageUpdaterSSHConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceImageUpdaterSSHConfigResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{40}
}

type UpdateInstanceResourceCustomizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                         `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Resources      []*ResourceCustomizationConfig `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *UpdateInstanceResourceCustomizationsRequest) Reset() {
	*x = UpdateInstanceResourceCustomizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceResourceCustomizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceResourceCustomizationsRequest) ProtoMessage() {}

func (x *UpdateInstanceResourceCustomizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceResourceCustomizationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceResourceCustomizationsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateInstanceResourceCustomizationsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceResourceCustomizationsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceResourceCustomizationsRequest) GetResources() []*ResourceCustomizationConfig {
	if x != nil {
		return x.Resources
	}
	return nil
}

type UpdateInstanceResourceCustomizationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceResourceCustomizationsResponse) Reset() {
	*x = UpdateInstanceResourceCustomizationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceResourceCustomizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceResourceCustomizationsResponse) ProtoMessage() {}

func (x *UpdateInstanceResourceCustomizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceResourceCustomizationsResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceResourceCustomizationsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{42}
}

type DeleteInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteInstanceRequest) Reset() {
	*x = DeleteInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceRequest) ProtoMessage() {}

func (x *DeleteInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInstanceResponse) Reset() {
	*x = DeleteInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceResponse) ProtoMessage() {}

func (x *DeleteInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{44}
}

type ListInstanceAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *ListInstanceAccountsRequest) Reset() {
	*x = ListInstanceAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceAccountsRequest) ProtoMessage() {}

func (x *ListInstanceAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceAccountsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{45}
}

func (x *ListInstanceAccountsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListInstanceAccountsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type ListInstanceAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*InstanceAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *ListInstanceAccountsResponse) Reset() {
	*x = ListInstanceAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceAccountsResponse) ProtoMessage() {}

func (x *ListInstanceAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceAccountsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{46}
}

func (x *ListInstanceAccountsResponse) GetAccounts() []*InstanceAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type UpsertInstanceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                       `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string                       `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Capabilities   *InstanceAccountCapabilities `protobuf:"bytes,4,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	Disabled       bool                         `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *UpsertInstanceAccountRequest) Reset() {
	*x = UpsertInstanceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertInstanceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertInstanceAccountRequest) ProtoMessage() {}

func (x *UpsertInstanceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertInstanceAccountRequest.ProtoReflect.Descriptor instead.
func (*UpsertInstanceAccountRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{47}
}

func (x *UpsertInstanceAccountRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpsertInstanceAccountRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpsertInstanceAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertInstanceAccountRequest) GetCapabilities() *InstanceAccountCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *UpsertInstanceAccountRequest) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type UpsertInstanceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *InstanceAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *UpsertInstanceAccountResponse) Reset() {
	*x = UpsertInstanceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertInstanceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertInstanceAccountResponse) ProtoMessage() {}

func (x *UpsertInstanceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertInstanceAccountResponse.ProtoReflect.Descriptor instead.
func (*UpsertInstanceAccountResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{48}
}

func (x *UpsertInstanceAccountResponse) GetAccount() *InstanceAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

type UpdateInstanceAccountPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Password       string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UpdateInstanceAccountPasswordRequest) Reset() {
	*x = UpdateInstanceAccountPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceAccountPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceAccountPasswordRequest) ProtoMessage() {}

func (x *UpdateInstanceAccountPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceAccountPasswordRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceAccountPasswordRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateInstanceAccountPasswordRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceAccountPasswordRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateInstanceAccountPasswordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateInstanceAccountPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UpdateInstanceAccountPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceAccountPasswordResponse) Reset() {
	*x = UpdateInstanceAccountPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceAccountPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceAccountPasswordResponse) ProtoMessage() {}

func (x *UpdateInstanceAccountPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceAccountPasswordResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceAccountPasswordResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{50}
}

type RegenerateInstanceAccountPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RegenerateInstanceAccountPasswordRequest) Reset() {
	*x = RegenerateInstanceAccountPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateInstanceAccountPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateInstanceAccountPasswordRequest) ProtoMessage() {}

func (x *RegenerateInstanceAccountPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateInstanceAccountPasswordRequest.ProtoReflect.Descriptor instead.
func (*RegenerateInstanceAccountPasswordRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{51}
}

func (x *RegenerateInstanceAccountPasswordRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *RegenerateInstanceAccountPasswordRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RegenerateInstanceAccountPasswordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RegenerateInstanceAccountPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RegenerateInstanceAccountPasswordResponse) Reset() {
	*x = RegenerateInstanceAccountPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateInstanceAccountPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateInstanceAccountPasswordResponse) ProtoMessage() {}

func (x *RegenerateInstanceAccountPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateInstanceAccountPasswordResponse.ProtoReflect.Descriptor instead.
func (*RegenerateInstanceAccountPasswordResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{52}
}

func (x *RegenerateInstanceAccountPasswordResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type DeleteInstanceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteInstanceAccountRequest) Reset() {
	*x = DeleteInstanceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceAccountRequest) ProtoMessage() {}

func (x *DeleteInstanceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceAccountRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteInstanceAccountRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteInstanceAccountRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeleteInstanceAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteInstanceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInstanceAccountResponse) Reset() {
	*x = DeleteInstanceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceAccountResponse) ProtoMessage() {}

func (x *DeleteInstanceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceAccountResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{54}
}

type GetAIAssistantUsageStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     []string `protobuf:"bytes,2,rep,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *GetAIAssistantUsageStatsRequest) Reset() {
	*x = GetAIAssistantUsageStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAIAssistantUsageStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAIAssistantUsageStatsRequest) ProtoMessage() {}

func (x *GetAIAssistantUsageStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAIAssistantUsageStatsRequest.ProtoReflect.Descriptor instead.
func (*GetAIAssistantUsageStatsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{55}
}

func (x *GetAIAssistantUsageStatsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetAIAssistantUsageStatsRequest) GetInstanceId() []string {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

type GetAIAssistantUsageStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalConversations    uint32 `protobuf:"varint,1,opt,name=total_conversations,json=totalConversations,proto3" json:"total_conversations,omitempty"`
	ResolvedConversations uint32 `protobuf:"varint,3,opt,name=resolved_conversations,json=resolvedConversations,proto3" json:"resolved_conversations,omitempty"`
}

func (x *GetAIAssistantUsageStatsResponse) Reset() {
	*x = GetAIAssistantUsageStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAIAssistantUsageStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAIAssistantUsageStatsResponse) ProtoMessage() {}

func (x *GetAIAssistantUsageStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAIAssistantUsageStatsResponse.ProtoReflect.Descriptor instead.
func (*GetAIAssistantUsageStatsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{56}
}

func (x *GetAIAssistantUsageStatsResponse) GetTotalConversations() uint32 {
	if x != nil {
		return x.TotalConversations
	}
	return 0
}

func (x *GetAIAssistantUsageStatsResponse) GetResolvedConversations() uint32 {
	if x != nil {
		return x.ResolvedConversations
	}
	return 0
}

type GetSyncOperationsStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string               `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Filter         *SyncOperationFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Interval       v11.GroupByInterval  `protobuf:"varint,3,opt,name=interval,proto3,enum=akuity.types.misc.v1.GroupByInterval" json:"interval,omitempty"`
	// can either set group_by_field or group_by_label_field(has more preference)
	GroupByField      SyncOperationGroupField `protobuf:"varint,4,opt,name=group_by_field,json=groupByField,proto3,enum=akuity.argocd.v1.SyncOperationGroupField" json:"group_by_field,omitempty"`
	GroupByLabelField *string                 `protobuf:"bytes,5,opt,name=group_by_label_field,json=groupByLabelField,proto3,oneof" json:"group_by_label_field,omitempty"`
}

func (x *GetSyncOperationsStatsRequest) Reset() {
	*x = GetSyncOperationsStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncOperationsStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncOperationsStatsRequest) ProtoMessage() {}

func (x *GetSyncOperationsStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncOperationsStatsRequest.ProtoReflect.Descriptor instead.
func (*GetSyncOperationsStatsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{57}
}

func (x *GetSyncOperationsStatsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetSyncOperationsStatsRequest) GetFilter() *SyncOperationFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetSyncOperationsStatsRequest) GetInterval() v11.GroupByInterval {
	if x != nil {
		return x.Interval
	}
	return v11.GroupByInterval(0)
}

func (x *GetSyncOperationsStatsRequest) GetGroupByField() SyncOperationGroupField {
	if x != nil {
		return x.GroupByField
	}
	return SyncOperationGroupField_SYNC_OPERATION_GROUP_FIELD_UNSPECIFIED
}

func (x *GetSyncOperationsStatsRequest) GetGroupByLabelField() string {
	if x != nil && x.GroupByLabelField != nil {
		return *x.GroupByLabelField
	}
	return ""
}

type GetSyncOperationsEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string               `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Filter         *SyncOperationFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit          *int64               `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset         *int64               `protobuf:"varint,4,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	Field          SyncOperationField   `protobuf:"varint,5,opt,name=field,proto3,enum=akuity.argocd.v1.SyncOperationField" json:"field,omitempty"`
	FieldLike      string               `protobuf:"bytes,6,opt,name=field_like,json=fieldLike,proto3" json:"field_like,omitempty"`
}

func (x *GetSyncOperationsEventsRequest) Reset() {
	*x = GetSyncOperationsEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncOperationsEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncOperationsEventsRequest) ProtoMessage() {}

func (x *GetSyncOperationsEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncOperationsEventsRequest.ProtoReflect.Descriptor instead.
func (*GetSyncOperationsEventsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{58}
}

func (x *GetSyncOperationsEventsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetSyncOperationsEventsRequest) GetFilter() *SyncOperationFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetSyncOperationsEventsRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetSyncOperationsEventsRequest) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetSyncOperationsEventsRequest) GetField() SyncOperationField {
	if x != nil {
		return x.Field
	}
	return SyncOperationField_SYNC_OPERATION_FIELD_UNSPECIFIED
}

func (x *GetSyncOperationsEventsRequest) GetFieldLike() string {
	if x != nil {
		return x.FieldLike
	}
	return ""
}

type SyncOperationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime     string            `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *string           `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	AppName       []string          `protobuf:"bytes,3,rep,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	Projects      []string          `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty"`
	Labels        map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Repo          []string          `protobuf:"bytes,6,rep,name=repo,proto3" json:"repo,omitempty"`
	InstanceId    []string          `protobuf:"bytes,7,rep,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	InitiatedBy   []string          `protobuf:"bytes,8,rep,name=initiated_by,json=initiatedBy,proto3" json:"initiated_by,omitempty"`
	InstanceNames []string          `protobuf:"bytes,9,rep,name=instance_names,json=instanceNames,proto3" json:"instance_names,omitempty"`
}

func (x *SyncOperationFilter) Reset() {
	*x = SyncOperationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOperationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOperationFilter) ProtoMessage() {}

func (x *SyncOperationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOperationFilter.ProtoReflect.Descriptor instead.
func (*SyncOperationFilter) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{59}
}

func (x *SyncOperationFilter) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SyncOperationFilter) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *SyncOperationFilter) GetAppName() []string {
	if x != nil {
		return x.AppName
	}
	return nil
}

func (x *SyncOperationFilter) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *SyncOperationFilter) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SyncOperationFilter) GetRepo() []string {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *SyncOperationFilter) GetInstanceId() []string {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *SyncOperationFilter) GetInitiatedBy() []string {
	if x != nil {
		return x.InitiatedBy
	}
	return nil
}

func (x *SyncOperationFilter) GetInstanceNames() []string {
	if x != nil {
		return x.InstanceNames
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{60}
}

func (x *Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SyncOperationStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalStart string             `protobuf:"bytes,1,opt,name=interval_start,json=intervalStart,proto3" json:"interval_start,omitempty"`
	CountMap      map[string]uint32  `protobuf:"bytes,2,rep,name=count_map,json=countMap,proto3" json:"count_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AverageMap    map[string]float32 `protobuf:"bytes,3,rep,name=average_map,json=averageMap,proto3" json:"average_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *SyncOperationStat) Reset() {
	*x = SyncOperationStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOperationStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOperationStat) ProtoMessage() {}

func (x *SyncOperationStat) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOperationStat.ProtoReflect.Descriptor instead.
func (*SyncOperationStat) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{61}
}

func (x *SyncOperationStat) GetIntervalStart() string {
	if x != nil {
		return x.IntervalStart
	}
	return ""
}

func (x *SyncOperationStat) GetCountMap() map[string]uint32 {
	if x != nil {
		return x.CountMap
	}
	return nil
}

func (x *SyncOperationStat) GetAverageMap() map[string]float32 {
	if x != nil {
		return x.AverageMap
	}
	return nil
}

type SyncOperationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InstanceId            string                     `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ApplicationName       string                     `protobuf:"bytes,3,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	StartTime             string                     `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               string                     `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ResultPhase           string                     `protobuf:"bytes,6,opt,name=result_phase,json=resultPhase,proto3" json:"result_phase,omitempty"`
	ResultMessage         string                     `protobuf:"bytes,7,opt,name=result_message,json=resultMessage,proto3" json:"result_message,omitempty"`
	Details               *SyncOperationEventDetails `protobuf:"bytes,8,opt,name=details,proto3" json:"details,omitempty"`
	Count                 uint32                     `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	LastOccurredTimestamp string                     `protobuf:"bytes,10,opt,name=last_occurred_timestamp,json=lastOccurredTimestamp,proto3" json:"last_occurred_timestamp,omitempty"`
	Duration              uint32                     `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *SyncOperationEvent) Reset() {
	*x = SyncOperationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOperationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOperationEvent) ProtoMessage() {}

func (x *SyncOperationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOperationEvent.ProtoReflect.Descriptor instead.
func (*SyncOperationEvent) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{62}
}

func (x *SyncOperationEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncOperationEvent) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SyncOperationEvent) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *SyncOperationEvent) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SyncOperationEvent) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *SyncOperationEvent) GetResultPhase() string {
	if x != nil {
		return x.ResultPhase
	}
	return ""
}

func (x *SyncOperationEvent) GetResultMessage() string {
	if x != nil {
		return x.ResultMessage
	}
	return ""
}

func (x *SyncOperationEvent) GetDetails() *SyncOperationEventDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SyncOperationEvent) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SyncOperationEvent) GetLastOccurredTimestamp() string {
	if x != nil {
		return x.LastOccurredTimestamp
	}
	return ""
}

func (x *SyncOperationEvent) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SyncOperationEventDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels      map[string]string   `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Project     string              `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Repository  string              `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision    string              `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	Prune       bool                `protobuf:"varint,5,opt,name=prune,proto3" json:"prune,omitempty"`
	DryRun      bool                `protobuf:"varint,6,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	SyncOptions []string            `protobuf:"bytes,7,rep,name=sync_options,json=syncOptions,proto3" json:"sync_options,omitempty"`
	InitiatedBy *OperationInitiator `protobuf:"bytes,8,opt,name=initiated_by,json=initiatedBy,proto3" json:"initiated_by,omitempty"`
}

func (x *SyncOperationEventDetails) Reset() {
	*x = SyncOperationEventDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOperationEventDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOperationEventDetails) ProtoMessage() {}

func (x *SyncOperationEventDetails) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOperationEventDetails.ProtoReflect.Descriptor instead.
func (*SyncOperationEventDetails) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{63}
}

func (x *SyncOperationEventDetails) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SyncOperationEventDetails) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SyncOperationEventDetails) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *SyncOperationEventDetails) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *SyncOperationEventDetails) GetPrune() bool {
	if x != nil {
		return x.Prune
	}
	return false
}

func (x *SyncOperationEventDetails) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *SyncOperationEventDetails) GetSyncOptions() []string {
	if x != nil {
		return x.SyncOptions
	}
	return nil
}

func (x *SyncOperationEventDetails) GetInitiatedBy() *OperationInitiator {
	if x != nil {
		return x.InitiatedBy
	}
	return nil
}

type OperationInitiator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Automated bool   `protobuf:"varint,2,opt,name=automated,proto3" json:"automated,omitempty"`
}

func (x *OperationInitiator) Reset() {
	*x = OperationInitiator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationInitiator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationInitiator) ProtoMessage() {}

func (x *OperationInitiator) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationInitiator.ProtoReflect.Descriptor instead.
func (*OperationInitiator) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{64}
}

func (x *OperationInitiator) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OperationInitiator) GetAutomated() bool {
	if x != nil {
		return x.Automated
	}
	return false
}

type GetSyncOperationsStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncOperationStats []*SyncOperationStat `protobuf:"bytes,1,rep,name=sync_operation_stats,json=syncOperationStats,proto3" json:"sync_operation_stats,omitempty"`
}

func (x *GetSyncOperationsStatsResponse) Reset() {
	*x = GetSyncOperationsStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncOperationsStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncOperationsStatsResponse) ProtoMessage() {}

func (x *GetSyncOperationsStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncOperationsStatsResponse.ProtoReflect.Descriptor instead.
func (*GetSyncOperationsStatsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{65}
}

func (x *GetSyncOperationsStatsResponse) GetSyncOperationStats() []*SyncOperationStat {
	if x != nil {
		return x.SyncOperationStats
	}
	return nil
}

type GetSyncOperationsEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncOperationEvents []*SyncOperationEvent `protobuf:"bytes,1,rep,name=sync_operation_events,json=syncOperationEvents,proto3" json:"sync_operation_events,omitempty"`
	Count               int64                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	FieldResult         []string              `protobuf:"bytes,3,rep,name=field_result,json=fieldResult,proto3" json:"field_result,omitempty"`
}

func (x *GetSyncOperationsEventsResponse) Reset() {
	*x = GetSyncOperationsEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncOperationsEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncOperationsEventsResponse) ProtoMessage() {}

func (x *GetSyncOperationsEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncOperationsEventsResponse.ProtoReflect.Descriptor instead.
func (*GetSyncOperationsEventsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{66}
}

func (x *GetSyncOperationsEventsResponse) GetSyncOperationEvents() []*SyncOperationEvent {
	if x != nil {
		return x.SyncOperationEvents
	}
	return nil
}

func (x *GetSyncOperationsEventsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetSyncOperationsEventsResponse) GetFieldResult() []string {
	if x != nil {
		return x.FieldResult
	}
	return nil
}

type ClusterFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameLike            *string           `protobuf:"bytes,1,opt,name=name_like,json=nameLike,proto3,oneof" json:"name_like,omitempty"`
	AgentStatus         []v12.TenantPhase `protobuf:"varint,2,rep,packed,name=agent_status,json=agentStatus,proto3,enum=akuity.types.status.health.v1.TenantPhase" json:"agent_status,omitempty"`
	AgentVersion        []string          `protobuf:"bytes,3,rep,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	ArgocdVersion       []string          `protobuf:"bytes,4,rep,name=argocd_version,json=argocdVersion,proto3" json:"argocd_version,omitempty"`
	Limit               *int64            `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset              *int64            `protobuf:"varint,6,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	ExcludeAgentVersion *string           `protobuf:"bytes,7,opt,name=exclude_agent_version,json=excludeAgentVersion,proto3,oneof" json:"exclude_agent_version,omitempty"`
	OutdatedManifest    *bool             `protobuf:"varint,8,opt,name=outdated_manifest,json=outdatedManifest,proto3,oneof" json:"outdated_manifest,omitempty"`
	Namespace           []string          `protobuf:"bytes,9,rep,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceScoped     *bool             `protobuf:"varint,10,opt,name=namespace_scoped,json=namespaceScoped,proto3,oneof" json:"namespace_scoped,omitempty"`
	Labels              map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NeedReapply         *bool             `protobuf:"varint,12,opt,name=need_reapply,json=needReapply,proto3,oneof" json:"need_reapply,omitempty"`
}

func (x *ClusterFilter) Reset() {
	*x = ClusterFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterFilter) ProtoMessage() {}

func (x *ClusterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterFilter.ProtoReflect.Descriptor instead.
func (*ClusterFilter) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{67}
}

func (x *ClusterFilter) GetNameLike() string {
	if x != nil && x.NameLike != nil {
		return *x.NameLike
	}
	return ""
}

func (x *ClusterFilter) GetAgentStatus() []v12.TenantPhase {
	if x != nil {
		return x.AgentStatus
	}
	return nil
}

func (x *ClusterFilter) GetAgentVersion() []string {
	if x != nil {
		return x.AgentVersion
	}
	return nil
}

func (x *ClusterFilter) GetArgocdVersion() []string {
	if x != nil {
		return x.ArgocdVersion
	}
	return nil
}

func (x *ClusterFilter) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ClusterFilter) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ClusterFilter) GetExcludeAgentVersion() string {
	if x != nil && x.ExcludeAgentVersion != nil {
		return *x.ExcludeAgentVersion
	}
	return ""
}

func (x *ClusterFilter) GetOutdatedManifest() bool {
	if x != nil && x.OutdatedManifest != nil {
		return *x.OutdatedManifest
	}
	return false
}

func (x *ClusterFilter) GetNamespace() []string {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ClusterFilter) GetNamespaceScoped() bool {
	if x != nil && x.NamespaceScoped != nil {
		return *x.NamespaceScoped
	}
	return false
}

func (x *ClusterFilter) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ClusterFilter) GetNeedReapply() bool {
	if x != nil && x.NeedReapply != nil {
		return *x.NeedReapply
	}
	return false
}

type ListInstanceClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string         `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string         `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Filter         *ClusterFilter `protobuf:"bytes,3,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *ListInstanceClustersRequest) Reset() {
	*x = ListInstanceClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceClustersRequest) ProtoMessage() {}

func (x *ListInstanceClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceClustersRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceClustersRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{68}
}

func (x *ListInstanceClustersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListInstanceClustersRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListInstanceClustersRequest) GetFilter() *ClusterFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type WatchInstanceClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string         `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string         `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ClusterId      *string        `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	MinClusterName *string        `protobuf:"bytes,4,opt,name=min_cluster_name,json=minClusterName,proto3,oneof" json:"min_cluster_name,omitempty"`
	MaxClusterName *string        `protobuf:"bytes,5,opt,name=max_cluster_name,json=maxClusterName,proto3,oneof" json:"max_cluster_name,omitempty"`
	Filter         *ClusterFilter `protobuf:"bytes,6,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *WatchInstanceClustersRequest) Reset() {
	*x = WatchInstanceClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstanceClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstanceClustersRequest) ProtoMessage() {}

func (x *WatchInstanceClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstanceClustersRequest.ProtoReflect.Descriptor instead.
func (*WatchInstanceClustersRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{69}
}

func (x *WatchInstanceClustersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetClusterId() string {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetMinClusterName() string {
	if x != nil && x.MinClusterName != nil {
		return *x.MinClusterName
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetMaxClusterName() string {
	if x != nil && x.MaxClusterName != nil {
		return *x.MaxClusterName
	}
	return ""
}

func (x *WatchInstanceClustersRequest) GetFilter() *ClusterFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type WatchInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     *string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3,oneof" json:"instance_id,omitempty"`
	WorkspaceId    *string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3,oneof" json:"workspace_id,omitempty"`
}

func (x *WatchInstancesRequest) Reset() {
	*x = WatchInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstancesRequest) ProtoMessage() {}

func (x *WatchInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstancesRequest.ProtoReflect.Descriptor instead.
func (*WatchInstancesRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{70}
}

func (x *WatchInstancesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *WatchInstancesRequest) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *WatchInstancesRequest) GetWorkspaceId() string {
	if x != nil && x.WorkspaceId != nil {
		return *x.WorkspaceId
	}
	return ""
}

type WatchInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *Instance     `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Type v13.EventType `protobuf:"varint,2,opt,name=type,proto3,enum=akuity.types.events.v1.EventType" json:"type,omitempty"`
}

func (x *WatchInstancesResponse) Reset() {
	*x = WatchInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstancesResponse) ProtoMessage() {}

func (x *WatchInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstancesResponse.ProtoReflect.Descriptor instead.
func (*WatchInstancesResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{71}
}

func (x *WatchInstancesResponse) GetItem() *Instance {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *WatchInstancesResponse) GetType() v13.EventType {
	if x != nil {
		return x.Type
	}
	return v13.EventType(0)
}

type WatchInstanceClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *Cluster      `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Type v13.EventType `protobuf:"varint,2,opt,name=type,proto3,enum=akuity.types.events.v1.EventType" json:"type,omitempty"`
}

func (x *WatchInstanceClustersResponse) Reset() {
	*x = WatchInstanceClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInstanceClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstanceClustersResponse) ProtoMessage() {}

func (x *WatchInstanceClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstanceClustersResponse.ProtoReflect.Descriptor instead.
func (*WatchInstanceClustersResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{72}
}

func (x *WatchInstanceClustersResponse) GetItem() *Cluster {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *WatchInstanceClustersResponse) GetType() v13.EventType {
	if x != nil {
		return x.Type
	}
	return v13.EventType(0)
}

type ListInstanceClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters   []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	TotalCount int64      `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListInstanceClustersResponse) Reset() {
	*x = ListInstanceClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceClustersResponse) ProtoMessage() {}

func (x *ListInstanceClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceClustersResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceClustersResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{73}
}

func (x *ListInstanceClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListInstanceClustersResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CreateInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description    string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"` // Use data.namespace instead
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	NamespaceScoped bool         `protobuf:"varint,6,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"` // Use data.namespace_scoped instead
	Data            *ClusterData `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Upsert          bool         `protobuf:"varint,8,opt,name=upsert,proto3" json:"upsert,omitempty"`
	Force           bool         `protobuf:"varint,9,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *CreateInstanceClusterRequest) Reset() {
	*x = CreateInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceClusterRequest) ProtoMessage() {}

func (x *CreateInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{74}
}

func (x *CreateInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateInstanceClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInstanceClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *CreateInstanceClusterRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *CreateInstanceClusterRequest) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *CreateInstanceClusterRequest) GetData() *ClusterData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateInstanceClusterRequest) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

func (x *CreateInstanceClusterRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type CreateInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *CreateInstanceClusterResponse) Reset() {
	*x = CreateInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceClusterResponse) ProtoMessage() {}

func (x *CreateInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{75}
}

func (x *CreateInstanceClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type GetInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string  `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	IdType         v1.Type `protobuf:"varint,3,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id             string  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceClusterRequest) Reset() {
	*x = GetInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterRequest) ProtoMessage() {}

func (x *GetInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{76}
}

func (x *GetInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInstanceClusterRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *GetInstanceClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *GetInstanceClusterResponse) Reset() {
	*x = GetInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterResponse) ProtoMessage() {}

func (x *GetInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{77}
}

func (x *GetInstanceClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type GetInstanceClusterInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasApplications bool `protobuf:"varint,1,opt,name=has_applications,json=hasApplications,proto3" json:"has_applications,omitempty"`
}

func (x *GetInstanceClusterInfoResponse) Reset() {
	*x = GetInstanceClusterInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterInfoResponse) ProtoMessage() {}

func (x *GetInstanceClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{78}
}

func (x *GetInstanceClusterInfoResponse) GetHasApplications() bool {
	if x != nil {
		return x.HasApplications
	}
	return false
}

type GetInstanceClusterManifestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId      string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId          string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id                  string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	OfflineInstallation bool   `protobuf:"varint,4,opt,name=offline_installation,json=offlineInstallation,proto3" json:"offline_installation,omitempty"`
	SkipNamespace       *bool  `protobuf:"varint,5,opt,name=skip_namespace,json=skipNamespace,proto3,oneof" json:"skip_namespace,omitempty"`
}

func (x *GetInstanceClusterManifestsRequest) Reset() {
	*x = GetInstanceClusterManifestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterManifestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterManifestsRequest) ProtoMessage() {}

func (x *GetInstanceClusterManifestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterManifestsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterManifestsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{79}
}

func (x *GetInstanceClusterManifestsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceClusterManifestsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInstanceClusterManifestsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceClusterManifestsRequest) GetOfflineInstallation() bool {
	if x != nil {
		return x.OfflineInstallation
	}
	return false
}

func (x *GetInstanceClusterManifestsRequest) GetSkipNamespace() bool {
	if x != nil && x.SkipNamespace != nil {
		return *x.SkipNamespace
	}
	return false
}

type UpdateInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string       `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string       `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Description    string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Data           *ClusterData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Force          bool         `protobuf:"varint,6,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *UpdateInstanceClusterRequest) Reset() {
	*x = UpdateInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClusterRequest) ProtoMessage() {}

func (x *UpdateInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{80}
}

func (x *UpdateInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateInstanceClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateInstanceClusterRequest) GetData() *ClusterData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateInstanceClusterRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type UpdateInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *UpdateInstanceClusterResponse) Reset() {
	*x = UpdateInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClusterResponse) ProtoMessage() {}

func (x *UpdateInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateInstanceClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type UpdateInstanceClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId        string                `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id                    string                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ClusterCustomizations *ClusterCustomization `protobuf:"bytes,3,opt,name=cluster_customizations,json=clusterCustomizations,proto3" json:"cluster_customizations,omitempty"`
}

func (x *UpdateInstanceClustersRequest) Reset() {
	*x = UpdateInstanceClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClustersRequest) ProtoMessage() {}

func (x *UpdateInstanceClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClustersRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClustersRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateInstanceClustersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceClustersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceClustersRequest) GetClusterCustomizations() *ClusterCustomization {
	if x != nil {
		return x.ClusterCustomizations
	}
	return nil
}

type UpdateInstanceClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceClustersResponse) Reset() {
	*x = UpdateInstanceClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClustersResponse) ProtoMessage() {}

func (x *UpdateInstanceClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClustersResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClustersResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{83}
}

type UpdateInstanceClustersAgentVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string   `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ClusterNames   []string `protobuf:"bytes,3,rep,name=cluster_names,json=clusterNames,proto3" json:"cluster_names,omitempty"`
	NewVersion     string   `protobuf:"bytes,4,opt,name=new_version,json=newVersion,proto3" json:"new_version,omitempty"`
	AllClusters    *bool    `protobuf:"varint,5,opt,name=all_clusters,json=allClusters,proto3,oneof" json:"all_clusters,omitempty"`
}

func (x *UpdateInstanceClustersAgentVersionRequest) Reset() {
	*x = UpdateInstanceClustersAgentVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceClustersAgentVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceClustersAgentVersionRequest) ProtoMessage() {}

func (x *UpdateInstanceClustersAgentVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceClustersAgentVersionRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceClustersAgentVersionRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetNewVersion() string {
	if x != nil {
		return x.NewVersion
	}
	return ""
}

func (x *UpdateInstanceClustersAgentVersionRequest) GetAllClusters() bool {
	if x != nil && x.AllClusters != nil {
		return *x.AllClusters
	}
	return false
}

type RotateInstanceClusterCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string   `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ClusterNames   []string `protobuf:"bytes,3,rep,name=cluster_names,json=clusterNames,proto3" json:"cluster_names,omitempty"`
	AllClusters    *bool    `protobuf:"varint,4,opt,name=all_clusters,json=allClusters,proto3,oneof" json:"all_clusters,omitempty"`
}

func (x *RotateInstanceClusterCredentialsRequest) Reset() {
	*x = RotateInstanceClusterCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateInstanceClusterCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateInstanceClusterCredentialsRequest) ProtoMessage() {}

func (x *RotateInstanceClusterCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateInstanceClusterCredentialsRequest.ProtoReflect.Descriptor instead.
func (*RotateInstanceClusterCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{85}
}

func (x *RotateInstanceClusterCredentialsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *RotateInstanceClusterCredentialsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RotateInstanceClusterCredentialsRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *RotateInstanceClusterCredentialsRequest) GetAllClusters() bool {
	if x != nil && x.AllClusters != nil {
		return *x.AllClusters
	}
	return false
}

type RotateInstanceClusterCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkippedClusters []string `protobuf:"bytes,1,rep,name=skipped_clusters,json=skippedClusters,proto3" json:"skipped_clusters,omitempty"`
}

func (x *RotateInstanceClusterCredentialsResponse) Reset() {
	*x = RotateInstanceClusterCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateInstanceClusterCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateInstanceClusterCredentialsResponse) ProtoMessage() {}

func (x *RotateInstanceClusterCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateInstanceClusterCredentialsResponse.ProtoReflect.Descriptor instead.
func (*RotateInstanceClusterCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{86}
}

func (x *RotateInstanceClusterCredentialsResponse) GetSkippedClusters() []string {
	if x != nil {
		return x.SkippedClusters
	}
	return nil
}

type DeleteInstanceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteInstanceClusterRequest) Reset() {
	*x = DeleteInstanceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceClusterRequest) ProtoMessage() {}

func (x *DeleteInstanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{87}
}

func (x *DeleteInstanceClusterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteInstanceClusterRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeleteInstanceClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteInstanceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInstanceClusterResponse) Reset() {
	*x = DeleteInstanceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceClusterResponse) ProtoMessage() {}

func (x *DeleteInstanceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceClusterResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{88}
}

type ApplicationsHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthyCount     uint32 `protobuf:"varint,1,opt,name=healthy_count,json=healthyCount,proto3" json:"healthy_count,omitempty"`
	DegradedCount    uint32 `protobuf:"varint,2,opt,name=degraded_count,json=degradedCount,proto3" json:"degraded_count,omitempty"`
	ProgressingCount uint32 `protobuf:"varint,3,opt,name=progressing_count,json=progressingCount,proto3" json:"progressing_count,omitempty"`
	UnknownCount     uint32 `protobuf:"varint,4,opt,name=unknown_count,json=unknownCount,proto3" json:"unknown_count,omitempty"`
	SuspendedCount   uint32 `protobuf:"varint,5,opt,name=suspended_count,json=suspendedCount,proto3" json:"suspended_count,omitempty"`
	MissingCount     uint32 `protobuf:"varint,6,opt,name=missing_count,json=missingCount,proto3" json:"missing_count,omitempty"`
}

func (x *ApplicationsHealth) Reset() {
	*x = ApplicationsHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsHealth) ProtoMessage() {}

func (x *ApplicationsHealth) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsHealth.ProtoReflect.Descriptor instead.
func (*ApplicationsHealth) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{89}
}

func (x *ApplicationsHealth) GetHealthyCount() uint32 {
	if x != nil {
		return x.HealthyCount
	}
	return 0
}

func (x *ApplicationsHealth) GetDegradedCount() uint32 {
	if x != nil {
		return x.DegradedCount
	}
	return 0
}

func (x *ApplicationsHealth) GetProgressingCount() uint32 {
	if x != nil {
		return x.ProgressingCount
	}
	return 0
}

func (x *ApplicationsHealth) GetUnknownCount() uint32 {
	if x != nil {
		return x.UnknownCount
	}
	return 0
}

func (x *ApplicationsHealth) GetSuspendedCount() uint32 {
	if x != nil {
		return x.SuspendedCount
	}
	return 0
}

func (x *ApplicationsHealth) GetMissingCount() uint32 {
	if x != nil {
		return x.MissingCount
	}
	return 0
}

type ApplicationsSyncStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncedCount    uint32 `protobuf:"varint,1,opt,name=synced_count,json=syncedCount,proto3" json:"synced_count,omitempty"`
	OutOfSyncCount uint32 `protobuf:"varint,2,opt,name=out_of_sync_count,json=outOfSyncCount,proto3" json:"out_of_sync_count,omitempty"`
	UnknownCount   uint32 `protobuf:"varint,3,opt,name=unknown_count,json=unknownCount,proto3" json:"unknown_count,omitempty"`
}

func (x *ApplicationsSyncStatus) Reset() {
	*x = ApplicationsSyncStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsSyncStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsSyncStatus) ProtoMessage() {}

func (x *ApplicationsSyncStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsSyncStatus.ProtoReflect.Descriptor instead.
func (*ApplicationsSyncStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{90}
}

func (x *ApplicationsSyncStatus) GetSyncedCount() uint32 {
	if x != nil {
		return x.SyncedCount
	}
	return 0
}

func (x *ApplicationsSyncStatus) GetOutOfSyncCount() uint32 {
	if x != nil {
		return x.OutOfSyncCount
	}
	return 0
}

func (x *ApplicationsSyncStatus) GetUnknownCount() uint32 {
	if x != nil {
		return x.UnknownCount
	}
	return 0
}

type ApplicationsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationCount    uint32                  `protobuf:"varint,1,opt,name=application_count,json=applicationCount,proto3" json:"application_count,omitempty"`
	ResourcesCount      uint32                  `protobuf:"varint,2,opt,name=resources_count,json=resourcesCount,proto3" json:"resources_count,omitempty"`
	SyncInProgressCount uint32                  `protobuf:"varint,3,opt,name=sync_in_progress_count,json=syncInProgressCount,proto3" json:"sync_in_progress_count,omitempty"`
	WarningCount        uint32                  `protobuf:"varint,4,opt,name=warning_count,json=warningCount,proto3" json:"warning_count,omitempty"`
	ErrorCount          uint32                  `protobuf:"varint,5,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	Health              *ApplicationsHealth     `protobuf:"bytes,6,opt,name=health,proto3" json:"health,omitempty"`
	SyncStatus          *ApplicationsSyncStatus `protobuf:"bytes,7,opt,name=sync_status,json=syncStatus,proto3" json:"sync_status,omitempty"`
	AppOfAppCount       uint32                  `protobuf:"varint,8,opt,name=app_of_app_count,json=appOfAppCount,proto3" json:"app_of_app_count,omitempty"`
}

func (x *ApplicationsStatus) Reset() {
	*x = ApplicationsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsStatus) ProtoMessage() {}

func (x *ApplicationsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsStatus.ProtoReflect.Descriptor instead.
func (*ApplicationsStatus) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{91}
}

func (x *ApplicationsStatus) GetApplicationCount() uint32 {
	if x != nil {
		return x.ApplicationCount
	}
	return 0
}

func (x *ApplicationsStatus) GetResourcesCount() uint32 {
	if x != nil {
		return x.ResourcesCount
	}
	return 0
}

func (x *ApplicationsStatus) GetSyncInProgressCount() uint32 {
	if x != nil {
		return x.SyncInProgressCount
	}
	return 0
}

func (x *ApplicationsStatus) GetWarningCount() uint32 {
	if x != nil {
		return x.WarningCount
	}
	return 0
}

func (x *ApplicationsStatus) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *ApplicationsStatus) GetHealth() *ApplicationsHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *ApplicationsStatus) GetSyncStatus() *ApplicationsSyncStatus {
	if x != nil {
		return x.SyncStatus
	}
	return nil
}

func (x *ApplicationsStatus) GetAppOfAppCount() uint32 {
	if x != nil {
		return x.AppOfAppCount
	}
	return 0
}

type ArgoCDConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminEnabled         *bool                        `protobuf:"varint,1,opt,name=admin_enabled,json=adminEnabled,proto3,oneof" json:"admin_enabled,omitempty"`
	StatusBadge          *ArgoCDStatusBadgeConfig     `protobuf:"bytes,2,opt,name=status_badge,json=statusBadge,proto3" json:"status_badge,omitempty"`
	GoogleAnalytics      *ArgoCDGoogleAnalyticsConfig `protobuf:"bytes,3,opt,name=google_analytics,json=googleAnalytics,proto3" json:"google_analytics,omitempty"`
	AllowAnonymousUser   *bool                        `protobuf:"varint,4,opt,name=allow_anonymous_user,json=allowAnonymousUser,proto3,oneof" json:"allow_anonymous_user,omitempty"`
	Banner               *ArgoCDBannerConfig          `protobuf:"bytes,5,opt,name=banner,proto3" json:"banner,omitempty"`
	Chat                 *ArgoCDAlertConfig           `protobuf:"bytes,6,opt,name=chat,proto3" json:"chat,omitempty"`
	InstanceLabelKey     string                       `protobuf:"bytes,7,opt,name=instance_label_key,json=instanceLabelKey,proto3" json:"instance_label_key,omitempty"`
	KustomizeSettings    *ArgoCDKustomizeSettings     `protobuf:"bytes,8,opt,name=kustomize_settings,json=kustomizeSettings,proto3" json:"kustomize_settings,omitempty"`
	HelmSettings         *ArgoCDHelmSettings          `protobuf:"bytes,9,opt,name=helm_settings,json=helmSettings,proto3" json:"helm_settings,omitempty"`
	ResourceSettings     *ArgoCDResourceSettings      `protobuf:"bytes,10,opt,name=resource_settings,json=resourceSettings,proto3" json:"resource_settings,omitempty"`
	UsersSessionDuration string                       `protobuf:"bytes,11,opt,name=users_session_duration,json=usersSessionDuration,proto3" json:"users_session_duration,omitempty"`
	OidcConfig           string                       `protobuf:"bytes,12,opt,name=oidc_config,json=oidcConfig,proto3" json:"oidc_config,omitempty"`
	DexConfig            string                       `protobuf:"bytes,13,opt,name=dex_config,json=dexConfig,proto3" json:"dex_config,omitempty"`
	WebTerminal          *ArgoCDWebTerminalConfig     `protobuf:"bytes,14,opt,name=web_terminal,json=webTerminal,proto3" json:"web_terminal,omitempty"`
	DeepLinks            *ArgoCDDeepLinks             `protobuf:"bytes,15,opt,name=deep_links,json=deepLinks,proto3" json:"deep_links,omitempty"`
	LogsRbacEnabled      *bool                        `protobuf:"varint,16,opt,name=logs_rbac_enabled,json=logsRbacEnabled,proto3,oneof" json:"logs_rbac_enabled,omitempty"`
}

func (x *ArgoCDConfigMap) Reset() {
	*x = ArgoCDConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDConfigMap) ProtoMessage() {}

func (x *ArgoCDConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDConfigMap.ProtoReflect.Descriptor instead.
func (*ArgoCDConfigMap) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{92}
}

func (x *ArgoCDConfigMap) GetAdminEnabled() bool {
	if x != nil && x.AdminEnabled != nil {
		return *x.AdminEnabled
	}
	return false
}

func (x *ArgoCDConfigMap) GetStatusBadge() *ArgoCDStatusBadgeConfig {
	if x != nil {
		return x.StatusBadge
	}
	return nil
}

func (x *ArgoCDConfigMap) GetGoogleAnalytics() *ArgoCDGoogleAnalyticsConfig {
	if x != nil {
		return x.GoogleAnalytics
	}
	return nil
}

func (x *ArgoCDConfigMap) GetAllowAnonymousUser() bool {
	if x != nil && x.AllowAnonymousUser != nil {
		return *x.AllowAnonymousUser
	}
	return false
}

func (x *ArgoCDConfigMap) GetBanner() *ArgoCDBannerConfig {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *ArgoCDConfigMap) GetChat() *ArgoCDAlertConfig {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ArgoCDConfigMap) GetInstanceLabelKey() string {
	if x != nil {
		return x.InstanceLabelKey
	}
	return ""
}

func (x *ArgoCDConfigMap) GetKustomizeSettings() *ArgoCDKustomizeSettings {
	if x != nil {
		return x.KustomizeSettings
	}
	return nil
}

func (x *ArgoCDConfigMap) GetHelmSettings() *ArgoCDHelmSettings {
	if x != nil {
		return x.HelmSettings
	}
	return nil
}

func (x *ArgoCDConfigMap) GetResourceSettings() *ArgoCDResourceSettings {
	if x != nil {
		return x.ResourceSettings
	}
	return nil
}

func (x *ArgoCDConfigMap) GetUsersSessionDuration() string {
	if x != nil {
		return x.UsersSessionDuration
	}
	return ""
}

func (x *ArgoCDConfigMap) GetOidcConfig() string {
	if x != nil {
		return x.OidcConfig
	}
	return ""
}

func (x *ArgoCDConfigMap) GetDexConfig() string {
	if x != nil {
		return x.DexConfig
	}
	return ""
}

func (x *ArgoCDConfigMap) GetWebTerminal() *ArgoCDWebTerminalConfig {
	if x != nil {
		return x.WebTerminal
	}
	return nil
}

func (x *ArgoCDConfigMap) GetDeepLinks() *ArgoCDDeepLinks {
	if x != nil {
		return x.DeepLinks
	}
	return nil
}

func (x *ArgoCDConfigMap) GetLogsRbacEnabled() bool {
	if x != nil && x.LogsRbacEnabled != nil {
		return *x.LogsRbacEnabled
	}
	return false
}

type DeepLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url         string  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IconClass   *string `protobuf:"bytes,4,opt,name=icon_class,json=iconClass,proto3,oneof" json:"icon_class,omitempty"`
	If          *string `protobuf:"bytes,5,opt,name=if,proto3,oneof" json:"if,omitempty"`
}

func (x *DeepLink) Reset() {
	*x = DeepLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLink) ProtoMessage() {}

func (x *DeepLink) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLink.ProtoReflect.Descriptor instead.
func (*DeepLink) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{93}
}

func (x *DeepLink) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DeepLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DeepLink) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DeepLink) GetIconClass() string {
	if x != nil && x.IconClass != nil {
		return *x.IconClass
	}
	return ""
}

func (x *DeepLink) GetIf() string {
	if x != nil && x.If != nil {
		return *x.If
	}
	return ""
}

type ArgoCDDeepLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectLinks     []*DeepLink `protobuf:"bytes,1,rep,name=project_links,json=projectLinks,proto3" json:"project_links,omitempty"`
	ApplicationLinks []*DeepLink `protobuf:"bytes,2,rep,name=application_links,json=applicationLinks,proto3" json:"application_links,omitempty"`
	ResourceLinks    []*DeepLink `protobuf:"bytes,3,rep,name=resource_links,json=resourceLinks,proto3" json:"resource_links,omitempty"`
}

func (x *ArgoCDDeepLinks) Reset() {
	*x = ArgoCDDeepLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDDeepLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDDeepLinks) ProtoMessage() {}

func (x *ArgoCDDeepLinks) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDDeepLinks.ProtoReflect.Descriptor instead.
func (*ArgoCDDeepLinks) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{94}
}

func (x *ArgoCDDeepLinks) GetProjectLinks() []*DeepLink {
	if x != nil {
		return x.ProjectLinks
	}
	return nil
}

func (x *ArgoCDDeepLinks) GetApplicationLinks() []*DeepLink {
	if x != nil {
		return x.ApplicationLinks
	}
	return nil
}

func (x *ArgoCDDeepLinks) GetResourceLinks() []*DeepLink {
	if x != nil {
		return x.ResourceLinks
	}
	return nil
}

type ArgoCDAlertConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ArgoCDAlertConfig) Reset() {
	*x = ArgoCDAlertConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDAlertConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDAlertConfig) ProtoMessage() {}

func (x *ArgoCDAlertConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDAlertConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDAlertConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{95}
}

func (x *ArgoCDAlertConfig) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ArgoCDAlertConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ArgoCDBannerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Permanent *bool  `protobuf:"varint,3,opt,name=permanent,proto3,oneof" json:"permanent,omitempty"`
}

func (x *ArgoCDBannerConfig) Reset() {
	*x = ArgoCDBannerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDBannerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDBannerConfig) ProtoMessage() {}

func (x *ArgoCDBannerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDBannerConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDBannerConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{96}
}

func (x *ArgoCDBannerConfig) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ArgoCDBannerConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ArgoCDBannerConfig) GetPermanent() bool {
	if x != nil && x.Permanent != nil {
		return *x.Permanent
	}
	return false
}

type ArgoCDExtensionInstallEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ArgoCDExtensionInstallEntry) Reset() {
	*x = ArgoCDExtensionInstallEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDExtensionInstallEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDExtensionInstallEntry) ProtoMessage() {}

func (x *ArgoCDExtensionInstallEntry) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDExtensionInstallEntry.ProtoReflect.Descriptor instead.
func (*ArgoCDExtensionInstallEntry) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{97}
}

func (x *ArgoCDExtensionInstallEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArgoCDExtensionInstallEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ArgoCDGoogleAnalyticsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId     string `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	AnonymizeUsers *bool  `protobuf:"varint,2,opt,name=anonymize_users,json=anonymizeUsers,proto3,oneof" json:"anonymize_users,omitempty"`
}

func (x *ArgoCDGoogleAnalyticsConfig) Reset() {
	*x = ArgoCDGoogleAnalyticsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDGoogleAnalyticsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDGoogleAnalyticsConfig) ProtoMessage() {}

func (x *ArgoCDGoogleAnalyticsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDGoogleAnalyticsConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDGoogleAnalyticsConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{98}
}

func (x *ArgoCDGoogleAnalyticsConfig) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *ArgoCDGoogleAnalyticsConfig) GetAnonymizeUsers() bool {
	if x != nil && x.AnonymizeUsers != nil {
		return *x.AnonymizeUsers
	}
	return false
}

type ArgoCDHelmSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          *bool  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ValueFileSchemas string `protobuf:"bytes,2,opt,name=value_file_schemas,json=valueFileSchemas,proto3" json:"value_file_schemas,omitempty"`
}

func (x *ArgoCDHelmSettings) Reset() {
	*x = ArgoCDHelmSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDHelmSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDHelmSettings) ProtoMessage() {}

func (x *ArgoCDHelmSettings) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDHelmSettings.ProtoReflect.Descriptor instead.
func (*ArgoCDHelmSettings) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{99}
}

func (x *ArgoCDHelmSettings) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ArgoCDHelmSettings) GetValueFileSchemas() string {
	if x != nil {
		return x.ValueFileSchemas
	}
	return ""
}

type ArgoCDKustomizeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      *bool  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	BuildOptions string `protobuf:"bytes,2,opt,name=build_options,json=buildOptions,proto3" json:"build_options,omitempty"`
}

func (x *ArgoCDKustomizeSettings) Reset() {
	*x = ArgoCDKustomizeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDKustomizeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDKustomizeSettings) ProtoMessage() {}

func (x *ArgoCDKustomizeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDKustomizeSettings.ProtoReflect.Descriptor instead.
func (*ArgoCDKustomizeSettings) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{100}
}

func (x *ArgoCDKustomizeSettings) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ArgoCDKustomizeSettings) GetBuildOptions() string {
	if x != nil {
		return x.BuildOptions
	}
	return ""
}

type ArgoCDStatusBadgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ArgoCDStatusBadgeConfig) Reset() {
	*x = ArgoCDStatusBadgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDStatusBadgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDStatusBadgeConfig) ProtoMessage() {}

func (x *ArgoCDStatusBadgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDStatusBadgeConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDStatusBadgeConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{101}
}

func (x *ArgoCDStatusBadgeConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ArgoCDStatusBadgeConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ArgoCDRBACConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultPolicy   string           `protobuf:"bytes,1,opt,name=default_policy,json=defaultPolicy,proto3" json:"default_policy,omitempty"`
	PolicyCsv       string           `protobuf:"bytes,2,opt,name=policy_csv,json=policyCsv,proto3" json:"policy_csv,omitempty"`
	Scopes          []string         `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	OverlayPolicies []*OverlayPolicy `protobuf:"bytes,4,rep,name=overlay_policies,json=overlayPolicies,proto3" json:"overlay_policies,omitempty"`
}

func (x *ArgoCDRBACConfigMap) Reset() {
	*x = ArgoCDRBACConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDRBACConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDRBACConfigMap) ProtoMessage() {}

func (x *ArgoCDRBACConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDRBACConfigMap.ProtoReflect.Descriptor instead.
func (*ArgoCDRBACConfigMap) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{102}
}

func (x *ArgoCDRBACConfigMap) GetDefaultPolicy() string {
	if x != nil {
		return x.DefaultPolicy
	}
	return ""
}

func (x *ArgoCDRBACConfigMap) GetPolicyCsv() string {
	if x != nil {
		return x.PolicyCsv
	}
	return ""
}

func (x *ArgoCDRBACConfigMap) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ArgoCDRBACConfigMap) GetOverlayPolicies() []*OverlayPolicy {
	if x != nil {
		return x.OverlayPolicies
	}
	return nil
}

type OverlayPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Policy string `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *OverlayPolicy) Reset() {
	*x = OverlayPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayPolicy) ProtoMessage() {}

func (x *OverlayPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayPolicy.ProtoReflect.Descriptor instead.
func (*OverlayPolicy) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{103}
}

func (x *OverlayPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverlayPolicy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

type ArgoCDResourceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inclusions     string `protobuf:"bytes,1,opt,name=inclusions,proto3" json:"inclusions,omitempty"`
	Exclusions     string `protobuf:"bytes,2,opt,name=exclusions,proto3" json:"exclusions,omitempty"`
	CompareOptions string `protobuf:"bytes,3,opt,name=compare_options,json=compareOptions,proto3" json:"compare_options,omitempty"`
}

func (x *ArgoCDResourceSettings) Reset() {
	*x = ArgoCDResourceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDResourceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDResourceSettings) ProtoMessage() {}

func (x *ArgoCDResourceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDResourceSettings.ProtoReflect.Descriptor instead.
func (*ArgoCDResourceSettings) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{104}
}

func (x *ArgoCDResourceSettings) GetInclusions() string {
	if x != nil {
		return x.Inclusions
	}
	return ""
}

func (x *ArgoCDResourceSettings) GetExclusions() string {
	if x != nil {
		return x.Exclusions
	}
	return ""
}

func (x *ArgoCDResourceSettings) GetCompareOptions() string {
	if x != nil {
		return x.CompareOptions
	}
	return ""
}

type ArgoCDWebTerminalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Shells  string `protobuf:"bytes,2,opt,name=shells,proto3" json:"shells,omitempty"`
}

func (x *ArgoCDWebTerminalConfig) Reset() {
	*x = ArgoCDWebTerminalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDWebTerminalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDWebTerminalConfig) ProtoMessage() {}

func (x *ArgoCDWebTerminalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDWebTerminalConfig.ProtoReflect.Descriptor instead.
func (*ArgoCDWebTerminalConfig) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{105}
}

func (x *ArgoCDWebTerminalConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ArgoCDWebTerminalConfig) GetShells() string {
	if x != nil {
		return x.Shells
	}
	return ""
}

type ClusterCustomization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoUpgradeDisabled bool             `protobuf:"varint,1,opt,name=auto_upgrade_disabled,json=autoUpgradeDisabled,proto3" json:"auto_upgrade_disabled,omitempty"`
	Kustomization       *structpb.Struct `protobuf:"bytes,2,opt,name=kustomization,proto3" json:"kustomization,omitempty"`
	AppReplication      bool             `protobuf:"varint,3,opt,name=app_replication,json=appReplication,proto3" json:"app_replication,omitempty"`
	RedisTunneling      bool             `protobuf:"varint,4,opt,name=redis_tunneling,json=redisTunneling,proto3" json:"redis_tunneling,omitempty"`
}

func (x *ClusterCustomization) Reset() {
	*x = ClusterCustomization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCustomization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCustomization) ProtoMessage() {}

func (x *ClusterCustomization) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCustomization.ProtoReflect.Descriptor instead.
func (*ClusterCustomization) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{106}
}

func (x *ClusterCustomization) GetAutoUpgradeDisabled() bool {
	if x != nil {
		return x.AutoUpgradeDisabled
	}
	return false
}

func (x *ClusterCustomization) GetKustomization() *structpb.Struct {
	if x != nil {
		return x.Kustomization
	}
	return nil
}

func (x *ClusterCustomization) GetAppReplication() bool {
	if x != nil {
		return x.AppReplication
	}
	return false
}

func (x *ClusterCustomization) GetRedisTunneling() bool {
	if x != nil {
		return x.RedisTunneling
	}
	return false
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Hostname               string                 `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ClusterCount           uint32                 `protobuf:"varint,4,opt,name=cluster_count,json=clusterCount,proto3" json:"cluster_count,omitempty"`
	Secrets                map[string]string      `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Generation             uint32                 `protobuf:"varint,6,opt,name=generation,proto3" json:"generation,omitempty"`
	RecentProcessedEventId uint32                 `protobuf:"varint,7,opt,name=recent_processed_event_id,json=recentProcessedEventId,proto3" json:"recent_processed_event_id,omitempty"`
	HealthStatus           *v12.Status            `protobuf:"bytes,8,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	ReconciliationStatus   *v14.Status            `protobuf:"bytes,9,opt,name=reconciliation_status,json=reconciliationStatus,proto3" json:"reconciliation_status,omitempty"`
	DeleteTime             *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`
	OwnerOrganizationName  string                 `protobuf:"bytes,11,opt,name=owner_organization_name,json=ownerOrganizationName,proto3" json:"owner_organization_name,omitempty"`
	Description            string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Version                string                 `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	Spec                   *InstanceSpec          `protobuf:"bytes,14,opt,name=spec,proto3" json:"spec,omitempty"`
	Config                 *ArgoCDConfigMap       `protobuf:"bytes,15,opt,name=config,proto3,oneof" json:"config,omitempty"`
	RbacConfig             *ArgoCDRBACConfigMap   `protobuf:"bytes,16,opt,name=rbac_config,json=rbacConfig,proto3,oneof" json:"rbac_config,omitempty"`
	Info                   *InstanceInfo          `protobuf:"bytes,17,opt,name=info,proto3" json:"info,omitempty"`
	Shard                  string                 `protobuf:"bytes,18,opt,name=shard,proto3" json:"shard,omitempty"`
	WorkspaceId            string                 `protobuf:"bytes,19,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{107}
}

func (x *Instance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instance) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Instance) GetClusterCount() uint32 {
	if x != nil {
		return x.ClusterCount
	}
	return 0
}

func (x *Instance) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Instance) GetGeneration() uint32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Instance) GetRecentProcessedEventId() uint32 {
	if x != nil {
		return x.RecentProcessedEventId
	}
	return 0
}

func (x *Instance) GetHealthStatus() *v12.Status {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *Instance) GetReconciliationStatus() *v14.Status {
	if x != nil {
		return x.ReconciliationStatus
	}
	return nil
}

func (x *Instance) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Instance) GetOwnerOrganizationName() string {
	if x != nil {
		return x.OwnerOrganizationName
	}
	return ""
}

func (x *Instance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Instance) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Instance) GetSpec() *InstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Instance) GetConfig() *ArgoCDConfigMap {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Instance) GetRbacConfig() *ArgoCDRBACConfigMap {
	if x != nil {
		return x.RbacConfig
	}
	return nil
}

func (x *Instance) GetInfo() *InstanceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Instance) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *Instance) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type InstanceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Capabilities *InstanceAccountCapabilities `protobuf:"bytes,2,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	Disabled     bool                         `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *InstanceAccount) Reset() {
	*x = InstanceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAccount) ProtoMessage() {}

func (x *InstanceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAccount.ProtoReflect.Descriptor instead.
func (*InstanceAccount) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{108}
}

func (x *InstanceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceAccount) GetCapabilities() *InstanceAccountCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *InstanceAccount) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationsStatus *ApplicationsStatus `protobuf:"bytes,1,opt,name=applications_status,json=applicationsStatus,proto3" json:"applications_status,omitempty"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{109}
}

func (x *InstanceInfo) GetApplicationsStatus() *ApplicationsStatus {
	if x != nil {
		return x.ApplicationsStatus
	}
	return nil
}

type AppsetPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy         string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	OverridePolicy bool   `protobuf:"varint,2,opt,name=override_policy,json=overridePolicy,proto3" json:"override_policy,omitempty"`
}

func (x *AppsetPolicy) Reset() {
	*x = AppsetPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppsetPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppsetPolicy) ProtoMessage() {}

func (x *AppsetPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppsetPolicy.ProtoReflect.Descriptor instead.
func (*AppsetPolicy) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{110}
}

func (x *AppsetPolicy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *AppsetPolicy) GetOverridePolicy() bool {
	if x != nil {
		return x.OverridePolicy
	}
	return false
}

type AgentPermissionsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiGroups []string `protobuf:"bytes,1,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
	Resources []string `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	Verbs     []string `protobuf:"bytes,3,rep,name=verbs,proto3" json:"verbs,omitempty"`
}

func (x *AgentPermissionsRule) Reset() {
	*x = AgentPermissionsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentPermissionsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPermissionsRule) ProtoMessage() {}

func (x *AgentPermissionsRule) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPermissionsRule.ProtoReflect.Descriptor instead.
func (*AgentPermissionsRule) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{111}
}

func (x *AgentPermissionsRule) GetApiGroups() []string {
	if x != nil {
		return x.ApiGroups
	}
	return nil
}

func (x *AgentPermissionsRule) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *AgentPermissionsRule) GetVerbs() []string {
	if x != nil {
		return x.Verbs
	}
	return nil
}

type CrossplaneExtensionResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// supports glob pattern - argocd uses [minimatch](https://www.npmjs.com/package/minimatch) package to match group
	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *CrossplaneExtensionResource) Reset() {
	*x = CrossplaneExtensionResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossplaneExtensionResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossplaneExtensionResource) ProtoMessage() {}

func (x *CrossplaneExtensionResource) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossplaneExtensionResource.ProtoReflect.Descriptor instead.
func (*CrossplaneExtensionResource) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{112}
}

func (x *CrossplaneExtensionResource) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type CrossplaneExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*CrossplaneExtensionResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *CrossplaneExtension) Reset() {
	*x = CrossplaneExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossplaneExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossplaneExtension) ProtoMessage() {}

func (x *CrossplaneExtension) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossplaneExtension.ProtoReflect.Descriptor instead.
func (*CrossplaneExtension) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{113}
}

func (x *CrossplaneExtension) GetResources() []*CrossplaneExtensionResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type InstanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAllowList                  []*IPAllowListEntry            `protobuf:"bytes,1,rep,name=ip_allow_list,json=ipAllowList,proto3" json:"ip_allow_list,omitempty"`
	Subdomain                    string                         `protobuf:"bytes,2,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	DeclarativeManagementEnabled bool                           `protobuf:"varint,3,opt,name=declarative_management_enabled,json=declarativeManagementEnabled,proto3" json:"declarative_management_enabled,omitempty"`
	Extensions                   []*ArgoCDExtensionInstallEntry `protobuf:"bytes,4,rep,name=extensions,proto3" json:"extensions,omitempty"`
	ClusterCustomizationDefaults *ClusterCustomization          `protobuf:"bytes,5,opt,name=cluster_customization_defaults,json=clusterCustomizationDefaults,proto3" json:"cluster_customization_defaults,omitempty"`
	ImageUpdaterEnabled          bool                           `protobuf:"varint,6,opt,name=image_updater_enabled,json=imageUpdaterEnabled,proto3" json:"image_updater_enabled,omitempty"`
	BackendIpAllowListEnabled    bool                           `protobuf:"varint,7,opt,name=backend_ip_allow_list_enabled,json=backendIpAllowListEnabled,proto3" json:"backend_ip_allow_list_enabled,omitempty"`
	RepoServerDelegate           *RepoServerDelegate            `protobuf:"bytes,8,opt,name=repo_server_delegate,json=repoServerDelegate,proto3" json:"repo_server_delegate,omitempty"`
	AuditExtensionEnabled        bool                           `protobuf:"varint,9,opt,name=audit_extension_enabled,json=auditExtensionEnabled,proto3" json:"audit_extension_enabled,omitempty"`
	SyncHistoryExtensionEnabled  bool                           `protobuf:"varint,11,opt,name=sync_history_extension_enabled,json=syncHistoryExtensionEnabled,proto3" json:"sync_history_extension_enabled,omitempty"`
	CrossplaneExtension          *CrossplaneExtension           `protobuf:"bytes,12,opt,name=crossplane_extension,json=crossplaneExtension,proto3,oneof" json:"crossplane_extension,omitempty"`
	ImageUpdaterDelegate         *ImageUpdaterDelegate          `protobuf:"bytes,13,opt,name=image_updater_delegate,json=imageUpdaterDelegate,proto3" json:"image_updater_delegate,omitempty"`
	AppSetDelegate               *AppSetDelegate                `protobuf:"bytes,14,opt,name=app_set_delegate,json=appSetDelegate,proto3" json:"app_set_delegate,omitempty"`
	AssistantExtensionEnabled    bool                           `protobuf:"varint,15,opt,name=assistant_extension_enabled,json=assistantExtensionEnabled,proto3" json:"assistant_extension_enabled,omitempty"`
	AppsetPolicy                 *AppsetPolicy                  `protobuf:"bytes,16,opt,name=appset_policy,json=appsetPolicy,proto3" json:"appset_policy,omitempty"`
	HostAliases                  []*HostAliases                 `protobuf:"bytes,17,rep,name=host_aliases,json=hostAliases,proto3" json:"host_aliases,omitempty"`
	AgentPermissionsRules        []*AgentPermissionsRule        `protobuf:"bytes,18,rep,name=agent_permissions_rules,json=agentPermissionsRules,proto3" json:"agent_permissions_rules,omitempty"`
	Fqdn                         string                         `protobuf:"bytes,19,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
}

func (x *InstanceSpec) Reset() {
	*x = InstanceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSpec) ProtoMessage() {}

func (x *InstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSpec.ProtoReflect.Descriptor instead.
func (*InstanceSpec) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{114}
}

func (x *InstanceSpec) GetIpAllowList() []*IPAllowListEntry {
	if x != nil {
		return x.IpAllowList
	}
	return nil
}

func (x *InstanceSpec) GetSubdomain() string {
	if x != nil {
		return x.Subdomain
	}
	return ""
}

func (x *InstanceSpec) GetDeclarativeManagementEnabled() bool {
	if x != nil {
		return x.DeclarativeManagementEnabled
	}
	return false
}

func (x *InstanceSpec) GetExtensions() []*ArgoCDExtensionInstallEntry {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *InstanceSpec) GetClusterCustomizationDefaults() *ClusterCustomization {
	if x != nil {
		return x.ClusterCustomizationDefaults
	}
	return nil
}

func (x *InstanceSpec) GetImageUpdaterEnabled() bool {
	if x != nil {
		return x.ImageUpdaterEnabled
	}
	return false
}

func (x *InstanceSpec) GetBackendIpAllowListEnabled() bool {
	if x != nil {
		return x.BackendIpAllowListEnabled
	}
	return false
}

func (x *InstanceSpec) GetRepoServerDelegate() *RepoServerDelegate {
	if x != nil {
		return x.RepoServerDelegate
	}
	return nil
}

func (x *InstanceSpec) GetAuditExtensionEnabled() bool {
	if x != nil {
		return x.AuditExtensionEnabled
	}
	return false
}

func (x *InstanceSpec) GetSyncHistoryExtensionEnabled() bool {
	if x != nil {
		return x.SyncHistoryExtensionEnabled
	}
	return false
}

func (x *InstanceSpec) GetCrossplaneExtension() *CrossplaneExtension {
	if x != nil {
		return x.CrossplaneExtension
	}
	return nil
}

func (x *InstanceSpec) GetImageUpdaterDelegate() *ImageUpdaterDelegate {
	if x != nil {
		return x.ImageUpdaterDelegate
	}
	return nil
}

func (x *InstanceSpec) GetAppSetDelegate() *AppSetDelegate {
	if x != nil {
		return x.AppSetDelegate
	}
	return nil
}

func (x *InstanceSpec) GetAssistantExtensionEnabled() bool {
	if x != nil {
		return x.AssistantExtensionEnabled
	}
	return false
}

func (x *InstanceSpec) GetAppsetPolicy() *AppsetPolicy {
	if x != nil {
		return x.AppsetPolicy
	}
	return nil
}

func (x *InstanceSpec) GetHostAliases() []*HostAliases {
	if x != nil {
		return x.HostAliases
	}
	return nil
}

func (x *InstanceSpec) GetAgentPermissionsRules() []*AgentPermissionsRule {
	if x != nil {
		return x.AgentPermissionsRules
	}
	return nil
}

func (x *InstanceSpec) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

type ManagedCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *ManagedCluster) Reset() {
	*x = ManagedCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedCluster) ProtoMessage() {}

func (x *ManagedCluster) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedCluster.ProtoReflect.Descriptor instead.
func (*ManagedCluster) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{115}
}

func (x *ManagedCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type RepoServerDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPlane   bool            `protobuf:"varint,1,opt,name=control_plane,json=controlPlane,proto3" json:"control_plane,omitempty"`
	ManagedCluster *ManagedCluster `protobuf:"bytes,2,opt,name=managed_cluster,json=managedCluster,proto3" json:"managed_cluster,omitempty"`
}

func (x *RepoServerDelegate) Reset() {
	*x = RepoServerDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoServerDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoServerDelegate) ProtoMessage() {}

func (x *RepoServerDelegate) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoServerDelegate.ProtoReflect.Descriptor instead.
func (*RepoServerDelegate) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{116}
}

func (x *RepoServerDelegate) GetControlPlane() bool {
	if x != nil {
		return x.ControlPlane
	}
	return false
}

func (x *RepoServerDelegate) GetManagedCluster() *ManagedCluster {
	if x != nil {
		return x.ManagedCluster
	}
	return nil
}

type ImageUpdaterDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPlane   bool            `protobuf:"varint,1,opt,name=control_plane,json=controlPlane,proto3" json:"control_plane,omitempty"`
	ManagedCluster *ManagedCluster `protobuf:"bytes,2,opt,name=managed_cluster,json=managedCluster,proto3" json:"managed_cluster,omitempty"`
}

func (x *ImageUpdaterDelegate) Reset() {
	*x = ImageUpdaterDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageUpdaterDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageUpdaterDelegate) ProtoMessage() {}

func (x *ImageUpdaterDelegate) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageUpdaterDelegate.ProtoReflect.Descriptor instead.
func (*ImageUpdaterDelegate) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{117}
}

func (x *ImageUpdaterDelegate) GetControlPlane() bool {
	if x != nil {
		return x.ControlPlane
	}
	return false
}

func (x *ImageUpdaterDelegate) GetManagedCluster() *ManagedCluster {
	if x != nil {
		return x.ManagedCluster
	}
	return nil
}

type AppSetDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedCluster *ManagedCluster `protobuf:"bytes,1,opt,name=managed_cluster,json=managedCluster,proto3" json:"managed_cluster,omitempty"`
}

func (x *AppSetDelegate) Reset() {
	*x = AppSetDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSetDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSetDelegate) ProtoMessage() {}

func (x *AppSetDelegate) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSetDelegate.ProtoReflect.Descriptor instead.
func (*AppSetDelegate) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{118}
}

func (x *AppSetDelegate) GetManagedCluster() *ManagedCluster {
	if x != nil {
		return x.ManagedCluster
	}
	return nil
}

type InstanceAccountCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login  bool `protobuf:"varint,1,opt,name=login,proto3" json:"login,omitempty"`
	ApiKey bool `protobuf:"varint,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *InstanceAccountCapabilities) Reset() {
	*x = InstanceAccountCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAccountCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAccountCapabilities) ProtoMessage() {}

func (x *InstanceAccountCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAccountCapabilities.ProtoReflect.Descriptor instead.
func (*InstanceAccountCapabilities) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{119}
}

func (x *InstanceAccountCapabilities) GetLogin() bool {
	if x != nil {
		return x.Login
	}
	return false
}

func (x *InstanceAccountCapabilities) GetApiKey() bool {
	if x != nil {
		return x.ApiKey
	}
	return false
}

type InstanceVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *InstanceVersion) Reset() {
	*x = InstanceVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceVersion) ProtoMessage() {}

func (x *InstanceVersion) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceVersion.ProtoReflect.Descriptor instead.
func (*InstanceVersion) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{120}
}

func (x *InstanceVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstanceVersion) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type IPAllowListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip          string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *IPAllowListEntry) Reset() {
	*x = IPAllowListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAllowListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAllowListEntry) ProtoMessage() {}

func (x *IPAllowListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAllowListEntry.ProtoReflect.Descriptor instead.
func (*IPAllowListEntry) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{121}
}

func (x *IPAllowListEntry) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPAllowListEntry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type HostAliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip        string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Hostnames []string `protobuf:"bytes,2,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
}

func (x *HostAliases) Reset() {
	*x = HostAliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostAliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostAliases) ProtoMessage() {}

func (x *HostAliases) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostAliases.ProtoReflect.Descriptor instead.
func (*HostAliases) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{122}
}

func (x *HostAliases) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostAliases) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

type AgentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                   string                             `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ArgoCdVersion             string                             `protobuf:"bytes,2,opt,name=argo_cd_version,json=argoCdVersion,proto3" json:"argo_cd_version,omitempty"`
	ObserveTime               *timestamppb.Timestamp             `protobuf:"bytes,3,opt,name=observe_time,json=observeTime,proto3,oneof" json:"observe_time,omitempty"`
	Status                    *v12.AgentAggregatedHealthResponse `protobuf:"bytes,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	AgentIds                  []string                           `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	LastUserAppliedGeneration uint64                             `protobuf:"varint,6,opt,name=last_user_applied_generation,json=lastUserAppliedGeneration,proto3" json:"last_user_applied_generation,omitempty"`
}

func (x *AgentState) Reset() {
	*x = AgentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentState) ProtoMessage() {}

func (x *AgentState) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentState.ProtoReflect.Descriptor instead.
func (*AgentState) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{123}
}

func (x *AgentState) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentState) GetArgoCdVersion() string {
	if x != nil {
		return x.ArgoCdVersion
	}
	return ""
}

func (x *AgentState) GetObserveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ObserveTime
	}
	return nil
}

func (x *AgentState) GetStatus() *v12.AgentAggregatedHealthResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AgentState) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *AgentState) GetLastUserAppliedGeneration() uint64 {
	if x != nil {
		return x.LastUserAppliedGeneration
	}
	return 0
}

type DirectClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterType     DirectClusterType `protobuf:"varint,1,opt,name=cluster_type,json=clusterType,proto3,enum=akuity.argocd.v1.DirectClusterType" json:"cluster_type,omitempty"`
	KargoInstanceId *string           `protobuf:"bytes,2,opt,name=kargo_instance_id,json=kargoInstanceId,proto3,oneof" json:"kargo_instance_id,omitempty"`
	Server          *string           `protobuf:"bytes,3,opt,name=server,proto3,oneof" json:"server,omitempty"`
	Token           *string           `protobuf:"bytes,4,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (x *DirectClusterSpec) Reset() {
	*x = DirectClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectClusterSpec) ProtoMessage() {}

func (x *DirectClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectClusterSpec.ProtoReflect.Descriptor instead.
func (*DirectClusterSpec) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{124}
}

func (x *DirectClusterSpec) GetClusterType() DirectClusterType {
	if x != nil {
		return x.ClusterType
	}
	return DirectClusterType_DIRECT_CLUSTER_TYPE_UPBOUND
}

func (x *DirectClusterSpec) GetKargoInstanceId() string {
	if x != nil && x.KargoInstanceId != nil {
		return *x.KargoInstanceId
	}
	return ""
}

func (x *DirectClusterSpec) GetServer() string {
	if x != nil && x.Server != nil {
		return *x.Server
	}
	return ""
}

func (x *DirectClusterSpec) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type ClusterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size                      ClusterSize        `protobuf:"varint,1,opt,name=size,proto3,enum=akuity.argocd.v1.ClusterSize" json:"size,omitempty"`
	Labels                    map[string]string  `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations               map[string]string  `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AutoUpgradeDisabled       *bool              `protobuf:"varint,4,opt,name=auto_upgrade_disabled,json=autoUpgradeDisabled,proto3,oneof" json:"auto_upgrade_disabled,omitempty"`
	Kustomization             *structpb.Struct   `protobuf:"bytes,5,opt,name=kustomization,proto3" json:"kustomization,omitempty"`
	AppReplication            *bool              `protobuf:"varint,6,opt,name=app_replication,json=appReplication,proto3,oneof" json:"app_replication,omitempty"`
	TargetVersion             string             `protobuf:"bytes,7,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
	RedisTunneling            *bool              `protobuf:"varint,8,opt,name=redis_tunneling,json=redisTunneling,proto3,oneof" json:"redis_tunneling,omitempty"`
	DirectClusterSpec         *DirectClusterSpec `protobuf:"bytes,9,opt,name=direct_cluster_spec,json=directClusterSpec,proto3,oneof" json:"direct_cluster_spec,omitempty"`
	DatadogAnnotationsEnabled *bool              `protobuf:"varint,10,opt,name=datadog_annotations_enabled,json=datadogAnnotationsEnabled,proto3,oneof" json:"datadog_annotations_enabled,omitempty"`
	Namespace                 string             `protobuf:"bytes,11,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceScoped           bool               `protobuf:"varint,12,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"`
	EksAddonEnabled           *bool              `protobuf:"varint,13,opt,name=eks_addon_enabled,json=eksAddonEnabled,proto3,oneof" json:"eks_addon_enabled,omitempty"`
}

func (x *ClusterData) Reset() {
	*x = ClusterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterData) ProtoMessage() {}

func (x *ClusterData) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterData.ProtoReflect.Descriptor instead.
func (*ClusterData) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{125}
}

func (x *ClusterData) GetSize() ClusterSize {
	if x != nil {
		return x.Size
	}
	return ClusterSize_CLUSTER_SIZE_UNSPECIFIED
}

func (x *ClusterData) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ClusterData) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ClusterData) GetAutoUpgradeDisabled() bool {
	if x != nil && x.AutoUpgradeDisabled != nil {
		return *x.AutoUpgradeDisabled
	}
	return false
}

func (x *ClusterData) GetKustomization() *structpb.Struct {
	if x != nil {
		return x.Kustomization
	}
	return nil
}

func (x *ClusterData) GetAppReplication() bool {
	if x != nil && x.AppReplication != nil {
		return *x.AppReplication
	}
	return false
}

func (x *ClusterData) GetTargetVersion() string {
	if x != nil {
		return x.TargetVersion
	}
	return ""
}

func (x *ClusterData) GetRedisTunneling() bool {
	if x != nil && x.RedisTunneling != nil {
		return *x.RedisTunneling
	}
	return false
}

func (x *ClusterData) GetDirectClusterSpec() *DirectClusterSpec {
	if x != nil {
		return x.DirectClusterSpec
	}
	return nil
}

func (x *ClusterData) GetDatadogAnnotationsEnabled() bool {
	if x != nil && x.DatadogAnnotationsEnabled != nil {
		return *x.DatadogAnnotationsEnabled
	}
	return false
}

func (x *ClusterData) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ClusterData) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *ClusterData) GetEksAddonEnabled() bool {
	if x != nil && x.EksAddonEnabled != nil {
		return *x.EksAddonEnabled
	}
	return false
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"` // Use data.namespace instead
	// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
	NamespaceScoped                   bool                   `protobuf:"varint,5,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"` // Use data.namespace_scoped instead
	Data                              *ClusterData           `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	DeleteTime                        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`
	ObservedGeneration                *uint64                `protobuf:"varint,8,opt,name=observed_generation,json=observedGeneration,proto3,oneof" json:"observed_generation,omitempty"`
	CredentialRotationAllowed         *bool                  `protobuf:"varint,9,opt,name=credential_rotation_allowed,json=credentialRotationAllowed,proto3,oneof" json:"credential_rotation_allowed,omitempty"`
	AgentState                        *AgentState            `protobuf:"bytes,10,opt,name=agent_state,json=agentState,proto3,oneof" json:"agent_state,omitempty"`
	HealthStatus                      *v12.Status            `protobuf:"bytes,11,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	ReconciliationStatus              *v14.Status            `protobuf:"bytes,12,opt,name=reconciliation_status,json=reconciliationStatus,proto3" json:"reconciliation_status,omitempty"`
	ReadonlySettingsChangedGeneration *uint64                `protobuf:"varint,13,opt,name=readonly_settings_changed_generation,json=readonlySettingsChangedGeneration,proto3,oneof" json:"readonly_settings_changed_generation,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{126}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *Cluster) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Deprecated: Marked as deprecated in argocd/v1/argocd.proto.
func (x *Cluster) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *Cluster) GetData() *ClusterData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Cluster) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Cluster) GetObservedGeneration() uint64 {
	if x != nil && x.ObservedGeneration != nil {
		return *x.ObservedGeneration
	}
	return 0
}

func (x *Cluster) GetCredentialRotationAllowed() bool {
	if x != nil && x.CredentialRotationAllowed != nil {
		return *x.CredentialRotationAllowed
	}
	return false
}

func (x *Cluster) GetAgentState() *AgentState {
	if x != nil {
		return x.AgentState
	}
	return nil
}

func (x *Cluster) GetHealthStatus() *v12.Status {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *Cluster) GetReconciliationStatus() *v14.Status {
	if x != nil {
		return x.ReconciliationStatus
	}
	return nil
}

func (x *Cluster) GetReadonlySettingsChangedGeneration() uint64 {
	if x != nil && x.ReadonlySettingsChangedGeneration != nil {
		return *x.ReadonlySettingsChangedGeneration
	}
	return 0
}

type ApplyInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId                string              `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	IdType                        v1.Type             `protobuf:"varint,2,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id                            string              `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Argocd                        *structpb.Struct    `protobuf:"bytes,4,opt,name=argocd,proto3" json:"argocd,omitempty"`
	ArgocdConfigmap               *structpb.Struct    `protobuf:"bytes,5,opt,name=argocd_configmap,json=argocdConfigmap,proto3" json:"argocd_configmap,omitempty"`
	ArgocdRbacConfigmap           *structpb.Struct    `protobuf:"bytes,6,opt,name=argocd_rbac_configmap,json=argocdRbacConfigmap,proto3" json:"argocd_rbac_configmap,omitempty"`
	ArgocdSecret                  *structpb.Struct    `protobuf:"bytes,7,opt,name=argocd_secret,json=argocdSecret,proto3" json:"argocd_secret,omitempty"`
	NotificationsConfigmap        *structpb.Struct    `protobuf:"bytes,8,opt,name=notifications_configmap,json=notificationsConfigmap,proto3" json:"notifications_configmap,omitempty"`
	NotificationsSecret           *structpb.Struct    `protobuf:"bytes,9,opt,name=notifications_secret,json=notificationsSecret,proto3" json:"notifications_secret,omitempty"`
	ImageUpdaterConfigmap         *structpb.Struct    `protobuf:"bytes,10,opt,name=image_updater_configmap,json=imageUpdaterConfigmap,proto3" json:"image_updater_configmap,omitempty"`
	ImageUpdaterSshConfigmap      *structpb.Struct    `protobuf:"bytes,11,opt,name=image_updater_ssh_configmap,json=imageUpdaterSshConfigmap,proto3" json:"image_updater_ssh_configmap,omitempty"`
	ImageUpdaterSecret            *structpb.Struct    `protobuf:"bytes,12,opt,name=image_updater_secret,json=imageUpdaterSecret,proto3" json:"image_updater_secret,omitempty"`
	Clusters                      []*structpb.Struct  `protobuf:"bytes,13,rep,name=clusters,proto3" json:"clusters,omitempty"`
	ArgocdKnownHostsConfigmap     *structpb.Struct    `protobuf:"bytes,15,opt,name=argocd_known_hosts_configmap,json=argocdKnownHostsConfigmap,proto3" json:"argocd_known_hosts_configmap,omitempty"`
	ArgocdTlsCertsConfigmap       *structpb.Struct    `protobuf:"bytes,16,opt,name=argocd_tls_certs_configmap,json=argocdTlsCertsConfigmap,proto3" json:"argocd_tls_certs_configmap,omitempty"`
	RepoCredentialSecrets         []*structpb.Struct  `protobuf:"bytes,17,rep,name=repo_credential_secrets,json=repoCredentialSecrets,proto3" json:"repo_credential_secrets,omitempty"`
	RepoTemplateCredentialSecrets []*structpb.Struct  `protobuf:"bytes,18,rep,name=repo_template_credential_secrets,json=repoTemplateCredentialSecrets,proto3" json:"repo_template_credential_secrets,omitempty"`
	ConfigManagementPlugins       []*structpb.Struct  `protobuf:"bytes,20,rep,name=config_management_plugins,json=configManagementPlugins,proto3" json:"config_management_plugins,omitempty"`
	PruneResourceTypes            []PruneResourceType `protobuf:"varint,21,rep,packed,name=prune_resource_types,json=pruneResourceTypes,proto3,enum=akuity.argocd.v1.PruneResourceType" json:"prune_resource_types,omitempty"`
	ApplicationSetSecret          *structpb.Struct    `protobuf:"bytes,22,opt,name=application_set_secret,json=applicationSetSecret,proto3" json:"application_set_secret,omitempty"`
	Applications                  []*structpb.Struct  `protobuf:"bytes,23,rep,name=applications,proto3" json:"applications,omitempty"`
	ApplicationSets               []*structpb.Struct  `protobuf:"bytes,24,rep,name=application_sets,json=applicationSets,proto3" json:"application_sets,omitempty"`
	AppProjects                   []*structpb.Struct  `protobuf:"bytes,25,rep,name=app_projects,json=appProjects,proto3" json:"app_projects,omitempty"`
}

func (x *ApplyInstanceRequest) Reset() {
	*x = ApplyInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyInstanceRequest) ProtoMessage() {}

func (x *ApplyInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyInstanceRequest.ProtoReflect.Descriptor instead.
func (*ApplyInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{127}
}

func (x *ApplyInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ApplyInstanceRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *ApplyInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplyInstanceRequest) GetArgocd() *structpb.Struct {
	if x != nil {
		return x.Argocd
	}
	return nil
}

func (x *ApplyInstanceRequest) GetArgocdConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetArgocdRbacConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdRbacConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetArgocdSecret() *structpb.Struct {
	if x != nil {
		return x.ArgocdSecret
	}
	return nil
}

func (x *ApplyInstanceRequest) GetNotificationsConfigmap() *structpb.Struct {
	if x != nil {
		return x.NotificationsConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetNotificationsSecret() *structpb.Struct {
	if x != nil {
		return x.NotificationsSecret
	}
	return nil
}

func (x *ApplyInstanceRequest) GetImageUpdaterConfigmap() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetImageUpdaterSshConfigmap() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterSshConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetImageUpdaterSecret() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterSecret
	}
	return nil
}

func (x *ApplyInstanceRequest) GetClusters() []*structpb.Struct {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ApplyInstanceRequest) GetArgocdKnownHostsConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdKnownHostsConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetArgocdTlsCertsConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdTlsCertsConfigmap
	}
	return nil
}

func (x *ApplyInstanceRequest) GetRepoCredentialSecrets() []*structpb.Struct {
	if x != nil {
		return x.RepoCredentialSecrets
	}
	return nil
}

func (x *ApplyInstanceRequest) GetRepoTemplateCredentialSecrets() []*structpb.Struct {
	if x != nil {
		return x.RepoTemplateCredentialSecrets
	}
	return nil
}

func (x *ApplyInstanceRequest) GetConfigManagementPlugins() []*structpb.Struct {
	if x != nil {
		return x.ConfigManagementPlugins
	}
	return nil
}

func (x *ApplyInstanceRequest) GetPruneResourceTypes() []PruneResourceType {
	if x != nil {
		return x.PruneResourceTypes
	}
	return nil
}

func (x *ApplyInstanceRequest) GetApplicationSetSecret() *structpb.Struct {
	if x != nil {
		return x.ApplicationSetSecret
	}
	return nil
}

func (x *ApplyInstanceRequest) GetApplications() []*structpb.Struct {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *ApplyInstanceRequest) GetApplicationSets() []*structpb.Struct {
	if x != nil {
		return x.ApplicationSets
	}
	return nil
}

func (x *ApplyInstanceRequest) GetAppProjects() []*structpb.Struct {
	if x != nil {
		return x.AppProjects
	}
	return nil
}

type ApplyInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplyInstanceResponse) Reset() {
	*x = ApplyInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyInstanceResponse) ProtoMessage() {}

func (x *ApplyInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyInstanceResponse.ProtoReflect.Descriptor instead.
func (*ApplyInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{128}
}

type ExportInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string  `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	IdType         v1.Type `protobuf:"varint,2,opt,name=id_type,json=idType,proto3,enum=akuity.types.id.v1.Type" json:"id_type,omitempty"`
	Id             string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExportInstanceRequest) Reset() {
	*x = ExportInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportInstanceRequest) ProtoMessage() {}

func (x *ExportInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportInstanceRequest.ProtoReflect.Descriptor instead.
func (*ExportInstanceRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{129}
}

func (x *ExportInstanceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ExportInstanceRequest) GetIdType() v1.Type {
	if x != nil {
		return x.IdType
	}
	return v1.Type(0)
}

func (x *ExportInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ExportInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Argocd                    *structpb.Struct   `protobuf:"bytes,1,opt,name=argocd,proto3" json:"argocd,omitempty"`
	ArgocdConfigmap           *structpb.Struct   `protobuf:"bytes,2,opt,name=argocd_configmap,json=argocdConfigmap,proto3" json:"argocd_configmap,omitempty"`
	ArgocdRbacConfigmap       *structpb.Struct   `protobuf:"bytes,3,opt,name=argocd_rbac_configmap,json=argocdRbacConfigmap,proto3" json:"argocd_rbac_configmap,omitempty"`
	NotificationsConfigmap    *structpb.Struct   `protobuf:"bytes,4,opt,name=notifications_configmap,json=notificationsConfigmap,proto3" json:"notifications_configmap,omitempty"`
	ImageUpdaterConfigmap     *structpb.Struct   `protobuf:"bytes,5,opt,name=image_updater_configmap,json=imageUpdaterConfigmap,proto3" json:"image_updater_configmap,omitempty"`
	ImageUpdaterSshConfigmap  *structpb.Struct   `protobuf:"bytes,6,opt,name=image_updater_ssh_configmap,json=imageUpdaterSshConfigmap,proto3" json:"image_updater_ssh_configmap,omitempty"`
	Clusters                  []*structpb.Struct `protobuf:"bytes,7,rep,name=clusters,proto3" json:"clusters,omitempty"`
	ArgocdKnownHostsConfigmap *structpb.Struct   `protobuf:"bytes,8,opt,name=argocd_known_hosts_configmap,json=argocdKnownHostsConfigmap,proto3" json:"argocd_known_hosts_configmap,omitempty"`
	ArgocdTlsCertsConfigmap   *structpb.Struct   `protobuf:"bytes,9,opt,name=argocd_tls_certs_configmap,json=argocdTlsCertsConfigmap,proto3" json:"argocd_tls_certs_configmap,omitempty"`
	ConfigManagementPlugins   []*structpb.Struct `protobuf:"bytes,10,rep,name=config_management_plugins,json=configManagementPlugins,proto3" json:"config_management_plugins,omitempty"`
	Applications              []*structpb.Struct `protobuf:"bytes,11,rep,name=applications,proto3" json:"applications,omitempty"`
	ApplicationSets           []*structpb.Struct `protobuf:"bytes,12,rep,name=application_sets,json=applicationSets,proto3" json:"application_sets,omitempty"`
	AppProjects               []*structpb.Struct `protobuf:"bytes,13,rep,name=app_projects,json=appProjects,proto3" json:"app_projects,omitempty"`
}

func (x *ExportInstanceResponse) Reset() {
	*x = ExportInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportInstanceResponse) ProtoMessage() {}

func (x *ExportInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportInstanceResponse.ProtoReflect.Descriptor instead.
func (*ExportInstanceResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{130}
}

func (x *ExportInstanceResponse) GetArgocd() *structpb.Struct {
	if x != nil {
		return x.Argocd
	}
	return nil
}

func (x *ExportInstanceResponse) GetArgocdConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetArgocdRbacConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdRbacConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetNotificationsConfigmap() *structpb.Struct {
	if x != nil {
		return x.NotificationsConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetImageUpdaterConfigmap() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetImageUpdaterSshConfigmap() *structpb.Struct {
	if x != nil {
		return x.ImageUpdaterSshConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetClusters() []*structpb.Struct {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ExportInstanceResponse) GetArgocdKnownHostsConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdKnownHostsConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetArgocdTlsCertsConfigmap() *structpb.Struct {
	if x != nil {
		return x.ArgocdTlsCertsConfigmap
	}
	return nil
}

func (x *ExportInstanceResponse) GetConfigManagementPlugins() []*structpb.Struct {
	if x != nil {
		return x.ConfigManagementPlugins
	}
	return nil
}

func (x *ExportInstanceResponse) GetApplications() []*structpb.Struct {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *ExportInstanceResponse) GetApplicationSets() []*structpb.Struct {
	if x != nil {
		return x.ApplicationSets
	}
	return nil
}

func (x *ExportInstanceResponse) GetAppProjects() []*structpb.Struct {
	if x != nil {
		return x.AppProjects
	}
	return nil
}

type GetInstanceClusterCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string             `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InstanceId     string             `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id             string             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	LocationOrigin string             `protobuf:"bytes,4,opt,name=location_origin,json=locationOrigin,proto3" json:"location_origin,omitempty"`
	Offline        bool               `protobuf:"varint,5,opt,name=offline,proto3" json:"offline,omitempty"`
	Type           string             `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	SkipNamespace  *bool              `protobuf:"varint,7,opt,name=skip_namespace,json=skipNamespace,proto3,oneof" json:"skip_namespace,omitempty"`
	CommandFor     *ClusterCommandFor `protobuf:"varint,8,opt,name=command_for,json=commandFor,proto3,enum=akuity.argocd.v1.ClusterCommandFor,oneof" json:"command_for,omitempty"`
}

func (x *GetInstanceClusterCommandRequest) Reset() {
	*x = GetInstanceClusterCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterCommandRequest) ProtoMessage() {}

func (x *GetInstanceClusterCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterCommandRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterCommandRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{131}
}

func (x *GetInstanceClusterCommandRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetLocationOrigin() string {
	if x != nil {
		return x.LocationOrigin
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

func (x *GetInstanceClusterCommandRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetInstanceClusterCommandRequest) GetSkipNamespace() bool {
	if x != nil && x.SkipNamespace != nil {
		return *x.SkipNamespace
	}
	return false
}

func (x *GetInstanceClusterCommandRequest) GetCommandFor() ClusterCommandFor {
	if x != nil && x.CommandFor != nil {
		return *x.CommandFor
	}
	return ClusterCommandFor_CLUSTER_COMMAND_FOR_UNSPECIFIED
}

type GetInstanceClusterCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// variables used for command
	Variables map[string]string `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceClusterCommandResponse) Reset() {
	*x = GetInstanceClusterCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceClusterCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceClusterCommandResponse) ProtoMessage() {}

func (x *GetInstanceClusterCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceClusterCommandResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceClusterCommandResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{132}
}

func (x *GetInstanceClusterCommandResponse) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetInstanceClusterCommandResponse) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

// ConfigManagementPlugin is defined based on argocd config management plugin:https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
type ConfigManagementPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled bool        `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Image   string      `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Spec    *PluginSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *ConfigManagementPlugin) Reset() {
	*x = ConfigManagementPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigManagementPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigManagementPlugin) ProtoMessage() {}

func (x *ConfigManagementPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigManagementPlugin.ProtoReflect.Descriptor instead.
func (*ConfigManagementPlugin) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{133}
}

func (x *ConfigManagementPlugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigManagementPlugin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConfigManagementPlugin) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ConfigManagementPlugin) GetSpec() *PluginSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type PluginSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Init       *Command    `protobuf:"bytes,2,opt,name=init,proto3" json:"init,omitempty"`
	Generate   *Command    `protobuf:"bytes,3,opt,name=generate,proto3" json:"generate,omitempty"`
	Discover   *Discover   `protobuf:"bytes,4,opt,name=discover,proto3" json:"discover,omitempty"`
	Parameters *Parameters `protobuf:"bytes,5,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Use camel case to match the ConfigManagementPlugin definition of argocd
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	PreserveFileMode bool `protobuf:"varint,6,opt,name=preserveFileMode,proto3" json:"preserveFileMode,omitempty"`
}

func (x *PluginSpec) Reset() {
	*x = PluginSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginSpec) ProtoMessage() {}

func (x *PluginSpec) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginSpec.ProtoReflect.Descriptor instead.
func (*PluginSpec) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{134}
}

func (x *PluginSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginSpec) GetInit() *Command {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *PluginSpec) GetGenerate() *Command {
	if x != nil {
		return x.Generate
	}
	return nil
}

func (x *PluginSpec) GetDiscover() *Discover {
	if x != nil {
		return x.Discover
	}
	return nil
}

func (x *PluginSpec) GetParameters() *Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *PluginSpec) GetPreserveFileMode() bool {
	if x != nil {
		return x.PreserveFileMode
	}
	return false
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Args    []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{135}
}

func (x *Command) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Command) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type Discover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Find *Find `protobuf:"bytes,1,opt,name=find,proto3" json:"find,omitempty"`
	// Use camel case to match the ConfigManagementPlugin definition of argocd
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *Discover) Reset() {
	*x = Discover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discover) ProtoMessage() {}

func (x *Discover) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discover.ProtoReflect.Descriptor instead.
func (*Discover) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{136}
}

func (x *Discover) GetFind() *Find {
	if x != nil {
		return x.Find
	}
	return nil
}

func (x *Discover) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type Find struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Args    []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Glob    string   `protobuf:"bytes,3,opt,name=glob,proto3" json:"glob,omitempty"`
}

func (x *Find) Reset() {
	*x = Find{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Find) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Find) ProtoMessage() {}

func (x *Find) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Find.ProtoReflect.Descriptor instead.
func (*Find) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{137}
}

func (x *Find) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Find) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Find) GetGlob() string {
	if x != nil {
		return x.Glob
	}
	return ""
}

type Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use camel case to match the ConfigManagementPlugin definition of argocd
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	Static  []*ParameterAnnouncement `protobuf:"bytes,1,rep,name=static,proto3" json:"static,omitempty"`
	Dynamic *Dynamic                 `protobuf:"bytes,2,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{138}
}

func (x *Parameters) GetStatic() []*ParameterAnnouncement {
	if x != nil {
		return x.Static
	}
	return nil
}

func (x *Parameters) GetDynamic() *Dynamic {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

type Dynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Args    []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Dynamic) Reset() {
	*x = Dynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dynamic) ProtoMessage() {}

func (x *Dynamic) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dynamic.ProtoReflect.Descriptor instead.
func (*Dynamic) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{139}
}

func (x *Dynamic) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Dynamic) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type ParameterAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name identifying a parameter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// title is a human-readable text of the parameter name.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// tooltip is a human-readable description of the parameter.
	Tooltip string `protobuf:"bytes,3,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	// required defines if this given parameter is mandatory.
	Required bool `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	// itemType determines the primitive data type represented by the parameter. Parameters are always encoded as
	// strings, but this field lets them be interpreted as other primitive types.
	// Use camel case to match the ConfigManagementPlugin definition of argocd
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	ItemType string `protobuf:"bytes,5,opt,name=itemType,proto3" json:"itemType,omitempty"`
	// collectionType is the type of value this parameter holds - either a single value (a string) or a collection
	// (array or map). If collectionType is set, only the field with that type will be used. If collectionType is not
	// set, `string` is the default. If collectionType is set to an invalid value, a validation error is thrown.
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	CollectionType string `protobuf:"bytes,6,opt,name=collectionType,proto3" json:"collectionType,omitempty"`
	// string is the default value of the parameter if the parameter is a string.
	String_ string `protobuf:"bytes,7,opt,name=string,proto3" json:"string,omitempty"`
	// array is the default value of the parameter if the parameter is an array.
	Array []string `protobuf:"bytes,8,rep,name=array,proto3" json:"array,omitempty"`
	// map is the default value of the parameter if the parameter is a map.
	Map map[string]string `protobuf:"bytes,9,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ParameterAnnouncement) Reset() {
	*x = ParameterAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterAnnouncement) ProtoMessage() {}

func (x *ParameterAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterAnnouncement.ProtoReflect.Descriptor instead.
func (*ParameterAnnouncement) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{140}
}

func (x *ParameterAnnouncement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterAnnouncement) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ParameterAnnouncement) GetTooltip() string {
	if x != nil {
		return x.Tooltip
	}
	return ""
}

func (x *ParameterAnnouncement) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ParameterAnnouncement) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *ParameterAnnouncement) GetCollectionType() string {
	if x != nil {
		return x.CollectionType
	}
	return ""
}

func (x *ParameterAnnouncement) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ParameterAnnouncement) GetArray() []string {
	if x != nil {
		return x.Array
	}
	return nil
}

func (x *ParameterAnnouncement) GetMap() map[string]string {
	if x != nil {
		return x.Map
	}
	return nil
}

type GetInstanceConfigManagementPluginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInstanceConfigManagementPluginsRequest) Reset() {
	*x = GetInstanceConfigManagementPluginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceConfigManagementPluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceConfigManagementPluginsRequest) ProtoMessage() {}

func (x *GetInstanceConfigManagementPluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceConfigManagementPluginsRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceConfigManagementPluginsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{141}
}

func (x *GetInstanceConfigManagementPluginsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetInstanceConfigManagementPluginsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInstanceConfigManagementPluginsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugins []*ConfigManagementPlugin `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (x *GetInstanceConfigManagementPluginsResponse) Reset() {
	*x = GetInstanceConfigManagementPluginsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceConfigManagementPluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceConfigManagementPluginsResponse) ProtoMessage() {}

func (x *GetInstanceConfigManagementPluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceConfigManagementPluginsResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceConfigManagementPluginsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{142}
}

func (x *GetInstanceConfigManagementPluginsResponse) GetPlugins() []*ConfigManagementPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type UpdateInstanceConfigManagementPluginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                    `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Id             string                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Plugins        []*ConfigManagementPlugin `protobuf:"bytes,3,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (x *UpdateInstanceConfigManagementPluginsRequest) Reset() {
	*x = UpdateInstanceConfigManagementPluginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceConfigManagementPluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceConfigManagementPluginsRequest) ProtoMessage() {}

func (x *UpdateInstanceConfigManagementPluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceConfigManagementPluginsRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceConfigManagementPluginsRequest) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{143}
}

func (x *UpdateInstanceConfigManagementPluginsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateInstanceConfigManagementPluginsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateInstanceConfigManagementPluginsRequest) GetPlugins() []*ConfigManagementPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type UpdateInstanceConfigManagementPluginsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceConfigManagementPluginsResponse) Reset() {
	*x = UpdateInstanceConfigManagementPluginsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceConfigManagementPluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceConfigManagementPluginsResponse) ProtoMessage() {}

func (x *UpdateInstanceConfigManagementPluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceConfigManagementPluginsResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceConfigManagementPluginsResponse) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{144}
}

type PatchInstanceSecretRequest_ValueField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *PatchInstanceSecretRequest_ValueField) Reset() {
	*x = PatchInstanceSecretRequest_ValueField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceSecretRequest_ValueField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceSecretRequest_ValueField) ProtoMessage() {}

func (x *PatchInstanceSecretRequest_ValueField) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceSecretRequest_ValueField.ProtoReflect.Descriptor instead.
func (*PatchInstanceSecretRequest_ValueField) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{21, 1}
}

func (x *PatchInstanceSecretRequest_ValueField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PatchInstanceNotificationSecretRequest_ValueField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *PatchInstanceNotificationSecretRequest_ValueField) Reset() {
	*x = PatchInstanceNotificationSecretRequest_ValueField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceNotificationSecretRequest_ValueField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceNotificationSecretRequest_ValueField) ProtoMessage() {}

func (x *PatchInstanceNotificationSecretRequest_ValueField) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceNotificationSecretRequest_ValueField.ProtoReflect.Descriptor instead.
func (*PatchInstanceNotificationSecretRequest_ValueField) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{23, 1}
}

func (x *PatchInstanceNotificationSecretRequest_ValueField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PatchInstanceImageUpdaterSecretRequest_ValueField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *PatchInstanceImageUpdaterSecretRequest_ValueField) Reset() {
	*x = PatchInstanceImageUpdaterSecretRequest_ValueField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceImageUpdaterSecretRequest_ValueField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceImageUpdaterSecretRequest_ValueField) ProtoMessage() {}

func (x *PatchInstanceImageUpdaterSecretRequest_ValueField) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceImageUpdaterSecretRequest_ValueField.ProtoReflect.Descriptor instead.
func (*PatchInstanceImageUpdaterSecretRequest_ValueField) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{25, 1}
}

func (x *PatchInstanceImageUpdaterSecretRequest_ValueField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PatchInstanceAppsetSecretRequest_ValueField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *PatchInstanceAppsetSecretRequest_ValueField) Reset() {
	*x = PatchInstanceAppsetSecretRequest_ValueField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_argocd_v1_argocd_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceAppsetSecretRequest_ValueField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceAppsetSecretRequest_ValueField) ProtoMessage() {}

func (x *PatchInstanceAppsetSecretRequest_ValueField) ProtoReflect() protoreflect.Message {
	mi := &file_argocd_v1_argocd_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceAppsetSecretRequest_ValueField.ProtoReflect.Descriptor instead.
func (*PatchInstanceAppsetSecretRequest_ValueField) Descriptor() ([]byte, []int) {
	return file_argocd_v1_argocd_proto_rawDescGZIP(), []int{27, 1}
}

func (x *PatchInstanceAppsetSecretRequest_ValueField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_argocd_v1_argocd_proto protoreflect.FileDescriptor

var file_argocd_v1_argocd_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x73, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x73,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x78, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0x51, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x22,
	0x50, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x73,
	0x73, 0x22, 0x61, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x5d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39,
	0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x84, 0x04, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x5d, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x0a, 0x73,
	0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x73, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x73, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7e,
	0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x4f,
	0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xce, 0x02, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x72, 0x0a, 0x0b, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x31, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xf2, 0x02, 0x0a, 0x26, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x1a, 0x7e, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x31, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xf2, 0x02, 0x0a, 0x26, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x1a, 0x7e, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x31, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xe0, 0x02, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70,
	0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x78, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x31, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x39, 0x0a,
	0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x73, 0x73, 0x22, 0x2d, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53,
	0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x73, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x27,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x28, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x82, 0x02, 0x0a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x2c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x5d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0xeb, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5c, 0x0a,
	0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x24,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x27,
	0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x28, 0x52, 0x65, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x47, 0x0a, 0x29, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x7c, 0x0a, 0x1c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41,
	0x49, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a,
	0x16, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xea, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6d, 0x69, 0x73, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x4f, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x34, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0xb0, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x9d, 0x03, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x03, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x03, 0x0a,
	0x19, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x12, 0x73, 0x79,
	0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0xb4, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xde, 0x05, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0c, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x05, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0c,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x06, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xec, 0x02, 0x0a, 0x1c,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x16,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd0, 0x02,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x2d, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x22, 0x54, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x51, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x68, 0x61, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xf0, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x54, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0xb7, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x01, 0x0a,
	0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x27, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x55, 0x0a, 0x28, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x78,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a,
	0x16, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x97, 0x03, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x49, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb3, 0x08, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f,
	0x43, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x12, 0x58, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x67, 0x6f, 0x43, 0x44, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x12, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x4b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x6b,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x49, 0x0a, 0x0d, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43,
	0x44, 0x48, 0x65, 0x6c, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68,
	0x65, 0x6c, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x69, 0x64, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x57, 0x65, 0x62, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x67, 0x6f, 0x43, 0x44, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x09, 0x64,
	0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x62, 0x61, 0x63, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x72, 0x62,
	0x61, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x44,
	0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x69, 0x63,
	0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x66,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x69, 0x66, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x66, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3f, 0x0a, 0x11, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x71, 0x0a, 0x12, 0x41, 0x72, 0x67, 0x6f, 0x43,
	0x44, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x1b, 0x41, 0x72,
	0x67, 0x6f, 0x43, 0x44, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x12, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x48, 0x65, 0x6c, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x69, 0x0a, 0x17, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x4b,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x56, 0x0a, 0x17, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x41, 0x72, 0x67,
	0x6f, 0x43, 0x44, 0x52, 0x42, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x63, 0x73, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x43, 0x73, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x0d, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x41, 0x72, 0x67, 0x6f,
	0x43, 0x44, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x17, 0x41,
	0x72, 0x67, 0x6f, 0x43, 0x44, 0x57, 0x65, 0x62, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x14, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x61, 0x70, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x88, 0x08, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x52, 0x42, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x48, 0x02, 0x52,
	0x0a, 0x72, 0x62, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x4f, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x69, 0x0a, 0x14, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x69,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x22, 0x33, 0x0a, 0x1b,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x62, 0x0a, 0x13, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x9f, 0x0a, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x1e,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x6c, 0x0a, 0x1e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x49, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73,
	0x79, 0x6e, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x14, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x16, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x52, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x17, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71,
	0x64, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x0e,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x49,
	0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x1b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x44, 0x0a, 0x10, 0x49, 0x50,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3b, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xe7, 0x02,
	0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x63,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x72, 0x67, 0x6f, 0x43, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x59, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf4, 0x07, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x50, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0d, 0x6b, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x6b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x13,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x48, 0x03,
	0x52, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f,
	0x67, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x19, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x11, 0x65, 0x6b, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x0f, 0x65, 0x6b, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65,
	0x6b, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0xdb, 0x06, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x1b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x19, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x24, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x21, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0,
	0x0c, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x4b, 0x0a, 0x15, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x5f, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x13, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x52, 0x62, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x16, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x13, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x4f, 0x0a, 0x17, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x15, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x61, 0x70, 0x12, 0x56, 0x0a, 0x1b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x14, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x1c, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x19, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6d, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x1a, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x17, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x17, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x20, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x1d,
	0x72, 0x65, 0x70, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x53, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x16, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x13, 0x10,
	0x14, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xcc, 0x07, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x12, 0x42, 0x0a, 0x10,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70,
	0x12, 0x4b, 0x0a, 0x15, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x72, 0x62, 0x61, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x13, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x52, 0x62, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x50, 0x0a,
	0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12,
	0x4f, 0x0a, 0x17, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70,
	0x12, 0x56, 0x0a, 0x1b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x18,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a,
	0x1c, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x19, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x1a, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x17, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x54, 0x6c, 0x73, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x53, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x42, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22,
	0xed, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x22,
	0xdd, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x60, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x8e, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0xae, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0x37, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x52, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x66, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48,
	0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x22, 0x37, 0x0a,
	0x07, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6f,
	0x6c, 0x74, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x42, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64,
	0x0a, 0x29, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x42, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x22, 0x2f, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xea, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x53, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x10, 0x05, 0x2a, 0x94, 0x02, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59,
	0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52,
	0x53, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x05, 0x2a, 0x74, 0x0a, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x03, 0x2a,
	0x53, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x41, 0x52,
	0x47, 0x4f, 0x10, 0x01, 0x2a, 0xd1, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52,
	0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x2f,
	0x0a, 0x2b, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12,
	0x31, 0x0a, 0x2d, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x53,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x55, 0x4e,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x53,
	0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x10, 0x07, 0x2a, 0x9a, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x43,
	0x54, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x45, 0x4b, 0x53, 0x10,
	0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x4b, 0x55, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x49, 0x10, 0x03, 0x32, 0xac, 0x4d, 0x0a, 0x0d, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x99, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a,
	0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x30, 0x01, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x53, 0x53, 0x12, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12,
	0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x73, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xe7,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x37, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x12, 0x4a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0xe2, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0xf2, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xf7, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3b, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x12, 0x4e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xa5, 0x01, 0x0a,
	0x0d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x32, 0x34,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xba, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x40, 0x3a, 0x01, 0x2a, 0x32, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0xec, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x32, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0xec, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4e, 0x3a, 0x01, 0x2a, 0x32, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0xca, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0xd3, 0x01, 0x0a,
	0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70,
	0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x32, 0x42,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x3a, 0x01, 0x2a, 0x1a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53, 0x12,
	0x2a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x53, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d,
	0x3a, 0x01, 0x2a, 0x1a, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x73, 0x73, 0x12, 0xe8, 0x01,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x47, 0x3a, 0x01, 0x2a, 0x1a, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x1a,
	0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xfc, 0x01, 0x0a, 0x23, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x53,
	0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x3a, 0x01, 0x2a, 0x1a, 0x4d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2f, 0x73,
	0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xfe, 0x01, 0x0a, 0x24, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x3a, 0x01, 0x2a, 0x1a, 0x4c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x83, 0x02, 0x0a, 0x25, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x12, 0x3e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x3a, 0x01, 0x2a,
	0x1a, 0x4e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0xa1, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc5, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xd2, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x3a,
	0x01, 0x2a, 0x1a, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0xf3, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x36, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x3a, 0x01, 0x2a, 0x1a,
	0x56, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x8a, 0x02, 0x0a, 0x21, 0x52, 0x65, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x3a, 0x01,
	0x2a, 0x22, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0xcf, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x2a, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xc5, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xd1,
	0x01, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4f, 0x12, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x30, 0x01, 0x12, 0xcb, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x3a, 0x01, 0x2a, 0x22, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0xc4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd1, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x50, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xf6, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x88, 0x01, 0x92, 0x41, 0x28, 0x12, 0x26, 0x47,
	0x65, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x12, 0x55, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x73, 0x30, 0x01, 0x12, 0xd0, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x3a, 0x01, 0x2a, 0x1a, 0x4b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc5, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67,
	0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x3a, 0x01, 0x2a,
	0x1a, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0xda, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x59, 0x3a, 0x01, 0x2a, 0x22, 0x54, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xff, 0x01, 0x0a,
	0x20, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e,
	0x3a, 0x01, 0x2a, 0x22, 0x59, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x2d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0xcd,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74,
	0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4d, 0x2a, 0x4b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe1,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x32, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x12, 0x53, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0xd6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x31, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x3a, 0x01,
	0x2a, 0x22, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x61, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4a, 0x3a, 0x01, 0x2a, 0x22, 0x45, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4b, 0x3a, 0x01, 0x2a, 0x22, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0xa7, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a, 0x22, 0x3a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x0e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0xc9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x41,
	0x72, 0x67, 0x6f, 0x63, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x69,
	0x6f, 0x2f, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x41, 0x41, 0x58, 0xaa, 0x02, 0x10, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x41, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x5c, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x41,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x5c, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x41, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_argocd_v1_argocd_proto_rawDescOnce sync.Once
	file_argocd_v1_argocd_proto_rawDescData = file_argocd_v1_argocd_proto_rawDesc
)

func file_argocd_v1_argocd_proto_rawDescGZIP() []byte {
	file_argocd_v1_argocd_proto_rawDescOnce.Do(func() {
		file_argocd_v1_argocd_proto_rawDescData = protoimpl.X.CompressGZIP(file_argocd_v1_argocd_proto_rawDescData)
	})
	return file_argocd_v1_argocd_proto_rawDescData
}

var file_argocd_v1_argocd_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_argocd_v1_argocd_proto_msgTypes = make([]protoimpl.MessageInfo, 173)
var file_argocd_v1_argocd_proto_goTypes = []interface{}{
	(SyncOperationField)(0),                               // 0: akuity.argocd.v1.SyncOperationField
	(SyncOperationGroupField)(0),                          // 1: akuity.argocd.v1.SyncOperationGroupField
	(ClusterSize)(0),                                      // 2: akuity.argocd.v1.ClusterSize
	(DirectClusterType)(0),                                // 3: akuity.argocd.v1.DirectClusterType
	(PruneResourceType)(0),                                // 4: akuity.argocd.v1.PruneResourceType
	(ClusterCommandFor)(0),                                // 5: akuity.argocd.v1.ClusterCommandFor
	(*ListInstanceVersionsRequest)(nil),                   // 6: akuity.argocd.v1.ListInstanceVersionsRequest
	(*ListInstanceVersionsResponse)(nil),                  // 7: akuity.argocd.v1.ListInstanceVersionsResponse
	(*ListInstancesRequest)(nil),                          // 8: akuity.argocd.v1.ListInstancesRequest
	(*ListInstancesResponse)(nil),                         // 9: akuity.argocd.v1.ListInstancesResponse
	(*CreateInstanceRequest)(nil),                         // 10: akuity.argocd.v1.CreateInstanceRequest
	(*CreateInstanceResponse)(nil),                        // 11: akuity.argocd.v1.CreateInstanceResponse
	(*GetInstanceRequest)(nil),                            // 12: akuity.argocd.v1.GetInstanceRequest
	(*GetInstanceResponse)(nil),                           // 13: akuity.argocd.v1.GetInstanceResponse
	(*GetInstanceCSSRequest)(nil),                         // 14: akuity.argocd.v1.GetInstanceCSSRequest
	(*GetInstanceCSSResponse)(nil),                        // 15: akuity.argocd.v1.GetInstanceCSSResponse
	(*GetInstanceNotificationSettingsRequest)(nil),        // 16: akuity.argocd.v1.GetInstanceNotificationSettingsRequest
	(*GetInstanceNotificationSettingsResponse)(nil),       // 17: akuity.argocd.v1.GetInstanceNotificationSettingsResponse
	(*GetInstanceNotificationCatalogRequest)(nil),         // 18: akuity.argocd.v1.GetInstanceNotificationCatalogRequest
	(*GetInstanceNotificationCatalogResponse)(nil),        // 19: akuity.argocd.v1.GetInstanceNotificationCatalogResponse
	(*GetInstanceImageUpdaterSettingsRequest)(nil),        // 20: akuity.argocd.v1.GetInstanceImageUpdaterSettingsRequest
	(*GetInstanceImageUpdaterSettingsResponse)(nil),       // 21: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse
	(*ResourceCustomizationConfig)(nil),                   // 22: akuity.argocd.v1.ResourceCustomizationConfig
	(*GetInstanceResourceCustomizationsRequest)(nil),      // 23: akuity.argocd.v1.GetInstanceResourceCustomizationsRequest
	(*GetInstanceResourceCustomizationsResponse)(nil),     // 24: akuity.argocd.v1.GetInstanceResourceCustomizationsResponse
	(*PatchInstanceRequest)(nil),                          // 25: akuity.argocd.v1.PatchInstanceRequest
	(*PatchInstanceResponse)(nil),                         // 26: akuity.argocd.v1.PatchInstanceResponse
	(*PatchInstanceSecretRequest)(nil),                    // 27: akuity.argocd.v1.PatchInstanceSecretRequest
	(*PatchInstanceSecretResponse)(nil),                   // 28: akuity.argocd.v1.PatchInstanceSecretResponse
	(*PatchInstanceNotificationSecretRequest)(nil),        // 29: akuity.argocd.v1.PatchInstanceNotificationSecretRequest
	(*PatchInstanceNotificationSecretResponse)(nil),       // 30: akuity.argocd.v1.PatchInstanceNotificationSecretResponse
	(*PatchInstanceImageUpdaterSecretRequest)(nil),        // 31: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest
	(*PatchInstanceImageUpdaterSecretResponse)(nil),       // 32: akuity.argocd.v1.PatchInstanceImageUpdaterSecretResponse
	(*PatchInstanceAppsetSecretRequest)(nil),              // 33: akuity.argocd.v1.PatchInstanceAppsetSecretRequest
	(*PatchInstanceAppsetSecretResponse)(nil),             // 34: akuity.argocd.v1.PatchInstanceAppsetSecretResponse
	(*GetInstanceAppsetSecretRequest)(nil),                // 35: akuity.argocd.v1.GetInstanceAppsetSecretRequest
	(*GetInstanceAppsetSecretResponse)(nil),               // 36: akuity.argocd.v1.GetInstanceAppsetSecretResponse
	(*UpdateInstanceRequest)(nil),                         // 37: akuity.argocd.v1.UpdateInstanceRequest
	(*UpdateInstanceResponse)(nil),                        // 38: akuity.argocd.v1.UpdateInstanceResponse
	(*UpdateInstanceCSSRequest)(nil),                      // 39: akuity.argocd.v1.UpdateInstanceCSSRequest
	(*UpdateInstanceCSSResponse)(nil),                     // 40: akuity.argocd.v1.UpdateInstanceCSSResponse
	(*UpdateInstanceNotificationConfigRequest)(nil),       // 41: akuity.argocd.v1.UpdateInstanceNotificationConfigRequest
	(*UpdateInstanceNotificationConfigResponse)(nil),      // 42: akuity.argocd.v1.UpdateInstanceNotificationConfigResponse
	(*UpdateInstanceImageUpdaterConfigRequest)(nil),       // 43: akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest
	(*UpdateInstanceImageUpdaterConfigResponse)(nil),      // 44: akuity.argocd.v1.UpdateInstanceImageUpdaterConfigResponse
	(*UpdateInstanceImageUpdaterSSHConfigRequest)(nil),    // 45: akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest
	(*UpdateInstanceImageUpdaterSSHConfigResponse)(nil),   // 46: akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigResponse
	(*UpdateInstanceResourceCustomizationsRequest)(nil),   // 47: akuity.argocd.v1.UpdateInstanceResourceCustomizationsRequest
	(*UpdateInstanceResourceCustomizationsResponse)(nil),  // 48: akuity.argocd.v1.UpdateInstanceResourceCustomizationsResponse
	(*DeleteInstanceRequest)(nil),                         // 49: akuity.argocd.v1.DeleteInstanceRequest
	(*DeleteInstanceResponse)(nil),                        // 50: akuity.argocd.v1.DeleteInstanceResponse
	(*ListInstanceAccountsRequest)(nil),                   // 51: akuity.argocd.v1.ListInstanceAccountsRequest
	(*ListInstanceAccountsResponse)(nil),                  // 52: akuity.argocd.v1.ListInstanceAccountsResponse
	(*UpsertInstanceAccountRequest)(nil),                  // 53: akuity.argocd.v1.UpsertInstanceAccountRequest
	(*UpsertInstanceAccountResponse)(nil),                 // 54: akuity.argocd.v1.UpsertInstanceAccountResponse
	(*UpdateInstanceAccountPasswordRequest)(nil),          // 55: akuity.argocd.v1.UpdateInstanceAccountPasswordRequest
	(*UpdateInstanceAccountPasswordResponse)(nil),         // 56: akuity.argocd.v1.UpdateInstanceAccountPasswordResponse
	(*RegenerateInstanceAccountPasswordRequest)(nil),      // 57: akuity.argocd.v1.RegenerateInstanceAccountPasswordRequest
	(*RegenerateInstanceAccountPasswordResponse)(nil),     // 58: akuity.argocd.v1.RegenerateInstanceAccountPasswordResponse
	(*DeleteInstanceAccountRequest)(nil),                  // 59: akuity.argocd.v1.DeleteInstanceAccountRequest
	(*DeleteInstanceAccountResponse)(nil),                 // 60: akuity.argocd.v1.DeleteInstanceAccountResponse
	(*GetAIAssistantUsageStatsRequest)(nil),               // 61: akuity.argocd.v1.GetAIAssistantUsageStatsRequest
	(*GetAIAssistantUsageStatsResponse)(nil),              // 62: akuity.argocd.v1.GetAIAssistantUsageStatsResponse
	(*GetSyncOperationsStatsRequest)(nil),                 // 63: akuity.argocd.v1.GetSyncOperationsStatsRequest
	(*GetSyncOperationsEventsRequest)(nil),                // 64: akuity.argocd.v1.GetSyncOperationsEventsRequest
	(*SyncOperationFilter)(nil),                           // 65: akuity.argocd.v1.SyncOperationFilter
	(*Label)(nil),                                         // 66: akuity.argocd.v1.Label
	(*SyncOperationStat)(nil),                             // 67: akuity.argocd.v1.SyncOperationStat
	(*SyncOperationEvent)(nil),                            // 68: akuity.argocd.v1.SyncOperationEvent
	(*SyncOperationEventDetails)(nil),                     // 69: akuity.argocd.v1.SyncOperationEventDetails
	(*OperationInitiator)(nil),                            // 70: akuity.argocd.v1.OperationInitiator
	(*GetSyncOperationsStatsResponse)(nil),                // 71: akuity.argocd.v1.GetSyncOperationsStatsResponse
	(*GetSyncOperationsEventsResponse)(nil),               // 72: akuity.argocd.v1.GetSyncOperationsEventsResponse
	(*ClusterFilter)(nil),                                 // 73: akuity.argocd.v1.ClusterFilter
	(*ListInstanceClustersRequest)(nil),                   // 74: akuity.argocd.v1.ListInstanceClustersRequest
	(*WatchInstanceClustersRequest)(nil),                  // 75: akuity.argocd.v1.WatchInstanceClustersRequest
	(*WatchInstancesRequest)(nil),                         // 76: akuity.argocd.v1.WatchInstancesRequest
	(*WatchInstancesResponse)(nil),                        // 77: akuity.argocd.v1.WatchInstancesResponse
	(*WatchInstanceClustersResponse)(nil),                 // 78: akuity.argocd.v1.WatchInstanceClustersResponse
	(*ListInstanceClustersResponse)(nil),                  // 79: akuity.argocd.v1.ListInstanceClustersResponse
	(*CreateInstanceClusterRequest)(nil),                  // 80: akuity.argocd.v1.CreateInstanceClusterRequest
	(*CreateInstanceClusterResponse)(nil),                 // 81: akuity.argocd.v1.CreateInstanceClusterResponse
	(*GetInstanceClusterRequest)(nil),                     // 82: akuity.argocd.v1.GetInstanceClusterRequest
	(*GetInstanceClusterResponse)(nil),                    // 83: akuity.argocd.v1.GetInstanceClusterResponse
	(*GetInstanceClusterInfoResponse)(nil),                // 84: akuity.argocd.v1.GetInstanceClusterInfoResponse
	(*GetInstanceClusterManifestsRequest)(nil),            // 85: akuity.argocd.v1.GetInstanceClusterManifestsRequest
	(*UpdateInstanceClusterRequest)(nil),                  // 86: akuity.argocd.v1.UpdateInstanceClusterRequest
	(*UpdateInstanceClusterResponse)(nil),                 // 87: akuity.argocd.v1.UpdateInstanceClusterResponse
	(*UpdateInstanceClustersRequest)(nil),                 // 88: akuity.argocd.v1.UpdateInstanceClustersRequest
	(*UpdateInstanceClustersResponse)(nil),                // 89: akuity.argocd.v1.UpdateInstanceClustersResponse
	(*UpdateInstanceClustersAgentVersionRequest)(nil),     // 90: akuity.argocd.v1.UpdateInstanceClustersAgentVersionRequest
	(*RotateInstanceClusterCredentialsRequest)(nil),       // 91: akuity.argocd.v1.RotateInstanceClusterCredentialsRequest
	(*RotateInstanceClusterCredentialsResponse)(nil),      // 92: akuity.argocd.v1.RotateInstanceClusterCredentialsResponse
	(*DeleteInstanceClusterRequest)(nil),                  // 93: akuity.argocd.v1.DeleteInstanceClusterRequest
	(*DeleteInstanceClusterResponse)(nil),                 // 94: akuity.argocd.v1.DeleteInstanceClusterResponse
	(*ApplicationsHealth)(nil),                            // 95: akuity.argocd.v1.ApplicationsHealth
	(*ApplicationsSyncStatus)(nil),                        // 96: akuity.argocd.v1.ApplicationsSyncStatus
	(*ApplicationsStatus)(nil),                            // 97: akuity.argocd.v1.ApplicationsStatus
	(*ArgoCDConfigMap)(nil),                               // 98: akuity.argocd.v1.ArgoCDConfigMap
	(*DeepLink)(nil),                                      // 99: akuity.argocd.v1.DeepLink
	(*ArgoCDDeepLinks)(nil),                               // 100: akuity.argocd.v1.ArgoCDDeepLinks
	(*ArgoCDAlertConfig)(nil),                             // 101: akuity.argocd.v1.ArgoCDAlertConfig
	(*ArgoCDBannerConfig)(nil),                            // 102: akuity.argocd.v1.ArgoCDBannerConfig
	(*ArgoCDExtensionInstallEntry)(nil),                   // 103: akuity.argocd.v1.ArgoCDExtensionInstallEntry
	(*ArgoCDGoogleAnalyticsConfig)(nil),                   // 104: akuity.argocd.v1.ArgoCDGoogleAnalyticsConfig
	(*ArgoCDHelmSettings)(nil),                            // 105: akuity.argocd.v1.ArgoCDHelmSettings
	(*ArgoCDKustomizeSettings)(nil),                       // 106: akuity.argocd.v1.ArgoCDKustomizeSettings
	(*ArgoCDStatusBadgeConfig)(nil),                       // 107: akuity.argocd.v1.ArgoCDStatusBadgeConfig
	(*ArgoCDRBACConfigMap)(nil),                           // 108: akuity.argocd.v1.ArgoCDRBACConfigMap
	(*OverlayPolicy)(nil),                                 // 109: akuity.argocd.v1.OverlayPolicy
	(*ArgoCDResourceSettings)(nil),                        // 110: akuity.argocd.v1.ArgoCDResourceSettings
	(*ArgoCDWebTerminalConfig)(nil),                       // 111: akuity.argocd.v1.ArgoCDWebTerminalConfig
	(*ClusterCustomization)(nil),                          // 112: akuity.argocd.v1.ClusterCustomization
	(*Instance)(nil),                                      // 113: akuity.argocd.v1.Instance
	(*InstanceAccount)(nil),                               // 114: akuity.argocd.v1.InstanceAccount
	(*InstanceInfo)(nil),                                  // 115: akuity.argocd.v1.InstanceInfo
	(*AppsetPolicy)(nil),                                  // 116: akuity.argocd.v1.AppsetPolicy
	(*AgentPermissionsRule)(nil),                          // 117: akuity.argocd.v1.AgentPermissionsRule
	(*CrossplaneExtensionResource)(nil),                   // 118: akuity.argocd.v1.CrossplaneExtensionResource
	(*CrossplaneExtension)(nil),                           // 119: akuity.argocd.v1.CrossplaneExtension
	(*InstanceSpec)(nil),                                  // 120: akuity.argocd.v1.InstanceSpec
	(*ManagedCluster)(nil),                                // 121: akuity.argocd.v1.ManagedCluster
	(*RepoServerDelegate)(nil),                            // 122: akuity.argocd.v1.RepoServerDelegate
	(*ImageUpdaterDelegate)(nil),                          // 123: akuity.argocd.v1.ImageUpdaterDelegate
	(*AppSetDelegate)(nil),                                // 124: akuity.argocd.v1.AppSetDelegate
	(*InstanceAccountCapabilities)(nil),                   // 125: akuity.argocd.v1.InstanceAccountCapabilities
	(*InstanceVersion)(nil),                               // 126: akuity.argocd.v1.InstanceVersion
	(*IPAllowListEntry)(nil),                              // 127: akuity.argocd.v1.IPAllowListEntry
	(*HostAliases)(nil),                                   // 128: akuity.argocd.v1.HostAliases
	(*AgentState)(nil),                                    // 129: akuity.argocd.v1.AgentState
	(*DirectClusterSpec)(nil),                             // 130: akuity.argocd.v1.DirectClusterSpec
	(*ClusterData)(nil),                                   // 131: akuity.argocd.v1.ClusterData
	(*Cluster)(nil),                                       // 132: akuity.argocd.v1.Cluster
	(*ApplyInstanceRequest)(nil),                          // 133: akuity.argocd.v1.ApplyInstanceRequest
	(*ApplyInstanceResponse)(nil),                         // 134: akuity.argocd.v1.ApplyInstanceResponse
	(*ExportInstanceRequest)(nil),                         // 135: akuity.argocd.v1.ExportInstanceRequest
	(*ExportInstanceResponse)(nil),                        // 136: akuity.argocd.v1.ExportInstanceResponse
	(*GetInstanceClusterCommandRequest)(nil),              // 137: akuity.argocd.v1.GetInstanceClusterCommandRequest
	(*GetInstanceClusterCommandResponse)(nil),             // 138: akuity.argocd.v1.GetInstanceClusterCommandResponse
	(*ConfigManagementPlugin)(nil),                        // 139: akuity.argocd.v1.ConfigManagementPlugin
	(*PluginSpec)(nil),                                    // 140: akuity.argocd.v1.PluginSpec
	(*Command)(nil),                                       // 141: akuity.argocd.v1.Command
	(*Discover)(nil),                                      // 142: akuity.argocd.v1.Discover
	(*Find)(nil),                                          // 143: akuity.argocd.v1.Find
	(*Parameters)(nil),                                    // 144: akuity.argocd.v1.Parameters
	(*Dynamic)(nil),                                       // 145: akuity.argocd.v1.Dynamic
	(*ParameterAnnouncement)(nil),                         // 146: akuity.argocd.v1.ParameterAnnouncement
	(*GetInstanceConfigManagementPluginsRequest)(nil),     // 147: akuity.argocd.v1.GetInstanceConfigManagementPluginsRequest
	(*GetInstanceConfigManagementPluginsResponse)(nil),    // 148: akuity.argocd.v1.GetInstanceConfigManagementPluginsResponse
	(*UpdateInstanceConfigManagementPluginsRequest)(nil),  // 149: akuity.argocd.v1.UpdateInstanceConfigManagementPluginsRequest
	(*UpdateInstanceConfigManagementPluginsResponse)(nil), // 150: akuity.argocd.v1.UpdateInstanceConfigManagementPluginsResponse
	nil, // 151: akuity.argocd.v1.GetInstanceNotificationSettingsResponse.SecretEntry
	nil, // 152: akuity.argocd.v1.GetInstanceNotificationSettingsResponse.ConfigEntry
	nil, // 153: akuity.argocd.v1.GetInstanceNotificationCatalogResponse.CatalogEntry
	nil, // 154: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.SecretEntry
	nil, // 155: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.ConfigEntry
	nil, // 156: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.SshConfigEntry
	nil, // 157: akuity.argocd.v1.PatchInstanceSecretRequest.SecretEntry
	(*PatchInstanceSecretRequest_ValueField)(nil), // 158: akuity.argocd.v1.PatchInstanceSecretRequest.ValueField
	nil, // 159: akuity.argocd.v1.PatchInstanceNotificationSecretRequest.SecretEntry
	(*PatchInstanceNotificationSecretRequest_ValueField)(nil), // 160: akuity.argocd.v1.PatchInstanceNotificationSecretRequest.ValueField
	nil, // 161: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.SecretEntry
	(*PatchInstanceImageUpdaterSecretRequest_ValueField)(nil), // 162: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.ValueField
	nil, // 163: akuity.argocd.v1.PatchInstanceAppsetSecretRequest.SecretEntry
	(*PatchInstanceAppsetSecretRequest_ValueField)(nil), // 164: akuity.argocd.v1.PatchInstanceAppsetSecretRequest.ValueField
	nil,                           // 165: akuity.argocd.v1.GetInstanceAppsetSecretResponse.SecretEntry
	nil,                           // 166: akuity.argocd.v1.UpdateInstanceNotificationConfigRequest.ConfigEntry
	nil,                           // 167: akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest.ConfigEntry
	nil,                           // 168: akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest.ConfigEntry
	nil,                           // 169: akuity.argocd.v1.SyncOperationFilter.LabelsEntry
	nil,                           // 170: akuity.argocd.v1.SyncOperationStat.CountMapEntry
	nil,                           // 171: akuity.argocd.v1.SyncOperationStat.AverageMapEntry
	nil,                           // 172: akuity.argocd.v1.SyncOperationEventDetails.LabelsEntry
	nil,                           // 173: akuity.argocd.v1.ClusterFilter.LabelsEntry
	nil,                           // 174: akuity.argocd.v1.Instance.SecretsEntry
	nil,                           // 175: akuity.argocd.v1.ClusterData.LabelsEntry
	nil,                           // 176: akuity.argocd.v1.ClusterData.AnnotationsEntry
	nil,                           // 177: akuity.argocd.v1.GetInstanceClusterCommandResponse.VariablesEntry
	nil,                           // 178: akuity.argocd.v1.ParameterAnnouncement.MapEntry
	(v1.Type)(0),                  // 179: akuity.types.id.v1.Type
	(*structpb.Struct)(nil),       // 180: google.protobuf.Struct
	(v11.GroupByInterval)(0),      // 181: akuity.types.misc.v1.GroupByInterval
	(v12.TenantPhase)(0),          // 182: akuity.types.status.health.v1.TenantPhase
	(v13.EventType)(0),            // 183: akuity.types.events.v1.EventType
	(*v12.Status)(nil),            // 184: akuity.types.status.health.v1.Status
	(*v14.Status)(nil),            // 185: akuity.types.status.reconciliation.v1.Status
	(*timestamppb.Timestamp)(nil), // 186: google.protobuf.Timestamp
	(*v12.AgentAggregatedHealthResponse)(nil), // 187: akuity.types.status.health.v1.AgentAggregatedHealthResponse
	(*httpbody.HttpBody)(nil),                 // 188: google.api.HttpBody
	(*emptypb.Empty)(nil),                     // 189: google.protobuf.Empty
}
var file_argocd_v1_argocd_proto_depIdxs = []int32{
	126, // 0: akuity.argocd.v1.ListInstanceVersionsResponse.versions:type_name -> akuity.argocd.v1.InstanceVersion
	113, // 1: akuity.argocd.v1.ListInstancesResponse.instances:type_name -> akuity.argocd.v1.Instance
	113, // 2: akuity.argocd.v1.CreateInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	179, // 3: akuity.argocd.v1.GetInstanceRequest.id_type:type_name -> akuity.types.id.v1.Type
	113, // 4: akuity.argocd.v1.GetInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	151, // 5: akuity.argocd.v1.GetInstanceNotificationSettingsResponse.secret:type_name -> akuity.argocd.v1.GetInstanceNotificationSettingsResponse.SecretEntry
	152, // 6: akuity.argocd.v1.GetInstanceNotificationSettingsResponse.config:type_name -> akuity.argocd.v1.GetInstanceNotificationSettingsResponse.ConfigEntry
	153, // 7: akuity.argocd.v1.GetInstanceNotificationCatalogResponse.catalog:type_name -> akuity.argocd.v1.GetInstanceNotificationCatalogResponse.CatalogEntry
	154, // 8: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.secret:type_name -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.SecretEntry
	155, // 9: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.config:type_name -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.ConfigEntry
	156, // 10: akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.ssh_config:type_name -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse.SshConfigEntry
	22,  // 11: akuity.argocd.v1.GetInstanceResourceCustomizationsResponse.resource_customizations:type_name -> akuity.argocd.v1.ResourceCustomizationConfig
	180, // 12: akuity.argocd.v1.PatchInstanceRequest.patch:type_name -> google.protobuf.Struct
	113, // 13: akuity.argocd.v1.PatchInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	157, // 14: akuity.argocd.v1.PatchInstanceSecretRequest.secret:type_name -> akuity.argocd.v1.PatchInstanceSecretRequest.SecretEntry
	159, // 15: akuity.argocd.v1.PatchInstanceNotificationSecretRequest.secret:type_name -> akuity.argocd.v1.PatchInstanceNotificationSecretRequest.SecretEntry
	161, // 16: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.secret:type_name -> akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.SecretEntry
	163, // 17: akuity.argocd.v1.PatchInstanceAppsetSecretRequest.secret:type_name -> akuity.argocd.v1.PatchInstanceAppsetSecretRequest.SecretEntry
	165, // 18: akuity.argocd.v1.GetInstanceAppsetSecretResponse.secret:type_name -> akuity.argocd.v1.GetInstanceAppsetSecretResponse.SecretEntry
	113, // 19: akuity.argocd.v1.UpdateInstanceRequest.instance:type_name -> akuity.argocd.v1.Instance
	113, // 20: akuity.argocd.v1.UpdateInstanceResponse.instance:type_name -> akuity.argocd.v1.Instance
	166, // 21: akuity.argocd.v1.UpdateInstanceNotificationConfigRequest.config:type_name -> akuity.argocd.v1.UpdateInstanceNotificationConfigRequest.ConfigEntry
	167, // 22: akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest.config:type_name -> akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest.ConfigEntry
	168, // 23: akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest.config:type_name -> akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest.ConfigEntry
	22,  // 24: akuity.argocd.v1.UpdateInstanceResourceCustomizationsRequest.resources:type_name -> akuity.argocd.v1.ResourceCustomizationConfig
	114, // 25: akuity.argocd.v1.ListInstanceAccountsResponse.accounts:type_name -> akuity.argocd.v1.InstanceAccount
	125, // 26: akuity.argocd.v1.UpsertInstanceAccountRequest.capabilities:type_name -> akuity.argocd.v1.InstanceAccountCapabilities
	114, // 27: akuity.argocd.v1.UpsertInstanceAccountResponse.account:type_name -> akuity.argocd.v1.InstanceAccount
	65,  // 28: akuity.argocd.v1.GetSyncOperationsStatsRequest.filter:type_name -> akuity.argocd.v1.SyncOperationFilter
	181, // 29: akuity.argocd.v1.GetSyncOperationsStatsRequest.interval:type_name -> akuity.types.misc.v1.GroupByInterval
	1,   // 30: akuity.argocd.v1.GetSyncOperationsStatsRequest.group_by_field:type_name -> akuity.argocd.v1.SyncOperationGroupField
	65,  // 31: akuity.argocd.v1.GetSyncOperationsEventsRequest.filter:type_name -> akuity.argocd.v1.SyncOperationFilter
	0,   // 32: akuity.argocd.v1.GetSyncOperationsEventsRequest.field:type_name -> akuity.argocd.v1.SyncOperationField
	169, // 33: akuity.argocd.v1.SyncOperationFilter.labels:type_name -> akuity.argocd.v1.SyncOperationFilter.LabelsEntry
	170, // 34: akuity.argocd.v1.SyncOperationStat.count_map:type_name -> akuity.argocd.v1.SyncOperationStat.CountMapEntry
	171, // 35: akuity.argocd.v1.SyncOperationStat.average_map:type_name -> akuity.argocd.v1.SyncOperationStat.AverageMapEntry
	69,  // 36: akuity.argocd.v1.SyncOperationEvent.details:type_name -> akuity.argocd.v1.SyncOperationEventDetails
	172, // 37: akuity.argocd.v1.SyncOperationEventDetails.labels:type_name -> akuity.argocd.v1.SyncOperationEventDetails.LabelsEntry
	70,  // 38: akuity.argocd.v1.SyncOperationEventDetails.initiated_by:type_name -> akuity.argocd.v1.OperationInitiator
	67,  // 39: akuity.argocd.v1.GetSyncOperationsStatsResponse.sync_operation_stats:type_name -> akuity.argocd.v1.SyncOperationStat
	68,  // 40: akuity.argocd.v1.GetSyncOperationsEventsResponse.sync_operation_events:type_name -> akuity.argocd.v1.SyncOperationEvent
	182, // 41: akuity.argocd.v1.ClusterFilter.agent_status:type_name -> akuity.types.status.health.v1.TenantPhase
	173, // 42: akuity.argocd.v1.ClusterFilter.labels:type_name -> akuity.argocd.v1.ClusterFilter.LabelsEntry
	73,  // 43: akuity.argocd.v1.ListInstanceClustersRequest.filter:type_name -> akuity.argocd.v1.ClusterFilter
	73,  // 44: akuity.argocd.v1.WatchInstanceClustersRequest.filter:type_name -> akuity.argocd.v1.ClusterFilter
	113, // 45: akuity.argocd.v1.WatchInstancesResponse.item:type_name -> akuity.argocd.v1.Instance
	183, // 46: akuity.argocd.v1.WatchInstancesResponse.type:type_name -> akuity.types.events.v1.EventType
	132, // 47: akuity.argocd.v1.WatchInstanceClustersResponse.item:type_name -> akuity.argocd.v1.Cluster
	183, // 48: akuity.argocd.v1.WatchInstanceClustersResponse.type:type_name -> akuity.types.events.v1.EventType
	132, // 49: akuity.argocd.v1.ListInstanceClustersResponse.clusters:type_name -> akuity.argocd.v1.Cluster
	131, // 50: akuity.argocd.v1.CreateInstanceClusterRequest.data:type_name -> akuity.argocd.v1.ClusterData
	132, // 51: akuity.argocd.v1.CreateInstanceClusterResponse.cluster:type_name -> akuity.argocd.v1.Cluster
	179, // 52: akuity.argocd.v1.GetInstanceClusterRequest.id_type:type_name -> akuity.types.id.v1.Type
	132, // 53: akuity.argocd.v1.GetInstanceClusterResponse.cluster:type_name -> akuity.argocd.v1.Cluster
	131, // 54: akuity.argocd.v1.UpdateInstanceClusterRequest.data:type_name -> akuity.argocd.v1.ClusterData
	132, // 55: akuity.argocd.v1.UpdateInstanceClusterResponse.cluster:type_name -> akuity.argocd.v1.Cluster
	112, // 56: akuity.argocd.v1.UpdateInstanceClustersRequest.cluster_customizations:type_name -> akuity.argocd.v1.ClusterCustomization
	95,  // 57: akuity.argocd.v1.ApplicationsStatus.health:type_name -> akuity.argocd.v1.ApplicationsHealth
	96,  // 58: akuity.argocd.v1.ApplicationsStatus.sync_status:type_name -> akuity.argocd.v1.ApplicationsSyncStatus
	107, // 59: akuity.argocd.v1.ArgoCDConfigMap.status_badge:type_name -> akuity.argocd.v1.ArgoCDStatusBadgeConfig
	104, // 60: akuity.argocd.v1.ArgoCDConfigMap.google_analytics:type_name -> akuity.argocd.v1.ArgoCDGoogleAnalyticsConfig
	102, // 61: akuity.argocd.v1.ArgoCDConfigMap.banner:type_name -> akuity.argocd.v1.ArgoCDBannerConfig
	101, // 62: akuity.argocd.v1.ArgoCDConfigMap.chat:type_name -> akuity.argocd.v1.ArgoCDAlertConfig
	106, // 63: akuity.argocd.v1.ArgoCDConfigMap.kustomize_settings:type_name -> akuity.argocd.v1.ArgoCDKustomizeSettings
	105, // 64: akuity.argocd.v1.ArgoCDConfigMap.helm_settings:type_name -> akuity.argocd.v1.ArgoCDHelmSettings
	110, // 65: akuity.argocd.v1.ArgoCDConfigMap.resource_settings:type_name -> akuity.argocd.v1.ArgoCDResourceSettings
	111, // 66: akuity.argocd.v1.ArgoCDConfigMap.web_terminal:type_name -> akuity.argocd.v1.ArgoCDWebTerminalConfig
	100, // 67: akuity.argocd.v1.ArgoCDConfigMap.deep_links:type_name -> akuity.argocd.v1.ArgoCDDeepLinks
	99,  // 68: akuity.argocd.v1.ArgoCDDeepLinks.project_links:type_name -> akuity.argocd.v1.DeepLink
	99,  // 69: akuity.argocd.v1.ArgoCDDeepLinks.application_links:type_name -> akuity.argocd.v1.DeepLink
	99,  // 70: akuity.argocd.v1.ArgoCDDeepLinks.resource_links:type_name -> akuity.argocd.v1.DeepLink
	109, // 71: akuity.argocd.v1.ArgoCDRBACConfigMap.overlay_policies:type_name -> akuity.argocd.v1.OverlayPolicy
	180, // 72: akuity.argocd.v1.ClusterCustomization.kustomization:type_name -> google.protobuf.Struct
	174, // 73: akuity.argocd.v1.Instance.secrets:type_name -> akuity.argocd.v1.Instance.SecretsEntry
	184, // 74: akuity.argocd.v1.Instance.health_status:type_name -> akuity.types.status.health.v1.Status
	185, // 75: akuity.argocd.v1.Instance.reconciliation_status:type_name -> akuity.types.status.reconciliation.v1.Status
	186, // 76: akuity.argocd.v1.Instance.delete_time:type_name -> google.protobuf.Timestamp
	120, // 77: akuity.argocd.v1.Instance.spec:type_name -> akuity.argocd.v1.InstanceSpec
	98,  // 78: akuity.argocd.v1.Instance.config:type_name -> akuity.argocd.v1.ArgoCDConfigMap
	108, // 79: akuity.argocd.v1.Instance.rbac_config:type_name -> akuity.argocd.v1.ArgoCDRBACConfigMap
	115, // 80: akuity.argocd.v1.Instance.info:type_name -> akuity.argocd.v1.InstanceInfo
	125, // 81: akuity.argocd.v1.InstanceAccount.capabilities:type_name -> akuity.argocd.v1.InstanceAccountCapabilities
	97,  // 82: akuity.argocd.v1.InstanceInfo.applications_status:type_name -> akuity.argocd.v1.ApplicationsStatus
	118, // 83: akuity.argocd.v1.CrossplaneExtension.resources:type_name -> akuity.argocd.v1.CrossplaneExtensionResource
	127, // 84: akuity.argocd.v1.InstanceSpec.ip_allow_list:type_name -> akuity.argocd.v1.IPAllowListEntry
	103, // 85: akuity.argocd.v1.InstanceSpec.extensions:type_name -> akuity.argocd.v1.ArgoCDExtensionInstallEntry
	112, // 86: akuity.argocd.v1.InstanceSpec.cluster_customization_defaults:type_name -> akuity.argocd.v1.ClusterCustomization
	122, // 87: akuity.argocd.v1.InstanceSpec.repo_server_delegate:type_name -> akuity.argocd.v1.RepoServerDelegate
	119, // 88: akuity.argocd.v1.InstanceSpec.crossplane_extension:type_name -> akuity.argocd.v1.CrossplaneExtension
	123, // 89: akuity.argocd.v1.InstanceSpec.image_updater_delegate:type_name -> akuity.argocd.v1.ImageUpdaterDelegate
	124, // 90: akuity.argocd.v1.InstanceSpec.app_set_delegate:type_name -> akuity.argocd.v1.AppSetDelegate
	116, // 91: akuity.argocd.v1.InstanceSpec.appset_policy:type_name -> akuity.argocd.v1.AppsetPolicy
	128, // 92: akuity.argocd.v1.InstanceSpec.host_aliases:type_name -> akuity.argocd.v1.HostAliases
	117, // 93: akuity.argocd.v1.InstanceSpec.agent_permissions_rules:type_name -> akuity.argocd.v1.AgentPermissionsRule
	121, // 94: akuity.argocd.v1.RepoServerDelegate.managed_cluster:type_name -> akuity.argocd.v1.ManagedCluster
	121, // 95: akuity.argocd.v1.ImageUpdaterDelegate.managed_cluster:type_name -> akuity.argocd.v1.ManagedCluster
	121, // 96: akuity.argocd.v1.AppSetDelegate.managed_cluster:type_name -> akuity.argocd.v1.ManagedCluster
	186, // 97: akuity.argocd.v1.AgentState.observe_time:type_name -> google.protobuf.Timestamp
	187, // 98: akuity.argocd.v1.AgentState.status:type_name -> akuity.types.status.health.v1.AgentAggregatedHealthResponse
	3,   // 99: akuity.argocd.v1.DirectClusterSpec.cluster_type:type_name -> akuity.argocd.v1.DirectClusterType
	2,   // 100: akuity.argocd.v1.ClusterData.size:type_name -> akuity.argocd.v1.ClusterSize
	175, // 101: akuity.argocd.v1.ClusterData.labels:type_name -> akuity.argocd.v1.ClusterData.LabelsEntry
	176, // 102: akuity.argocd.v1.ClusterData.annotations:type_name -> akuity.argocd.v1.ClusterData.AnnotationsEntry
	180, // 103: akuity.argocd.v1.ClusterData.kustomization:type_name -> google.protobuf.Struct
	130, // 104: akuity.argocd.v1.ClusterData.direct_cluster_spec:type_name -> akuity.argocd.v1.DirectClusterSpec
	131, // 105: akuity.argocd.v1.Cluster.data:type_name -> akuity.argocd.v1.ClusterData
	186, // 106: akuity.argocd.v1.Cluster.delete_time:type_name -> google.protobuf.Timestamp
	129, // 107: akuity.argocd.v1.Cluster.agent_state:type_name -> akuity.argocd.v1.AgentState
	184, // 108: akuity.argocd.v1.Cluster.health_status:type_name -> akuity.types.status.health.v1.Status
	185, // 109: akuity.argocd.v1.Cluster.reconciliation_status:type_name -> akuity.types.status.reconciliation.v1.Status
	179, // 110: akuity.argocd.v1.ApplyInstanceRequest.id_type:type_name -> akuity.types.id.v1.Type
	180, // 111: akuity.argocd.v1.ApplyInstanceRequest.argocd:type_name -> google.protobuf.Struct
	180, // 112: akuity.argocd.v1.ApplyInstanceRequest.argocd_configmap:type_name -> google.protobuf.Struct
	180, // 113: akuity.argocd.v1.ApplyInstanceRequest.argocd_rbac_configmap:type_name -> google.protobuf.Struct
	180, // 114: akuity.argocd.v1.ApplyInstanceRequest.argocd_secret:type_name -> google.protobuf.Struct
	180, // 115: akuity.argocd.v1.ApplyInstanceRequest.notifications_configmap:type_name -> google.protobuf.Struct
	180, // 116: akuity.argocd.v1.ApplyInstanceRequest.notifications_secret:type_name -> google.protobuf.Struct
	180, // 117: akuity.argocd.v1.ApplyInstanceRequest.image_updater_configmap:type_name -> google.protobuf.Struct
	180, // 118: akuity.argocd.v1.ApplyInstanceRequest.image_updater_ssh_configmap:type_name -> google.protobuf.Struct
	180, // 119: akuity.argocd.v1.ApplyInstanceRequest.image_updater_secret:type_name -> google.protobuf.Struct
	180, // 120: akuity.argocd.v1.ApplyInstanceRequest.clusters:type_name -> google.protobuf.Struct
	180, // 121: akuity.argocd.v1.ApplyInstanceRequest.argocd_known_hosts_configmap:type_name -> google.protobuf.Struct
	180, // 122: akuity.argocd.v1.ApplyInstanceRequest.argocd_tls_certs_configmap:type_name -> google.protobuf.Struct
	180, // 123: akuity.argocd.v1.ApplyInstanceRequest.repo_credential_secrets:type_name -> google.protobuf.Struct
	180, // 124: akuity.argocd.v1.ApplyInstanceRequest.repo_template_credential_secrets:type_name -> google.protobuf.Struct
	180, // 125: akuity.argocd.v1.ApplyInstanceRequest.config_management_plugins:type_name -> google.protobuf.Struct
	4,   // 126: akuity.argocd.v1.ApplyInstanceRequest.prune_resource_types:type_name -> akuity.argocd.v1.PruneResourceType
	180, // 127: akuity.argocd.v1.ApplyInstanceRequest.application_set_secret:type_name -> google.protobuf.Struct
	180, // 128: akuity.argocd.v1.ApplyInstanceRequest.applications:type_name -> google.protobuf.Struct
	180, // 129: akuity.argocd.v1.ApplyInstanceRequest.application_sets:type_name -> google.protobuf.Struct
	180, // 130: akuity.argocd.v1.ApplyInstanceRequest.app_projects:type_name -> google.protobuf.Struct
	179, // 131: akuity.argocd.v1.ExportInstanceRequest.id_type:type_name -> akuity.types.id.v1.Type
	180, // 132: akuity.argocd.v1.ExportInstanceResponse.argocd:type_name -> google.protobuf.Struct
	180, // 133: akuity.argocd.v1.ExportInstanceResponse.argocd_configmap:type_name -> google.protobuf.Struct
	180, // 134: akuity.argocd.v1.ExportInstanceResponse.argocd_rbac_configmap:type_name -> google.protobuf.Struct
	180, // 135: akuity.argocd.v1.ExportInstanceResponse.notifications_configmap:type_name -> google.protobuf.Struct
	180, // 136: akuity.argocd.v1.ExportInstanceResponse.image_updater_configmap:type_name -> google.protobuf.Struct
	180, // 137: akuity.argocd.v1.ExportInstanceResponse.image_updater_ssh_configmap:type_name -> google.protobuf.Struct
	180, // 138: akuity.argocd.v1.ExportInstanceResponse.clusters:type_name -> google.protobuf.Struct
	180, // 139: akuity.argocd.v1.ExportInstanceResponse.argocd_known_hosts_configmap:type_name -> google.protobuf.Struct
	180, // 140: akuity.argocd.v1.ExportInstanceResponse.argocd_tls_certs_configmap:type_name -> google.protobuf.Struct
	180, // 141: akuity.argocd.v1.ExportInstanceResponse.config_management_plugins:type_name -> google.protobuf.Struct
	180, // 142: akuity.argocd.v1.ExportInstanceResponse.applications:type_name -> google.protobuf.Struct
	180, // 143: akuity.argocd.v1.ExportInstanceResponse.application_sets:type_name -> google.protobuf.Struct
	180, // 144: akuity.argocd.v1.ExportInstanceResponse.app_projects:type_name -> google.protobuf.Struct
	5,   // 145: akuity.argocd.v1.GetInstanceClusterCommandRequest.command_for:type_name -> akuity.argocd.v1.ClusterCommandFor
	177, // 146: akuity.argocd.v1.GetInstanceClusterCommandResponse.variables:type_name -> akuity.argocd.v1.GetInstanceClusterCommandResponse.VariablesEntry
	140, // 147: akuity.argocd.v1.ConfigManagementPlugin.spec:type_name -> akuity.argocd.v1.PluginSpec
	141, // 148: akuity.argocd.v1.PluginSpec.init:type_name -> akuity.argocd.v1.Command
	141, // 149: akuity.argocd.v1.PluginSpec.generate:type_name -> akuity.argocd.v1.Command
	142, // 150: akuity.argocd.v1.PluginSpec.discover:type_name -> akuity.argocd.v1.Discover
	144, // 151: akuity.argocd.v1.PluginSpec.parameters:type_name -> akuity.argocd.v1.Parameters
	143, // 152: akuity.argocd.v1.Discover.find:type_name -> akuity.argocd.v1.Find
	146, // 153: akuity.argocd.v1.Parameters.static:type_name -> akuity.argocd.v1.ParameterAnnouncement
	145, // 154: akuity.argocd.v1.Parameters.dynamic:type_name -> akuity.argocd.v1.Dynamic
	178, // 155: akuity.argocd.v1.ParameterAnnouncement.map:type_name -> akuity.argocd.v1.ParameterAnnouncement.MapEntry
	139, // 156: akuity.argocd.v1.GetInstanceConfigManagementPluginsResponse.plugins:type_name -> akuity.argocd.v1.ConfigManagementPlugin
	139, // 157: akuity.argocd.v1.UpdateInstanceConfigManagementPluginsRequest.plugins:type_name -> akuity.argocd.v1.ConfigManagementPlugin
	158, // 158: akuity.argocd.v1.PatchInstanceSecretRequest.SecretEntry.value:type_name -> akuity.argocd.v1.PatchInstanceSecretRequest.ValueField
	160, // 159: akuity.argocd.v1.PatchInstanceNotificationSecretRequest.SecretEntry.value:type_name -> akuity.argocd.v1.PatchInstanceNotificationSecretRequest.ValueField
	162, // 160: akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.SecretEntry.value:type_name -> akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest.ValueField
	164, // 161: akuity.argocd.v1.PatchInstanceAppsetSecretRequest.SecretEntry.value:type_name -> akuity.argocd.v1.PatchInstanceAppsetSecretRequest.ValueField
	6,   // 162: akuity.argocd.v1.ArgoCDService.ListInstanceVersions:input_type -> akuity.argocd.v1.ListInstanceVersionsRequest
	8,   // 163: akuity.argocd.v1.ArgoCDService.ListInstances:input_type -> akuity.argocd.v1.ListInstancesRequest
	76,  // 164: akuity.argocd.v1.ArgoCDService.WatchInstances:input_type -> akuity.argocd.v1.WatchInstancesRequest
	10,  // 165: akuity.argocd.v1.ArgoCDService.CreateInstance:input_type -> akuity.argocd.v1.CreateInstanceRequest
	12,  // 166: akuity.argocd.v1.ArgoCDService.GetInstance:input_type -> akuity.argocd.v1.GetInstanceRequest
	14,  // 167: akuity.argocd.v1.ArgoCDService.GetInstanceCSS:input_type -> akuity.argocd.v1.GetInstanceCSSRequest
	16,  // 168: akuity.argocd.v1.ArgoCDService.GetInstanceNotificationSettings:input_type -> akuity.argocd.v1.GetInstanceNotificationSettingsRequest
	18,  // 169: akuity.argocd.v1.ArgoCDService.GetInstanceNotificationCatalog:input_type -> akuity.argocd.v1.GetInstanceNotificationCatalogRequest
	20,  // 170: akuity.argocd.v1.ArgoCDService.GetInstanceImageUpdaterSettings:input_type -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsRequest
	23,  // 171: akuity.argocd.v1.ArgoCDService.GetInstanceResourceCustomizations:input_type -> akuity.argocd.v1.GetInstanceResourceCustomizationsRequest
	147, // 172: akuity.argocd.v1.ArgoCDService.GetInstanceConfigManagementPlugins:input_type -> akuity.argocd.v1.GetInstanceConfigManagementPluginsRequest
	25,  // 173: akuity.argocd.v1.ArgoCDService.PatchInstance:input_type -> akuity.argocd.v1.PatchInstanceRequest
	27,  // 174: akuity.argocd.v1.ArgoCDService.PatchInstanceSecret:input_type -> akuity.argocd.v1.PatchInstanceSecretRequest
	29,  // 175: akuity.argocd.v1.ArgoCDService.PatchInstanceNotificationSecret:input_type -> akuity.argocd.v1.PatchInstanceNotificationSecretRequest
	31,  // 176: akuity.argocd.v1.ArgoCDService.PatchInstanceImageUpdaterSecret:input_type -> akuity.argocd.v1.PatchInstanceImageUpdaterSecretRequest
	35,  // 177: akuity.argocd.v1.ArgoCDService.GetInstanceAppsetSecret:input_type -> akuity.argocd.v1.GetInstanceAppsetSecretRequest
	33,  // 178: akuity.argocd.v1.ArgoCDService.PatchInstanceAppsetSecret:input_type -> akuity.argocd.v1.PatchInstanceAppsetSecretRequest
	37,  // 179: akuity.argocd.v1.ArgoCDService.UpdateInstance:input_type -> akuity.argocd.v1.UpdateInstanceRequest
	39,  // 180: akuity.argocd.v1.ArgoCDService.UpdateInstanceCSS:input_type -> akuity.argocd.v1.UpdateInstanceCSSRequest
	41,  // 181: akuity.argocd.v1.ArgoCDService.UpdateInstanceNotificationConfig:input_type -> akuity.argocd.v1.UpdateInstanceNotificationConfigRequest
	43,  // 182: akuity.argocd.v1.ArgoCDService.UpdateInstanceImageUpdaterConfig:input_type -> akuity.argocd.v1.UpdateInstanceImageUpdaterConfigRequest
	45,  // 183: akuity.argocd.v1.ArgoCDService.UpdateInstanceImageUpdaterSSHConfig:input_type -> akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigRequest
	47,  // 184: akuity.argocd.v1.ArgoCDService.UpdateInstanceResourceCustomizations:input_type -> akuity.argocd.v1.UpdateInstanceResourceCustomizationsRequest
	149, // 185: akuity.argocd.v1.ArgoCDService.UpdateInstanceConfigManagementPlugins:input_type -> akuity.argocd.v1.UpdateInstanceConfigManagementPluginsRequest
	49,  // 186: akuity.argocd.v1.ArgoCDService.DeleteInstance:input_type -> akuity.argocd.v1.DeleteInstanceRequest
	51,  // 187: akuity.argocd.v1.ArgoCDService.ListInstanceAccounts:input_type -> akuity.argocd.v1.ListInstanceAccountsRequest
	53,  // 188: akuity.argocd.v1.ArgoCDService.UpsertInstanceAccount:input_type -> akuity.argocd.v1.UpsertInstanceAccountRequest
	55,  // 189: akuity.argocd.v1.ArgoCDService.UpdateInstanceAccountPassword:input_type -> akuity.argocd.v1.UpdateInstanceAccountPasswordRequest
	57,  // 190: akuity.argocd.v1.ArgoCDService.RegenerateInstanceAccountPassword:input_type -> akuity.argocd.v1.RegenerateInstanceAccountPasswordRequest
	59,  // 191: akuity.argocd.v1.ArgoCDService.DeleteInstanceAccount:input_type -> akuity.argocd.v1.DeleteInstanceAccountRequest
	74,  // 192: akuity.argocd.v1.ArgoCDService.ListInstanceClusters:input_type -> akuity.argocd.v1.ListInstanceClustersRequest
	75,  // 193: akuity.argocd.v1.ArgoCDService.WatchInstanceClusters:input_type -> akuity.argocd.v1.WatchInstanceClustersRequest
	80,  // 194: akuity.argocd.v1.ArgoCDService.CreateInstanceCluster:input_type -> akuity.argocd.v1.CreateInstanceClusterRequest
	82,  // 195: akuity.argocd.v1.ArgoCDService.GetInstanceCluster:input_type -> akuity.argocd.v1.GetInstanceClusterRequest
	82,  // 196: akuity.argocd.v1.ArgoCDService.GetInstanceClusterInfo:input_type -> akuity.argocd.v1.GetInstanceClusterRequest
	85,  // 197: akuity.argocd.v1.ArgoCDService.GetInstanceClusterManifests:input_type -> akuity.argocd.v1.GetInstanceClusterManifestsRequest
	86,  // 198: akuity.argocd.v1.ArgoCDService.UpdateInstanceCluster:input_type -> akuity.argocd.v1.UpdateInstanceClusterRequest
	88,  // 199: akuity.argocd.v1.ArgoCDService.UpdateInstanceClusters:input_type -> akuity.argocd.v1.UpdateInstanceClustersRequest
	90,  // 200: akuity.argocd.v1.ArgoCDService.UpdateInstanceClustersAgentVersion:input_type -> akuity.argocd.v1.UpdateInstanceClustersAgentVersionRequest
	91,  // 201: akuity.argocd.v1.ArgoCDService.RotateInstanceClusterCredentials:input_type -> akuity.argocd.v1.RotateInstanceClusterCredentialsRequest
	93,  // 202: akuity.argocd.v1.ArgoCDService.DeleteInstanceCluster:input_type -> akuity.argocd.v1.DeleteInstanceClusterRequest
	137, // 203: akuity.argocd.v1.ArgoCDService.GetInstanceClusterCommand:input_type -> akuity.argocd.v1.GetInstanceClusterCommandRequest
	61,  // 204: akuity.argocd.v1.ArgoCDService.GetAIAssistantUsageStats:input_type -> akuity.argocd.v1.GetAIAssistantUsageStatsRequest
	63,  // 205: akuity.argocd.v1.ArgoCDService.GetSyncOperationsStats:input_type -> akuity.argocd.v1.GetSyncOperationsStatsRequest
	64,  // 206: akuity.argocd.v1.ArgoCDService.GetSyncOperationsEvents:input_type -> akuity.argocd.v1.GetSyncOperationsEventsRequest
	133, // 207: akuity.argocd.v1.ArgoCDService.ApplyInstance:input_type -> akuity.argocd.v1.ApplyInstanceRequest
	135, // 208: akuity.argocd.v1.ArgoCDService.ExportInstance:input_type -> akuity.argocd.v1.ExportInstanceRequest
	7,   // 209: akuity.argocd.v1.ArgoCDService.ListInstanceVersions:output_type -> akuity.argocd.v1.ListInstanceVersionsResponse
	9,   // 210: akuity.argocd.v1.ArgoCDService.ListInstances:output_type -> akuity.argocd.v1.ListInstancesResponse
	77,  // 211: akuity.argocd.v1.ArgoCDService.WatchInstances:output_type -> akuity.argocd.v1.WatchInstancesResponse
	11,  // 212: akuity.argocd.v1.ArgoCDService.CreateInstance:output_type -> akuity.argocd.v1.CreateInstanceResponse
	13,  // 213: akuity.argocd.v1.ArgoCDService.GetInstance:output_type -> akuity.argocd.v1.GetInstanceResponse
	15,  // 214: akuity.argocd.v1.ArgoCDService.GetInstanceCSS:output_type -> akuity.argocd.v1.GetInstanceCSSResponse
	17,  // 215: akuity.argocd.v1.ArgoCDService.GetInstanceNotificationSettings:output_type -> akuity.argocd.v1.GetInstanceNotificationSettingsResponse
	19,  // 216: akuity.argocd.v1.ArgoCDService.GetInstanceNotificationCatalog:output_type -> akuity.argocd.v1.GetInstanceNotificationCatalogResponse
	21,  // 217: akuity.argocd.v1.ArgoCDService.GetInstanceImageUpdaterSettings:output_type -> akuity.argocd.v1.GetInstanceImageUpdaterSettingsResponse
	24,  // 218: akuity.argocd.v1.ArgoCDService.GetInstanceResourceCustomizations:output_type -> akuity.argocd.v1.GetInstanceResourceCustomizationsResponse
	148, // 219: akuity.argocd.v1.ArgoCDService.GetInstanceConfigManagementPlugins:output_type -> akuity.argocd.v1.GetInstanceConfigManagementPluginsResponse
	26,  // 220: akuity.argocd.v1.ArgoCDService.PatchInstance:output_type -> akuity.argocd.v1.PatchInstanceResponse
	28,  // 221: akuity.argocd.v1.ArgoCDService.PatchInstanceSecret:output_type -> akuity.argocd.v1.PatchInstanceSecretResponse
	30,  // 222: akuity.argocd.v1.ArgoCDService.PatchInstanceNotificationSecret:output_type -> akuity.argocd.v1.PatchInstanceNotificationSecretResponse
	32,  // 223: akuity.argocd.v1.ArgoCDService.PatchInstanceImageUpdaterSecret:output_type -> akuity.argocd.v1.PatchInstanceImageUpdaterSecretResponse
	36,  // 224: akuity.argocd.v1.ArgoCDService.GetInstanceAppsetSecret:output_type -> akuity.argocd.v1.GetInstanceAppsetSecretResponse
	34,  // 225: akuity.argocd.v1.ArgoCDService.PatchInstanceAppsetSecret:output_type -> akuity.argocd.v1.PatchInstanceAppsetSecretResponse
	38,  // 226: akuity.argocd.v1.ArgoCDService.UpdateInstance:output_type -> akuity.argocd.v1.UpdateInstanceResponse
	40,  // 227: akuity.argocd.v1.ArgoCDService.UpdateInstanceCSS:output_type -> akuity.argocd.v1.UpdateInstanceCSSResponse
	42,  // 228: akuity.argocd.v1.ArgoCDService.UpdateInstanceNotificationConfig:output_type -> akuity.argocd.v1.UpdateInstanceNotificationConfigResponse
	44,  // 229: akuity.argocd.v1.ArgoCDService.UpdateInstanceImageUpdaterConfig:output_type -> akuity.argocd.v1.UpdateInstanceImageUpdaterConfigResponse
	46,  // 230: akuity.argocd.v1.ArgoCDService.UpdateInstanceImageUpdaterSSHConfig:output_type -> akuity.argocd.v1.UpdateInstanceImageUpdaterSSHConfigResponse
	48,  // 231: akuity.argocd.v1.ArgoCDService.UpdateInstanceResourceCustomizations:output_type -> akuity.argocd.v1.UpdateInstanceResourceCustomizationsResponse
	150, // 232: akuity.argocd.v1.ArgoCDService.UpdateInstanceConfigManagementPlugins:output_type -> akuity.argocd.v1.UpdateInstanceConfigManagementPluginsResponse
	50,  // 233: akuity.argocd.v1.ArgoCDService.DeleteInstance:output_type -> akuity.argocd.v1.DeleteInstanceResponse
	52,  // 234: akuity.argocd.v1.ArgoCDService.ListInstanceAccounts:output_type -> akuity.argocd.v1.ListInstanceAccountsResponse
	54,  // 235: akuity.argocd.v1.ArgoCDService.UpsertInstanceAccount:output_type -> akuity.argocd.v1.UpsertInstanceAccountResponse
	56,  // 236: akuity.argocd.v1.ArgoCDService.UpdateInstanceAccountPassword:output_type -> akuity.argocd.v1.UpdateInstanceAccountPasswordResponse
	58,  // 237: akuity.argocd.v1.ArgoCDService.RegenerateInstanceAccountPassword:output_type -> akuity.argocd.v1.RegenerateInstanceAccountPasswordResponse
	60,  // 238: akuity.argocd.v1.ArgoCDService.DeleteInstanceAccount:output_type -> akuity.argocd.v1.DeleteInstanceAccountResponse
	79,  // 239: akuity.argocd.v1.ArgoCDService.ListInstanceClusters:output_type -> akuity.argocd.v1.ListInstanceClustersResponse
	78,  // 240: akuity.argocd.v1.ArgoCDService.WatchInstanceClusters:output_type -> akuity.argocd.v1.WatchInstanceClustersResponse
	81,  // 241: akuity.argocd.v1.ArgoCDService.CreateInstanceCluster:output_type -> akuity.argocd.v1.CreateInstanceClusterResponse
	83,  // 242: akuity.argocd.v1.ArgoCDService.GetInstanceCluster:output_type -> akuity.argocd.v1.GetInstanceClusterResponse
	84,  // 243: akuity.argocd.v1.ArgoCDService.GetInstanceClusterInfo:output_type -> akuity.argocd.v1.GetInstanceClusterInfoResponse
	188, // 244: akuity.argocd.v1.ArgoCDService.GetInstanceClusterManifests:output_type -> google.api.HttpBody
	87,  // 245: akuity.argocd.v1.ArgoCDService.UpdateInstanceCluster:output_type -> akuity.argocd.v1.UpdateInstanceClusterResponse
	89,  // 246: akuity.argocd.v1.ArgoCDService.UpdateInstanceClusters:output_type -> akuity.argocd.v1.UpdateInstanceClustersResponse
	189, // 247: akuity.argocd.v1.ArgoCDService.UpdateInstanceClustersAgentVersion:output_type -> google.protobuf.Empty
	92,  // 248: akuity.argocd.v1.ArgoCDService.RotateInstanceClusterCredentials:output_type -> akuity.argocd.v1.RotateInstanceClusterCredentialsResponse
	94,  // 249: akuity.argocd.v1.ArgoCDService.DeleteInstanceCluster:output_type -> akuity.argocd.v1.DeleteInstanceClusterResponse
	138, // 250: akuity.argocd.v1.ArgoCDService.GetInstanceClusterCommand:output_type -> akuity.argocd.v1.GetInstanceClusterCommandResponse
	62,  // 251: akuity.argocd.v1.ArgoCDService.GetAIAssistantUsageStats:output_type -> akuity.argocd.v1.GetAIAssistantUsageStatsResponse
	71,  // 252: akuity.argocd.v1.ArgoCDService.GetSyncOperationsStats:output_type -> akuity.argocd.v1.GetSyncOperationsStatsResponse
	72,  // 253: akuity.argocd.v1.ArgoCDService.GetSyncOperationsEvents:output_type -> akuity.argocd.v1.GetSyncOperationsEventsResponse
	134, // 254: akuity.argocd.v1.ArgoCDService.ApplyInstance:output_type -> akuity.argocd.v1.ApplyInstanceResponse
	136, // 255: akuity.argocd.v1.ArgoCDService.ExportInstance:output_type -> akuity.argocd.v1.ExportInstanceResponse
	209, // [209:256] is the sub-list for method output_type
	162, // [162:209] is the sub-list for method input_type
	162, // [162:162] is the sub-list for extension type_name
	162, // [162:162] is the sub-list for extension extendee
	0,   // [0:162] is the sub-list for field type_name
}

func init() { file_argocd_v1_argocd_proto_init() }
func file_argocd_v1_argocd_proto_init() {
	if File_argocd_v1_argocd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_argocd_v1_argocd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceCSSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceCSSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceNotificationSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceNotificationSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceNotificationCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceNotificationCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceImageUpdaterSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceImageUpdaterSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCustomizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceResourceCustomizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceResourceCustomizationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceNotificationSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceNotificationSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceImageUpdaterSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceImageUpdaterSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceAppsetSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceAppsetSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceAppsetSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceAppsetSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceCSSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceCSSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceNotificationConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceNotificationConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceImageUpdaterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceImageUpdaterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceImageUpdaterSSHConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceImageUpdaterSSHConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceResourceCustomizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceResourceCustomizationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertInstanceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertInstanceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceAccountPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceAccountPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateInstanceAccountPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateInstanceAccountPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAIAssistantUsageStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAIAssistantUsageStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncOperationsStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncOperationsEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOperationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOperationStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOperationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOperationEventDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationInitiator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncOperationsStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncOperationsEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstanceClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInstanceClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterManifestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceClustersAgentVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateInstanceClusterCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateInstanceClusterCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsSyncStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDDeepLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDAlertConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDBannerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDExtensionInstallEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDGoogleAnalyticsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDHelmSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDKustomizeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDStatusBadgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDRBACConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDResourceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDWebTerminalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCustomization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppsetPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentPermissionsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossplaneExtensionResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossplaneExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoServerDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageUpdaterDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSetDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAccountCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAllowListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostAliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceClusterCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigManagementPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Find); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceConfigManagementPluginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceConfigManagementPluginsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceConfigManagementPluginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceConfigManagementPluginsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceSecretRequest_ValueField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceNotificationSecretRequest_ValueField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceImageUpdaterSecretRequest_ValueField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_argocd_v1_argocd_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceAppsetSecretRequest_ValueField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_argocd_v1_argocd_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[92].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[93].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[99].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[101].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[107].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[114].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[123].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[124].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[125].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[126].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[131].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[152].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[154].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[156].OneofWrappers = []interface{}{}
	file_argocd_v1_argocd_proto_msgTypes[158].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_argocd_v1_argocd_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   173,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_argocd_v1_argocd_proto_goTypes,
		DependencyIndexes: file_argocd_v1_argocd_proto_depIdxs,
		EnumInfos:         file_argocd_v1_argocd_proto_enumTypes,
		MessageInfos:      file_argocd_v1_argocd_proto_msgTypes,
	}.Build()
	File_argocd_v1_argocd_proto = out.File
	file_argocd_v1_argocd_proto_rawDesc = nil
	file_argocd_v1_argocd_proto_goTypes = nil
	file_argocd_v1_argocd_proto_depIdxs = nil
}
