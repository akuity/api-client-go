// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package argocdv1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArgoCDServiceClient is the client API for ArgoCDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArgoCDServiceClient interface {
	ListInstanceVersions(ctx context.Context, in *ListInstanceVersionsRequest, opts ...grpc.CallOption) (*ListInstanceVersionsResponse, error)
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	WatchInstances(ctx context.Context, in *WatchInstancesRequest, opts ...grpc.CallOption) (ArgoCDService_WatchInstancesClient, error)
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error)
	GetInstanceCSS(ctx context.Context, in *GetInstanceCSSRequest, opts ...grpc.CallOption) (*GetInstanceCSSResponse, error)
	GetInstanceNotificationSettings(ctx context.Context, in *GetInstanceNotificationSettingsRequest, opts ...grpc.CallOption) (*GetInstanceNotificationSettingsResponse, error)
	GetInstanceNotificationCatalog(ctx context.Context, in *GetInstanceNotificationCatalogRequest, opts ...grpc.CallOption) (*GetInstanceNotificationCatalogResponse, error)
	GetInstanceImageUpdaterSettings(ctx context.Context, in *GetInstanceImageUpdaterSettingsRequest, opts ...grpc.CallOption) (*GetInstanceImageUpdaterSettingsResponse, error)
	GetInstanceResourceCustomizations(ctx context.Context, in *GetInstanceResourceCustomizationsRequest, opts ...grpc.CallOption) (*GetInstanceResourceCustomizationsResponse, error)
	PatchInstance(ctx context.Context, in *PatchInstanceRequest, opts ...grpc.CallOption) (*PatchInstanceResponse, error)
	PatchInstanceSecret(ctx context.Context, in *PatchInstanceSecretRequest, opts ...grpc.CallOption) (*PatchInstanceSecretResponse, error)
	PatchInstanceNotificationSecret(ctx context.Context, in *PatchInstanceNotificationSecretRequest, opts ...grpc.CallOption) (*PatchInstanceNotificationSecretResponse, error)
	PatchInstanceImageUpdaterSecret(ctx context.Context, in *PatchInstanceImageUpdaterSecretRequest, opts ...grpc.CallOption) (*PatchInstanceImageUpdaterSecretResponse, error)
	UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*UpdateInstanceResponse, error)
	UpdateInstanceCSS(ctx context.Context, in *UpdateInstanceCSSRequest, opts ...grpc.CallOption) (*UpdateInstanceCSSResponse, error)
	UpdateInstanceNotificationConfig(ctx context.Context, in *UpdateInstanceNotificationConfigRequest, opts ...grpc.CallOption) (*UpdateInstanceNotificationConfigResponse, error)
	UpdateInstanceImageUpdaterConfig(ctx context.Context, in *UpdateInstanceImageUpdaterConfigRequest, opts ...grpc.CallOption) (*UpdateInstanceImageUpdaterConfigResponse, error)
	UpdateInstanceImageUpdaterSSHConfig(ctx context.Context, in *UpdateInstanceImageUpdaterSSHConfigRequest, opts ...grpc.CallOption) (*UpdateInstanceImageUpdaterSSHConfigResponse, error)
	UpdateInstanceResourceCustomizations(ctx context.Context, in *UpdateInstanceResourceCustomizationsRequest, opts ...grpc.CallOption) (*UpdateInstanceResourceCustomizationsResponse, error)
	DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error)
	ListInstanceAccounts(ctx context.Context, in *ListInstanceAccountsRequest, opts ...grpc.CallOption) (*ListInstanceAccountsResponse, error)
	UpsertInstanceAccount(ctx context.Context, in *UpsertInstanceAccountRequest, opts ...grpc.CallOption) (*UpsertInstanceAccountResponse, error)
	UpdateInstanceAccountPassword(ctx context.Context, in *UpdateInstanceAccountPasswordRequest, opts ...grpc.CallOption) (*UpdateInstanceAccountPasswordResponse, error)
	RegenerateInstanceAccountPassword(ctx context.Context, in *RegenerateInstanceAccountPasswordRequest, opts ...grpc.CallOption) (*RegenerateInstanceAccountPasswordResponse, error)
	DeleteInstanceAccount(ctx context.Context, in *DeleteInstanceAccountRequest, opts ...grpc.CallOption) (*DeleteInstanceAccountResponse, error)
	ListInstanceClusters(ctx context.Context, in *ListInstanceClustersRequest, opts ...grpc.CallOption) (*ListInstanceClustersResponse, error)
	WatchInstanceClusters(ctx context.Context, in *WatchInstanceClustersRequest, opts ...grpc.CallOption) (ArgoCDService_WatchInstanceClustersClient, error)
	CreateInstanceCluster(ctx context.Context, in *CreateInstanceClusterRequest, opts ...grpc.CallOption) (*CreateInstanceClusterResponse, error)
	GetInstanceCluster(ctx context.Context, in *GetInstanceClusterRequest, opts ...grpc.CallOption) (*GetInstanceClusterResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetInstanceClusterManifests(ctx context.Context, in *GetInstanceClusterManifestsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	UpdateInstanceCluster(ctx context.Context, in *UpdateInstanceClusterRequest, opts ...grpc.CallOption) (*UpdateInstanceClusterResponse, error)
	UpdateInstanceClusters(ctx context.Context, in *UpdateInstanceClustersRequest, opts ...grpc.CallOption) (*UpdateInstanceClustersResponse, error)
	DeleteInstanceCluster(ctx context.Context, in *DeleteInstanceClusterRequest, opts ...grpc.CallOption) (*DeleteInstanceClusterResponse, error)
	GetSyncOperationsStats(ctx context.Context, in *GetSyncOperationsStatsRequest, opts ...grpc.CallOption) (*GetSyncOperationsStatsResponse, error)
}

type argoCDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArgoCDServiceClient(cc grpc.ClientConnInterface) ArgoCDServiceClient {
	return &argoCDServiceClient{cc}
}

func (c *argoCDServiceClient) ListInstanceVersions(ctx context.Context, in *ListInstanceVersionsRequest, opts ...grpc.CallOption) (*ListInstanceVersionsResponse, error) {
	out := new(ListInstanceVersionsResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/ListInstanceVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/ListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) WatchInstances(ctx context.Context, in *WatchInstancesRequest, opts ...grpc.CallOption) (ArgoCDService_WatchInstancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArgoCDService_ServiceDesc.Streams[0], "/akuity.argocd.v1.ArgoCDService/WatchInstances", opts...)
	if err != nil {
		return nil, err
	}
	x := &argoCDServiceWatchInstancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArgoCDService_WatchInstancesClient interface {
	Recv() (*WatchInstancesResponse, error)
	grpc.ClientStream
}

type argoCDServiceWatchInstancesClient struct {
	grpc.ClientStream
}

func (x *argoCDServiceWatchInstancesClient) Recv() (*WatchInstancesResponse, error) {
	m := new(WatchInstancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *argoCDServiceClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	out := new(CreateInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/CreateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error) {
	out := new(GetInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetInstanceCSS(ctx context.Context, in *GetInstanceCSSRequest, opts ...grpc.CallOption) (*GetInstanceCSSResponse, error) {
	out := new(GetInstanceCSSResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetInstanceCSS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetInstanceNotificationSettings(ctx context.Context, in *GetInstanceNotificationSettingsRequest, opts ...grpc.CallOption) (*GetInstanceNotificationSettingsResponse, error) {
	out := new(GetInstanceNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetInstanceNotificationSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetInstanceNotificationCatalog(ctx context.Context, in *GetInstanceNotificationCatalogRequest, opts ...grpc.CallOption) (*GetInstanceNotificationCatalogResponse, error) {
	out := new(GetInstanceNotificationCatalogResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetInstanceNotificationCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetInstanceImageUpdaterSettings(ctx context.Context, in *GetInstanceImageUpdaterSettingsRequest, opts ...grpc.CallOption) (*GetInstanceImageUpdaterSettingsResponse, error) {
	out := new(GetInstanceImageUpdaterSettingsResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetInstanceImageUpdaterSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetInstanceResourceCustomizations(ctx context.Context, in *GetInstanceResourceCustomizationsRequest, opts ...grpc.CallOption) (*GetInstanceResourceCustomizationsResponse, error) {
	out := new(GetInstanceResourceCustomizationsResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetInstanceResourceCustomizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) PatchInstance(ctx context.Context, in *PatchInstanceRequest, opts ...grpc.CallOption) (*PatchInstanceResponse, error) {
	out := new(PatchInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/PatchInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) PatchInstanceSecret(ctx context.Context, in *PatchInstanceSecretRequest, opts ...grpc.CallOption) (*PatchInstanceSecretResponse, error) {
	out := new(PatchInstanceSecretResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/PatchInstanceSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) PatchInstanceNotificationSecret(ctx context.Context, in *PatchInstanceNotificationSecretRequest, opts ...grpc.CallOption) (*PatchInstanceNotificationSecretResponse, error) {
	out := new(PatchInstanceNotificationSecretResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/PatchInstanceNotificationSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) PatchInstanceImageUpdaterSecret(ctx context.Context, in *PatchInstanceImageUpdaterSecretRequest, opts ...grpc.CallOption) (*PatchInstanceImageUpdaterSecretResponse, error) {
	out := new(PatchInstanceImageUpdaterSecretResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/PatchInstanceImageUpdaterSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*UpdateInstanceResponse, error) {
	out := new(UpdateInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateInstanceCSS(ctx context.Context, in *UpdateInstanceCSSRequest, opts ...grpc.CallOption) (*UpdateInstanceCSSResponse, error) {
	out := new(UpdateInstanceCSSResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateInstanceCSS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateInstanceNotificationConfig(ctx context.Context, in *UpdateInstanceNotificationConfigRequest, opts ...grpc.CallOption) (*UpdateInstanceNotificationConfigResponse, error) {
	out := new(UpdateInstanceNotificationConfigResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateInstanceNotificationConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateInstanceImageUpdaterConfig(ctx context.Context, in *UpdateInstanceImageUpdaterConfigRequest, opts ...grpc.CallOption) (*UpdateInstanceImageUpdaterConfigResponse, error) {
	out := new(UpdateInstanceImageUpdaterConfigResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateInstanceImageUpdaterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateInstanceImageUpdaterSSHConfig(ctx context.Context, in *UpdateInstanceImageUpdaterSSHConfigRequest, opts ...grpc.CallOption) (*UpdateInstanceImageUpdaterSSHConfigResponse, error) {
	out := new(UpdateInstanceImageUpdaterSSHConfigResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateInstanceImageUpdaterSSHConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateInstanceResourceCustomizations(ctx context.Context, in *UpdateInstanceResourceCustomizationsRequest, opts ...grpc.CallOption) (*UpdateInstanceResourceCustomizationsResponse, error) {
	out := new(UpdateInstanceResourceCustomizationsResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateInstanceResourceCustomizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error) {
	out := new(DeleteInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/DeleteInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) ListInstanceAccounts(ctx context.Context, in *ListInstanceAccountsRequest, opts ...grpc.CallOption) (*ListInstanceAccountsResponse, error) {
	out := new(ListInstanceAccountsResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/ListInstanceAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpsertInstanceAccount(ctx context.Context, in *UpsertInstanceAccountRequest, opts ...grpc.CallOption) (*UpsertInstanceAccountResponse, error) {
	out := new(UpsertInstanceAccountResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpsertInstanceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateInstanceAccountPassword(ctx context.Context, in *UpdateInstanceAccountPasswordRequest, opts ...grpc.CallOption) (*UpdateInstanceAccountPasswordResponse, error) {
	out := new(UpdateInstanceAccountPasswordResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateInstanceAccountPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) RegenerateInstanceAccountPassword(ctx context.Context, in *RegenerateInstanceAccountPasswordRequest, opts ...grpc.CallOption) (*RegenerateInstanceAccountPasswordResponse, error) {
	out := new(RegenerateInstanceAccountPasswordResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/RegenerateInstanceAccountPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) DeleteInstanceAccount(ctx context.Context, in *DeleteInstanceAccountRequest, opts ...grpc.CallOption) (*DeleteInstanceAccountResponse, error) {
	out := new(DeleteInstanceAccountResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/DeleteInstanceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) ListInstanceClusters(ctx context.Context, in *ListInstanceClustersRequest, opts ...grpc.CallOption) (*ListInstanceClustersResponse, error) {
	out := new(ListInstanceClustersResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/ListInstanceClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) WatchInstanceClusters(ctx context.Context, in *WatchInstanceClustersRequest, opts ...grpc.CallOption) (ArgoCDService_WatchInstanceClustersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArgoCDService_ServiceDesc.Streams[1], "/akuity.argocd.v1.ArgoCDService/WatchInstanceClusters", opts...)
	if err != nil {
		return nil, err
	}
	x := &argoCDServiceWatchInstanceClustersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArgoCDService_WatchInstanceClustersClient interface {
	Recv() (*WatchInstanceClustersResponse, error)
	grpc.ClientStream
}

type argoCDServiceWatchInstanceClustersClient struct {
	grpc.ClientStream
}

func (x *argoCDServiceWatchInstanceClustersClient) Recv() (*WatchInstanceClustersResponse, error) {
	m := new(WatchInstanceClustersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *argoCDServiceClient) CreateInstanceCluster(ctx context.Context, in *CreateInstanceClusterRequest, opts ...grpc.CallOption) (*CreateInstanceClusterResponse, error) {
	out := new(CreateInstanceClusterResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/CreateInstanceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetInstanceCluster(ctx context.Context, in *GetInstanceClusterRequest, opts ...grpc.CallOption) (*GetInstanceClusterResponse, error) {
	out := new(GetInstanceClusterResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetInstanceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetInstanceClusterManifests(ctx context.Context, in *GetInstanceClusterManifestsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetInstanceClusterManifests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateInstanceCluster(ctx context.Context, in *UpdateInstanceClusterRequest, opts ...grpc.CallOption) (*UpdateInstanceClusterResponse, error) {
	out := new(UpdateInstanceClusterResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateInstanceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateInstanceClusters(ctx context.Context, in *UpdateInstanceClustersRequest, opts ...grpc.CallOption) (*UpdateInstanceClustersResponse, error) {
	out := new(UpdateInstanceClustersResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateInstanceClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) DeleteInstanceCluster(ctx context.Context, in *DeleteInstanceClusterRequest, opts ...grpc.CallOption) (*DeleteInstanceClusterResponse, error) {
	out := new(DeleteInstanceClusterResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/DeleteInstanceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetSyncOperationsStats(ctx context.Context, in *GetSyncOperationsStatsRequest, opts ...grpc.CallOption) (*GetSyncOperationsStatsResponse, error) {
	out := new(GetSyncOperationsStatsResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetSyncOperationsStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArgoCDServiceServer is the server API for ArgoCDService service.
// All implementations must embed UnimplementedArgoCDServiceServer
// for forward compatibility
type ArgoCDServiceServer interface {
	ListInstanceVersions(context.Context, *ListInstanceVersionsRequest) (*ListInstanceVersionsResponse, error)
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	WatchInstances(*WatchInstancesRequest, ArgoCDService_WatchInstancesServer) error
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
	GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error)
	GetInstanceCSS(context.Context, *GetInstanceCSSRequest) (*GetInstanceCSSResponse, error)
	GetInstanceNotificationSettings(context.Context, *GetInstanceNotificationSettingsRequest) (*GetInstanceNotificationSettingsResponse, error)
	GetInstanceNotificationCatalog(context.Context, *GetInstanceNotificationCatalogRequest) (*GetInstanceNotificationCatalogResponse, error)
	GetInstanceImageUpdaterSettings(context.Context, *GetInstanceImageUpdaterSettingsRequest) (*GetInstanceImageUpdaterSettingsResponse, error)
	GetInstanceResourceCustomizations(context.Context, *GetInstanceResourceCustomizationsRequest) (*GetInstanceResourceCustomizationsResponse, error)
	PatchInstance(context.Context, *PatchInstanceRequest) (*PatchInstanceResponse, error)
	PatchInstanceSecret(context.Context, *PatchInstanceSecretRequest) (*PatchInstanceSecretResponse, error)
	PatchInstanceNotificationSecret(context.Context, *PatchInstanceNotificationSecretRequest) (*PatchInstanceNotificationSecretResponse, error)
	PatchInstanceImageUpdaterSecret(context.Context, *PatchInstanceImageUpdaterSecretRequest) (*PatchInstanceImageUpdaterSecretResponse, error)
	UpdateInstance(context.Context, *UpdateInstanceRequest) (*UpdateInstanceResponse, error)
	UpdateInstanceCSS(context.Context, *UpdateInstanceCSSRequest) (*UpdateInstanceCSSResponse, error)
	UpdateInstanceNotificationConfig(context.Context, *UpdateInstanceNotificationConfigRequest) (*UpdateInstanceNotificationConfigResponse, error)
	UpdateInstanceImageUpdaterConfig(context.Context, *UpdateInstanceImageUpdaterConfigRequest) (*UpdateInstanceImageUpdaterConfigResponse, error)
	UpdateInstanceImageUpdaterSSHConfig(context.Context, *UpdateInstanceImageUpdaterSSHConfigRequest) (*UpdateInstanceImageUpdaterSSHConfigResponse, error)
	UpdateInstanceResourceCustomizations(context.Context, *UpdateInstanceResourceCustomizationsRequest) (*UpdateInstanceResourceCustomizationsResponse, error)
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error)
	ListInstanceAccounts(context.Context, *ListInstanceAccountsRequest) (*ListInstanceAccountsResponse, error)
	UpsertInstanceAccount(context.Context, *UpsertInstanceAccountRequest) (*UpsertInstanceAccountResponse, error)
	UpdateInstanceAccountPassword(context.Context, *UpdateInstanceAccountPasswordRequest) (*UpdateInstanceAccountPasswordResponse, error)
	RegenerateInstanceAccountPassword(context.Context, *RegenerateInstanceAccountPasswordRequest) (*RegenerateInstanceAccountPasswordResponse, error)
	DeleteInstanceAccount(context.Context, *DeleteInstanceAccountRequest) (*DeleteInstanceAccountResponse, error)
	ListInstanceClusters(context.Context, *ListInstanceClustersRequest) (*ListInstanceClustersResponse, error)
	WatchInstanceClusters(*WatchInstanceClustersRequest, ArgoCDService_WatchInstanceClustersServer) error
	CreateInstanceCluster(context.Context, *CreateInstanceClusterRequest) (*CreateInstanceClusterResponse, error)
	GetInstanceCluster(context.Context, *GetInstanceClusterRequest) (*GetInstanceClusterResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetInstanceClusterManifests(context.Context, *GetInstanceClusterManifestsRequest) (*httpbody.HttpBody, error)
	UpdateInstanceCluster(context.Context, *UpdateInstanceClusterRequest) (*UpdateInstanceClusterResponse, error)
	UpdateInstanceClusters(context.Context, *UpdateInstanceClustersRequest) (*UpdateInstanceClustersResponse, error)
	DeleteInstanceCluster(context.Context, *DeleteInstanceClusterRequest) (*DeleteInstanceClusterResponse, error)
	GetSyncOperationsStats(context.Context, *GetSyncOperationsStatsRequest) (*GetSyncOperationsStatsResponse, error)
	mustEmbedUnimplementedArgoCDServiceServer()
}

// UnimplementedArgoCDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArgoCDServiceServer struct {
}

func (UnimplementedArgoCDServiceServer) ListInstanceVersions(context.Context, *ListInstanceVersionsRequest) (*ListInstanceVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceVersions not implemented")
}
func (UnimplementedArgoCDServiceServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedArgoCDServiceServer) WatchInstances(*WatchInstancesRequest, ArgoCDService_WatchInstancesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchInstances not implemented")
}
func (UnimplementedArgoCDServiceServer) CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) GetInstanceCSS(context.Context, *GetInstanceCSSRequest) (*GetInstanceCSSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceCSS not implemented")
}
func (UnimplementedArgoCDServiceServer) GetInstanceNotificationSettings(context.Context, *GetInstanceNotificationSettingsRequest) (*GetInstanceNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceNotificationSettings not implemented")
}
func (UnimplementedArgoCDServiceServer) GetInstanceNotificationCatalog(context.Context, *GetInstanceNotificationCatalogRequest) (*GetInstanceNotificationCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceNotificationCatalog not implemented")
}
func (UnimplementedArgoCDServiceServer) GetInstanceImageUpdaterSettings(context.Context, *GetInstanceImageUpdaterSettingsRequest) (*GetInstanceImageUpdaterSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceImageUpdaterSettings not implemented")
}
func (UnimplementedArgoCDServiceServer) GetInstanceResourceCustomizations(context.Context, *GetInstanceResourceCustomizationsRequest) (*GetInstanceResourceCustomizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceResourceCustomizations not implemented")
}
func (UnimplementedArgoCDServiceServer) PatchInstance(context.Context, *PatchInstanceRequest) (*PatchInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) PatchInstanceSecret(context.Context, *PatchInstanceSecretRequest) (*PatchInstanceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchInstanceSecret not implemented")
}
func (UnimplementedArgoCDServiceServer) PatchInstanceNotificationSecret(context.Context, *PatchInstanceNotificationSecretRequest) (*PatchInstanceNotificationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchInstanceNotificationSecret not implemented")
}
func (UnimplementedArgoCDServiceServer) PatchInstanceImageUpdaterSecret(context.Context, *PatchInstanceImageUpdaterSecretRequest) (*PatchInstanceImageUpdaterSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchInstanceImageUpdaterSecret not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateInstance(context.Context, *UpdateInstanceRequest) (*UpdateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateInstanceCSS(context.Context, *UpdateInstanceCSSRequest) (*UpdateInstanceCSSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceCSS not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateInstanceNotificationConfig(context.Context, *UpdateInstanceNotificationConfigRequest) (*UpdateInstanceNotificationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceNotificationConfig not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateInstanceImageUpdaterConfig(context.Context, *UpdateInstanceImageUpdaterConfigRequest) (*UpdateInstanceImageUpdaterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceImageUpdaterConfig not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateInstanceImageUpdaterSSHConfig(context.Context, *UpdateInstanceImageUpdaterSSHConfigRequest) (*UpdateInstanceImageUpdaterSSHConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceImageUpdaterSSHConfig not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateInstanceResourceCustomizations(context.Context, *UpdateInstanceResourceCustomizationsRequest) (*UpdateInstanceResourceCustomizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceResourceCustomizations not implemented")
}
func (UnimplementedArgoCDServiceServer) DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) ListInstanceAccounts(context.Context, *ListInstanceAccountsRequest) (*ListInstanceAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceAccounts not implemented")
}
func (UnimplementedArgoCDServiceServer) UpsertInstanceAccount(context.Context, *UpsertInstanceAccountRequest) (*UpsertInstanceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertInstanceAccount not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateInstanceAccountPassword(context.Context, *UpdateInstanceAccountPasswordRequest) (*UpdateInstanceAccountPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceAccountPassword not implemented")
}
func (UnimplementedArgoCDServiceServer) RegenerateInstanceAccountPassword(context.Context, *RegenerateInstanceAccountPasswordRequest) (*RegenerateInstanceAccountPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateInstanceAccountPassword not implemented")
}
func (UnimplementedArgoCDServiceServer) DeleteInstanceAccount(context.Context, *DeleteInstanceAccountRequest) (*DeleteInstanceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstanceAccount not implemented")
}
func (UnimplementedArgoCDServiceServer) ListInstanceClusters(context.Context, *ListInstanceClustersRequest) (*ListInstanceClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceClusters not implemented")
}
func (UnimplementedArgoCDServiceServer) WatchInstanceClusters(*WatchInstanceClustersRequest, ArgoCDService_WatchInstanceClustersServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchInstanceClusters not implemented")
}
func (UnimplementedArgoCDServiceServer) CreateInstanceCluster(context.Context, *CreateInstanceClusterRequest) (*CreateInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstanceCluster not implemented")
}
func (UnimplementedArgoCDServiceServer) GetInstanceCluster(context.Context, *GetInstanceClusterRequest) (*GetInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceCluster not implemented")
}
func (UnimplementedArgoCDServiceServer) GetInstanceClusterManifests(context.Context, *GetInstanceClusterManifestsRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceClusterManifests not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateInstanceCluster(context.Context, *UpdateInstanceClusterRequest) (*UpdateInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceCluster not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateInstanceClusters(context.Context, *UpdateInstanceClustersRequest) (*UpdateInstanceClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceClusters not implemented")
}
func (UnimplementedArgoCDServiceServer) DeleteInstanceCluster(context.Context, *DeleteInstanceClusterRequest) (*DeleteInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstanceCluster not implemented")
}
func (UnimplementedArgoCDServiceServer) GetSyncOperationsStats(context.Context, *GetSyncOperationsStatsRequest) (*GetSyncOperationsStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncOperationsStats not implemented")
}
func (UnimplementedArgoCDServiceServer) mustEmbedUnimplementedArgoCDServiceServer() {}

// UnsafeArgoCDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArgoCDServiceServer will
// result in compilation errors.
type UnsafeArgoCDServiceServer interface {
	mustEmbedUnimplementedArgoCDServiceServer()
}

func RegisterArgoCDServiceServer(s grpc.ServiceRegistrar, srv ArgoCDServiceServer) {
	s.RegisterService(&ArgoCDService_ServiceDesc, srv)
}

func _ArgoCDService_ListInstanceVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstanceVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).ListInstanceVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/ListInstanceVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).ListInstanceVersions(ctx, req.(*ListInstanceVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/ListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_WatchInstances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchInstancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArgoCDServiceServer).WatchInstances(m, &argoCDServiceWatchInstancesServer{stream})
}

type ArgoCDService_WatchInstancesServer interface {
	Send(*WatchInstancesResponse) error
	grpc.ServerStream
}

type argoCDServiceWatchInstancesServer struct {
	grpc.ServerStream
}

func (x *argoCDServiceWatchInstancesServer) Send(m *WatchInstancesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ArgoCDService_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetInstanceCSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceCSSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetInstanceCSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetInstanceCSS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetInstanceCSS(ctx, req.(*GetInstanceCSSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetInstanceNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetInstanceNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetInstanceNotificationSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetInstanceNotificationSettings(ctx, req.(*GetInstanceNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetInstanceNotificationCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceNotificationCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetInstanceNotificationCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetInstanceNotificationCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetInstanceNotificationCatalog(ctx, req.(*GetInstanceNotificationCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetInstanceImageUpdaterSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceImageUpdaterSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetInstanceImageUpdaterSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetInstanceImageUpdaterSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetInstanceImageUpdaterSettings(ctx, req.(*GetInstanceImageUpdaterSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetInstanceResourceCustomizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceResourceCustomizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetInstanceResourceCustomizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetInstanceResourceCustomizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetInstanceResourceCustomizations(ctx, req.(*GetInstanceResourceCustomizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_PatchInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).PatchInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/PatchInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).PatchInstance(ctx, req.(*PatchInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_PatchInstanceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInstanceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).PatchInstanceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/PatchInstanceSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).PatchInstanceSecret(ctx, req.(*PatchInstanceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_PatchInstanceNotificationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInstanceNotificationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).PatchInstanceNotificationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/PatchInstanceNotificationSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).PatchInstanceNotificationSecret(ctx, req.(*PatchInstanceNotificationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_PatchInstanceImageUpdaterSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInstanceImageUpdaterSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).PatchInstanceImageUpdaterSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/PatchInstanceImageUpdaterSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).PatchInstanceImageUpdaterSecret(ctx, req.(*PatchInstanceImageUpdaterSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateInstance(ctx, req.(*UpdateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateInstanceCSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceCSSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateInstanceCSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateInstanceCSS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateInstanceCSS(ctx, req.(*UpdateInstanceCSSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateInstanceNotificationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceNotificationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateInstanceNotificationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateInstanceNotificationConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateInstanceNotificationConfig(ctx, req.(*UpdateInstanceNotificationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateInstanceImageUpdaterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceImageUpdaterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateInstanceImageUpdaterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateInstanceImageUpdaterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateInstanceImageUpdaterConfig(ctx, req.(*UpdateInstanceImageUpdaterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateInstanceImageUpdaterSSHConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceImageUpdaterSSHConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateInstanceImageUpdaterSSHConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateInstanceImageUpdaterSSHConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateInstanceImageUpdaterSSHConfig(ctx, req.(*UpdateInstanceImageUpdaterSSHConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateInstanceResourceCustomizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceResourceCustomizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateInstanceResourceCustomizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateInstanceResourceCustomizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateInstanceResourceCustomizations(ctx, req.(*UpdateInstanceResourceCustomizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/DeleteInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).DeleteInstance(ctx, req.(*DeleteInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_ListInstanceAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstanceAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).ListInstanceAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/ListInstanceAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).ListInstanceAccounts(ctx, req.(*ListInstanceAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpsertInstanceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertInstanceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpsertInstanceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpsertInstanceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpsertInstanceAccount(ctx, req.(*UpsertInstanceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateInstanceAccountPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceAccountPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateInstanceAccountPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateInstanceAccountPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateInstanceAccountPassword(ctx, req.(*UpdateInstanceAccountPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_RegenerateInstanceAccountPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateInstanceAccountPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).RegenerateInstanceAccountPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/RegenerateInstanceAccountPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).RegenerateInstanceAccountPassword(ctx, req.(*RegenerateInstanceAccountPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_DeleteInstanceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).DeleteInstanceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/DeleteInstanceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).DeleteInstanceAccount(ctx, req.(*DeleteInstanceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_ListInstanceClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstanceClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).ListInstanceClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/ListInstanceClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).ListInstanceClusters(ctx, req.(*ListInstanceClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_WatchInstanceClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchInstanceClustersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArgoCDServiceServer).WatchInstanceClusters(m, &argoCDServiceWatchInstanceClustersServer{stream})
}

type ArgoCDService_WatchInstanceClustersServer interface {
	Send(*WatchInstanceClustersResponse) error
	grpc.ServerStream
}

type argoCDServiceWatchInstanceClustersServer struct {
	grpc.ServerStream
}

func (x *argoCDServiceWatchInstanceClustersServer) Send(m *WatchInstanceClustersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ArgoCDService_CreateInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).CreateInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/CreateInstanceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).CreateInstanceCluster(ctx, req.(*CreateInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetInstanceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetInstanceCluster(ctx, req.(*GetInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetInstanceClusterManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceClusterManifestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetInstanceClusterManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetInstanceClusterManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetInstanceClusterManifests(ctx, req.(*GetInstanceClusterManifestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateInstanceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateInstanceCluster(ctx, req.(*UpdateInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateInstanceClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateInstanceClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateInstanceClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateInstanceClusters(ctx, req.(*UpdateInstanceClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_DeleteInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).DeleteInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/DeleteInstanceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).DeleteInstanceCluster(ctx, req.(*DeleteInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetSyncOperationsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncOperationsStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetSyncOperationsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetSyncOperationsStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetSyncOperationsStats(ctx, req.(*GetSyncOperationsStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArgoCDService_ServiceDesc is the grpc.ServiceDesc for ArgoCDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArgoCDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akuity.argocd.v1.ArgoCDService",
	HandlerType: (*ArgoCDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInstanceVersions",
			Handler:    _ArgoCDService_ListInstanceVersions_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _ArgoCDService_ListInstances_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _ArgoCDService_CreateInstance_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _ArgoCDService_GetInstance_Handler,
		},
		{
			MethodName: "GetInstanceCSS",
			Handler:    _ArgoCDService_GetInstanceCSS_Handler,
		},
		{
			MethodName: "GetInstanceNotificationSettings",
			Handler:    _ArgoCDService_GetInstanceNotificationSettings_Handler,
		},
		{
			MethodName: "GetInstanceNotificationCatalog",
			Handler:    _ArgoCDService_GetInstanceNotificationCatalog_Handler,
		},
		{
			MethodName: "GetInstanceImageUpdaterSettings",
			Handler:    _ArgoCDService_GetInstanceImageUpdaterSettings_Handler,
		},
		{
			MethodName: "GetInstanceResourceCustomizations",
			Handler:    _ArgoCDService_GetInstanceResourceCustomizations_Handler,
		},
		{
			MethodName: "PatchInstance",
			Handler:    _ArgoCDService_PatchInstance_Handler,
		},
		{
			MethodName: "PatchInstanceSecret",
			Handler:    _ArgoCDService_PatchInstanceSecret_Handler,
		},
		{
			MethodName: "PatchInstanceNotificationSecret",
			Handler:    _ArgoCDService_PatchInstanceNotificationSecret_Handler,
		},
		{
			MethodName: "PatchInstanceImageUpdaterSecret",
			Handler:    _ArgoCDService_PatchInstanceImageUpdaterSecret_Handler,
		},
		{
			MethodName: "UpdateInstance",
			Handler:    _ArgoCDService_UpdateInstance_Handler,
		},
		{
			MethodName: "UpdateInstanceCSS",
			Handler:    _ArgoCDService_UpdateInstanceCSS_Handler,
		},
		{
			MethodName: "UpdateInstanceNotificationConfig",
			Handler:    _ArgoCDService_UpdateInstanceNotificationConfig_Handler,
		},
		{
			MethodName: "UpdateInstanceImageUpdaterConfig",
			Handler:    _ArgoCDService_UpdateInstanceImageUpdaterConfig_Handler,
		},
		{
			MethodName: "UpdateInstanceImageUpdaterSSHConfig",
			Handler:    _ArgoCDService_UpdateInstanceImageUpdaterSSHConfig_Handler,
		},
		{
			MethodName: "UpdateInstanceResourceCustomizations",
			Handler:    _ArgoCDService_UpdateInstanceResourceCustomizations_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _ArgoCDService_DeleteInstance_Handler,
		},
		{
			MethodName: "ListInstanceAccounts",
			Handler:    _ArgoCDService_ListInstanceAccounts_Handler,
		},
		{
			MethodName: "UpsertInstanceAccount",
			Handler:    _ArgoCDService_UpsertInstanceAccount_Handler,
		},
		{
			MethodName: "UpdateInstanceAccountPassword",
			Handler:    _ArgoCDService_UpdateInstanceAccountPassword_Handler,
		},
		{
			MethodName: "RegenerateInstanceAccountPassword",
			Handler:    _ArgoCDService_RegenerateInstanceAccountPassword_Handler,
		},
		{
			MethodName: "DeleteInstanceAccount",
			Handler:    _ArgoCDService_DeleteInstanceAccount_Handler,
		},
		{
			MethodName: "ListInstanceClusters",
			Handler:    _ArgoCDService_ListInstanceClusters_Handler,
		},
		{
			MethodName: "CreateInstanceCluster",
			Handler:    _ArgoCDService_CreateInstanceCluster_Handler,
		},
		{
			MethodName: "GetInstanceCluster",
			Handler:    _ArgoCDService_GetInstanceCluster_Handler,
		},
		{
			MethodName: "GetInstanceClusterManifests",
			Handler:    _ArgoCDService_GetInstanceClusterManifests_Handler,
		},
		{
			MethodName: "UpdateInstanceCluster",
			Handler:    _ArgoCDService_UpdateInstanceCluster_Handler,
		},
		{
			MethodName: "UpdateInstanceClusters",
			Handler:    _ArgoCDService_UpdateInstanceClusters_Handler,
		},
		{
			MethodName: "DeleteInstanceCluster",
			Handler:    _ArgoCDService_DeleteInstanceCluster_Handler,
		},
		{
			MethodName: "GetSyncOperationsStats",
			Handler:    _ArgoCDService_GetSyncOperationsStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchInstances",
			Handler:       _ArgoCDService_WatchInstances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchInstanceClusters",
			Handler:       _ArgoCDService_WatchInstanceClusters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "argocd/v1/argocd.proto",
}
