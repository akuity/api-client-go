// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package argocdv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArgoCDServiceClient is the client API for ArgoCDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArgoCDServiceClient interface {
	ListOrganizationInstances(ctx context.Context, in *ListOrganizationInstancesRequest, opts ...grpc.CallOption) (*ListOrganizationInstancesResponse, error)
	CreateOrganizationInstance(ctx context.Context, in *CreateOrganizationInstanceRequest, opts ...grpc.CallOption) (*CreateOrganizationInstanceResponse, error)
	GetOrganizationInstance(ctx context.Context, in *GetOrganizationInstanceRequest, opts ...grpc.CallOption) (*GetOrganizationInstanceResponse, error)
	PatchOrganizationInstance(ctx context.Context, in *PatchOrganizationInstanceRequest, opts ...grpc.CallOption) (*PatchOrganizationInstanceResponse, error)
	UpdateOrganizationInstance(ctx context.Context, in *UpdateOrganizationInstanceRequest, opts ...grpc.CallOption) (*UpdateOrganizationInstanceResponse, error)
	DeleteOrganizationInstance(ctx context.Context, in *DeleteOrganizationInstanceRequest, opts ...grpc.CallOption) (*DeleteOrganizationInstanceResponse, error)
	ListOrganizationInstanceClusters(ctx context.Context, in *ListOrganizationInstanceClustersRequest, opts ...grpc.CallOption) (*ListOrganizationInstanceClustersResponse, error)
	CreateOrganizationInstanceCluster(ctx context.Context, in *CreateOrganizationInstanceClusterRequest, opts ...grpc.CallOption) (*CreateOrganizationInstanceClusterResponse, error)
	GetOrganizationInstanceCluster(ctx context.Context, in *GetOrganizationInstanceClusterRequest, opts ...grpc.CallOption) (*GetOrganizationInstanceClusterResponse, error)
	GetOrganizationInstanceClusterManifests(ctx context.Context, in *GetOrganizationInstanceClusterManifestsRequest, opts ...grpc.CallOption) (*GetOrganizationInstanceClusterManifestsResponse, error)
	UpdateOrganizationInstanceCluster(ctx context.Context, in *UpdateOrganizationInstanceClusterRequest, opts ...grpc.CallOption) (*UpdateOrganizationInstanceClusterResponse, error)
	DeleteOrganizationInstanceCluster(ctx context.Context, in *DeleteOrganizationInstanceClusterRequest, opts ...grpc.CallOption) (*DeleteOrganizationInstanceClusterResponse, error)
}

type argoCDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArgoCDServiceClient(cc grpc.ClientConnInterface) ArgoCDServiceClient {
	return &argoCDServiceClient{cc}
}

func (c *argoCDServiceClient) ListOrganizationInstances(ctx context.Context, in *ListOrganizationInstancesRequest, opts ...grpc.CallOption) (*ListOrganizationInstancesResponse, error) {
	out := new(ListOrganizationInstancesResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/ListOrganizationInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) CreateOrganizationInstance(ctx context.Context, in *CreateOrganizationInstanceRequest, opts ...grpc.CallOption) (*CreateOrganizationInstanceResponse, error) {
	out := new(CreateOrganizationInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/CreateOrganizationInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetOrganizationInstance(ctx context.Context, in *GetOrganizationInstanceRequest, opts ...grpc.CallOption) (*GetOrganizationInstanceResponse, error) {
	out := new(GetOrganizationInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetOrganizationInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) PatchOrganizationInstance(ctx context.Context, in *PatchOrganizationInstanceRequest, opts ...grpc.CallOption) (*PatchOrganizationInstanceResponse, error) {
	out := new(PatchOrganizationInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/PatchOrganizationInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateOrganizationInstance(ctx context.Context, in *UpdateOrganizationInstanceRequest, opts ...grpc.CallOption) (*UpdateOrganizationInstanceResponse, error) {
	out := new(UpdateOrganizationInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateOrganizationInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) DeleteOrganizationInstance(ctx context.Context, in *DeleteOrganizationInstanceRequest, opts ...grpc.CallOption) (*DeleteOrganizationInstanceResponse, error) {
	out := new(DeleteOrganizationInstanceResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/DeleteOrganizationInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) ListOrganizationInstanceClusters(ctx context.Context, in *ListOrganizationInstanceClustersRequest, opts ...grpc.CallOption) (*ListOrganizationInstanceClustersResponse, error) {
	out := new(ListOrganizationInstanceClustersResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/ListOrganizationInstanceClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) CreateOrganizationInstanceCluster(ctx context.Context, in *CreateOrganizationInstanceClusterRequest, opts ...grpc.CallOption) (*CreateOrganizationInstanceClusterResponse, error) {
	out := new(CreateOrganizationInstanceClusterResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/CreateOrganizationInstanceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetOrganizationInstanceCluster(ctx context.Context, in *GetOrganizationInstanceClusterRequest, opts ...grpc.CallOption) (*GetOrganizationInstanceClusterResponse, error) {
	out := new(GetOrganizationInstanceClusterResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetOrganizationInstanceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) GetOrganizationInstanceClusterManifests(ctx context.Context, in *GetOrganizationInstanceClusterManifestsRequest, opts ...grpc.CallOption) (*GetOrganizationInstanceClusterManifestsResponse, error) {
	out := new(GetOrganizationInstanceClusterManifestsResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/GetOrganizationInstanceClusterManifests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) UpdateOrganizationInstanceCluster(ctx context.Context, in *UpdateOrganizationInstanceClusterRequest, opts ...grpc.CallOption) (*UpdateOrganizationInstanceClusterResponse, error) {
	out := new(UpdateOrganizationInstanceClusterResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/UpdateOrganizationInstanceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argoCDServiceClient) DeleteOrganizationInstanceCluster(ctx context.Context, in *DeleteOrganizationInstanceClusterRequest, opts ...grpc.CallOption) (*DeleteOrganizationInstanceClusterResponse, error) {
	out := new(DeleteOrganizationInstanceClusterResponse)
	err := c.cc.Invoke(ctx, "/akuity.argocd.v1.ArgoCDService/DeleteOrganizationInstanceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArgoCDServiceServer is the server API for ArgoCDService service.
// All implementations must embed UnimplementedArgoCDServiceServer
// for forward compatibility
type ArgoCDServiceServer interface {
	ListOrganizationInstances(context.Context, *ListOrganizationInstancesRequest) (*ListOrganizationInstancesResponse, error)
	CreateOrganizationInstance(context.Context, *CreateOrganizationInstanceRequest) (*CreateOrganizationInstanceResponse, error)
	GetOrganizationInstance(context.Context, *GetOrganizationInstanceRequest) (*GetOrganizationInstanceResponse, error)
	PatchOrganizationInstance(context.Context, *PatchOrganizationInstanceRequest) (*PatchOrganizationInstanceResponse, error)
	UpdateOrganizationInstance(context.Context, *UpdateOrganizationInstanceRequest) (*UpdateOrganizationInstanceResponse, error)
	DeleteOrganizationInstance(context.Context, *DeleteOrganizationInstanceRequest) (*DeleteOrganizationInstanceResponse, error)
	ListOrganizationInstanceClusters(context.Context, *ListOrganizationInstanceClustersRequest) (*ListOrganizationInstanceClustersResponse, error)
	CreateOrganizationInstanceCluster(context.Context, *CreateOrganizationInstanceClusterRequest) (*CreateOrganizationInstanceClusterResponse, error)
	GetOrganizationInstanceCluster(context.Context, *GetOrganizationInstanceClusterRequest) (*GetOrganizationInstanceClusterResponse, error)
	GetOrganizationInstanceClusterManifests(context.Context, *GetOrganizationInstanceClusterManifestsRequest) (*GetOrganizationInstanceClusterManifestsResponse, error)
	UpdateOrganizationInstanceCluster(context.Context, *UpdateOrganizationInstanceClusterRequest) (*UpdateOrganizationInstanceClusterResponse, error)
	DeleteOrganizationInstanceCluster(context.Context, *DeleteOrganizationInstanceClusterRequest) (*DeleteOrganizationInstanceClusterResponse, error)
	mustEmbedUnimplementedArgoCDServiceServer()
}

// UnimplementedArgoCDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArgoCDServiceServer struct {
}

func (UnimplementedArgoCDServiceServer) ListOrganizationInstances(context.Context, *ListOrganizationInstancesRequest) (*ListOrganizationInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationInstances not implemented")
}
func (UnimplementedArgoCDServiceServer) CreateOrganizationInstance(context.Context, *CreateOrganizationInstanceRequest) (*CreateOrganizationInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) GetOrganizationInstance(context.Context, *GetOrganizationInstanceRequest) (*GetOrganizationInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) PatchOrganizationInstance(context.Context, *PatchOrganizationInstanceRequest) (*PatchOrganizationInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateOrganizationInstance(context.Context, *UpdateOrganizationInstanceRequest) (*UpdateOrganizationInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) DeleteOrganizationInstance(context.Context, *DeleteOrganizationInstanceRequest) (*DeleteOrganizationInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationInstance not implemented")
}
func (UnimplementedArgoCDServiceServer) ListOrganizationInstanceClusters(context.Context, *ListOrganizationInstanceClustersRequest) (*ListOrganizationInstanceClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationInstanceClusters not implemented")
}
func (UnimplementedArgoCDServiceServer) CreateOrganizationInstanceCluster(context.Context, *CreateOrganizationInstanceClusterRequest) (*CreateOrganizationInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationInstanceCluster not implemented")
}
func (UnimplementedArgoCDServiceServer) GetOrganizationInstanceCluster(context.Context, *GetOrganizationInstanceClusterRequest) (*GetOrganizationInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInstanceCluster not implemented")
}
func (UnimplementedArgoCDServiceServer) GetOrganizationInstanceClusterManifests(context.Context, *GetOrganizationInstanceClusterManifestsRequest) (*GetOrganizationInstanceClusterManifestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInstanceClusterManifests not implemented")
}
func (UnimplementedArgoCDServiceServer) UpdateOrganizationInstanceCluster(context.Context, *UpdateOrganizationInstanceClusterRequest) (*UpdateOrganizationInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationInstanceCluster not implemented")
}
func (UnimplementedArgoCDServiceServer) DeleteOrganizationInstanceCluster(context.Context, *DeleteOrganizationInstanceClusterRequest) (*DeleteOrganizationInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationInstanceCluster not implemented")
}
func (UnimplementedArgoCDServiceServer) mustEmbedUnimplementedArgoCDServiceServer() {}

// UnsafeArgoCDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArgoCDServiceServer will
// result in compilation errors.
type UnsafeArgoCDServiceServer interface {
	mustEmbedUnimplementedArgoCDServiceServer()
}

func RegisterArgoCDServiceServer(s grpc.ServiceRegistrar, srv ArgoCDServiceServer) {
	s.RegisterService(&ArgoCDService_ServiceDesc, srv)
}

func _ArgoCDService_ListOrganizationInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).ListOrganizationInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/ListOrganizationInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).ListOrganizationInstances(ctx, req.(*ListOrganizationInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_CreateOrganizationInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).CreateOrganizationInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/CreateOrganizationInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).CreateOrganizationInstance(ctx, req.(*CreateOrganizationInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetOrganizationInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetOrganizationInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetOrganizationInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetOrganizationInstance(ctx, req.(*GetOrganizationInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_PatchOrganizationInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).PatchOrganizationInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/PatchOrganizationInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).PatchOrganizationInstance(ctx, req.(*PatchOrganizationInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateOrganizationInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateOrganizationInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateOrganizationInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateOrganizationInstance(ctx, req.(*UpdateOrganizationInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_DeleteOrganizationInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).DeleteOrganizationInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/DeleteOrganizationInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).DeleteOrganizationInstance(ctx, req.(*DeleteOrganizationInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_ListOrganizationInstanceClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationInstanceClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).ListOrganizationInstanceClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/ListOrganizationInstanceClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).ListOrganizationInstanceClusters(ctx, req.(*ListOrganizationInstanceClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_CreateOrganizationInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).CreateOrganizationInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/CreateOrganizationInstanceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).CreateOrganizationInstanceCluster(ctx, req.(*CreateOrganizationInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetOrganizationInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetOrganizationInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetOrganizationInstanceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetOrganizationInstanceCluster(ctx, req.(*GetOrganizationInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_GetOrganizationInstanceClusterManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInstanceClusterManifestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).GetOrganizationInstanceClusterManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/GetOrganizationInstanceClusterManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).GetOrganizationInstanceClusterManifests(ctx, req.(*GetOrganizationInstanceClusterManifestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_UpdateOrganizationInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).UpdateOrganizationInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/UpdateOrganizationInstanceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).UpdateOrganizationInstanceCluster(ctx, req.(*UpdateOrganizationInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgoCDService_DeleteOrganizationInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgoCDServiceServer).DeleteOrganizationInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akuity.argocd.v1.ArgoCDService/DeleteOrganizationInstanceCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgoCDServiceServer).DeleteOrganizationInstanceCluster(ctx, req.(*DeleteOrganizationInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArgoCDService_ServiceDesc is the grpc.ServiceDesc for ArgoCDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArgoCDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akuity.argocd.v1.ArgoCDService",
	HandlerType: (*ArgoCDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationInstances",
			Handler:    _ArgoCDService_ListOrganizationInstances_Handler,
		},
		{
			MethodName: "CreateOrganizationInstance",
			Handler:    _ArgoCDService_CreateOrganizationInstance_Handler,
		},
		{
			MethodName: "GetOrganizationInstance",
			Handler:    _ArgoCDService_GetOrganizationInstance_Handler,
		},
		{
			MethodName: "PatchOrganizationInstance",
			Handler:    _ArgoCDService_PatchOrganizationInstance_Handler,
		},
		{
			MethodName: "UpdateOrganizationInstance",
			Handler:    _ArgoCDService_UpdateOrganizationInstance_Handler,
		},
		{
			MethodName: "DeleteOrganizationInstance",
			Handler:    _ArgoCDService_DeleteOrganizationInstance_Handler,
		},
		{
			MethodName: "ListOrganizationInstanceClusters",
			Handler:    _ArgoCDService_ListOrganizationInstanceClusters_Handler,
		},
		{
			MethodName: "CreateOrganizationInstanceCluster",
			Handler:    _ArgoCDService_CreateOrganizationInstanceCluster_Handler,
		},
		{
			MethodName: "GetOrganizationInstanceCluster",
			Handler:    _ArgoCDService_GetOrganizationInstanceCluster_Handler,
		},
		{
			MethodName: "GetOrganizationInstanceClusterManifests",
			Handler:    _ArgoCDService_GetOrganizationInstanceClusterManifests_Handler,
		},
		{
			MethodName: "UpdateOrganizationInstanceCluster",
			Handler:    _ArgoCDService_UpdateOrganizationInstanceCluster_Handler,
		},
		{
			MethodName: "DeleteOrganizationInstanceCluster",
			Handler:    _ArgoCDService_DeleteOrganizationInstanceCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "argocd/v1/argocd.proto",
}
