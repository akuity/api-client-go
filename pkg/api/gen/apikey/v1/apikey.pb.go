// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: apikey/v1/apikey.proto

package apikeyv1

import (
	v1 "github.com/akuity/api-client-go/pkg/api/gen/accesscontrol/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetWorkspaceAPIKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWorkspaceAPIKeyRequest) Reset() {
	*x = GetWorkspaceAPIKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceAPIKeyRequest) ProtoMessage() {}

func (x *GetWorkspaceAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{0}
}

func (x *GetWorkspaceAPIKeyRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetWorkspaceAPIKeyRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *GetWorkspaceAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetWorkspaceAPIKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey *APIKey `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *GetWorkspaceAPIKeyResponse) Reset() {
	*x = GetWorkspaceAPIKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceAPIKeyResponse) ProtoMessage() {}

func (x *GetWorkspaceAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{1}
}

func (x *GetWorkspaceAPIKeyResponse) GetApiKey() *APIKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

type DeleteWorkspaceAPIKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWorkspaceAPIKeyRequest) Reset() {
	*x = DeleteWorkspaceAPIKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkspaceAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkspaceAPIKeyRequest) ProtoMessage() {}

func (x *DeleteWorkspaceAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkspaceAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkspaceAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteWorkspaceAPIKeyRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteWorkspaceAPIKeyRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *DeleteWorkspaceAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteWorkspaceAPIKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteWorkspaceAPIKeyResponse) Reset() {
	*x = DeleteWorkspaceAPIKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkspaceAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkspaceAPIKeyResponse) ProtoMessage() {}

func (x *DeleteWorkspaceAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkspaceAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteWorkspaceAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{3}
}

type RegenerateWorkspaceAPIKeySecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Expiry         string `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *RegenerateWorkspaceAPIKeySecretRequest) Reset() {
	*x = RegenerateWorkspaceAPIKeySecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateWorkspaceAPIKeySecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateWorkspaceAPIKeySecretRequest) ProtoMessage() {}

func (x *RegenerateWorkspaceAPIKeySecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateWorkspaceAPIKeySecretRequest.ProtoReflect.Descriptor instead.
func (*RegenerateWorkspaceAPIKeySecretRequest) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{4}
}

func (x *RegenerateWorkspaceAPIKeySecretRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *RegenerateWorkspaceAPIKeySecretRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *RegenerateWorkspaceAPIKeySecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegenerateWorkspaceAPIKeySecretRequest) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

type RegenerateWorkspaceAPIKeySecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey *APIKey `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *RegenerateWorkspaceAPIKeySecretResponse) Reset() {
	*x = RegenerateWorkspaceAPIKeySecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateWorkspaceAPIKeySecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateWorkspaceAPIKeySecretResponse) ProtoMessage() {}

func (x *RegenerateWorkspaceAPIKeySecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateWorkspaceAPIKeySecretResponse.ProtoReflect.Descriptor instead.
func (*RegenerateWorkspaceAPIKeySecretResponse) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{5}
}

func (x *RegenerateWorkspaceAPIKeySecretResponse) GetApiKey() *APIKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

type GetAPIKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAPIKeyRequest) Reset() {
	*x = GetAPIKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAPIKeyRequest) ProtoMessage() {}

func (x *GetAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*GetAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{6}
}

func (x *GetAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAPIKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey *APIKey `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *GetAPIKeyResponse) Reset() {
	*x = GetAPIKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAPIKeyResponse) ProtoMessage() {}

func (x *GetAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*GetAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{7}
}

func (x *GetAPIKeyResponse) GetApiKey() *APIKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

type DeleteAPIKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAPIKeyRequest) Reset() {
	*x = DeleteAPIKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAPIKeyRequest) ProtoMessage() {}

func (x *DeleteAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAPIKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteAPIKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAPIKeyResponse) Reset() {
	*x = DeleteAPIKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAPIKeyResponse) ProtoMessage() {}

func (x *DeleteAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{9}
}

type RegenerateAPIKeySecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Expiry string `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *RegenerateAPIKeySecretRequest) Reset() {
	*x = RegenerateAPIKeySecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateAPIKeySecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateAPIKeySecretRequest) ProtoMessage() {}

func (x *RegenerateAPIKeySecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateAPIKeySecretRequest.ProtoReflect.Descriptor instead.
func (*RegenerateAPIKeySecretRequest) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{10}
}

func (x *RegenerateAPIKeySecretRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegenerateAPIKeySecretRequest) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

type RegenerateAPIKeySecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey *APIKey `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *RegenerateAPIKeySecretResponse) Reset() {
	*x = RegenerateAPIKeySecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateAPIKeySecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateAPIKeySecretResponse) ProtoMessage() {}

func (x *RegenerateAPIKeySecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateAPIKeySecretResponse.ProtoReflect.Descriptor instead.
func (*RegenerateAPIKeySecretResponse) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{11}
}

func (x *RegenerateAPIKeySecretResponse) GetApiKey() *APIKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

type APIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description    string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Secret         *string                `protobuf:"bytes,3,opt,name=secret,proto3,oneof" json:"secret,omitempty"`
	OrganizationId string                 `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Permissions    *v1.Permissions        `protobuf:"bytes,5,opt,name=permissions,proto3" json:"permissions,omitempty"`
	CreateTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *APIKey) Reset() {
	*x = APIKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apikey_v1_apikey_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKey) ProtoMessage() {}

func (x *APIKey) ProtoReflect() protoreflect.Message {
	mi := &file_apikey_v1_apikey_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIKey.ProtoReflect.Descriptor instead.
func (*APIKey) Descriptor() ([]byte, []int) {
	return file_apikey_v1_apikey_proto_rawDescGZIP(), []int{12}
}

func (x *APIKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *APIKey) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *APIKey) GetSecret() string {
	if x != nil && x.Secret != nil {
		return *x.Secret
	}
	return ""
}

func (x *APIKey) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *APIKey) GetPermissions() *v1.Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *APIKey) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *APIKey) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

var File_apikey_v1_apikey_proto protoreflect.FileDescriptor

var file_apikey_v1_apikey_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x6b,
	0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x77, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x7a, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x5c, 0x0a, 0x27, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22,
	0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47,
	0x0a, 0x1d, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x53, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xcd, 0x02, 0x0a,
	0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0xc6, 0x08, 0x0a,
	0x0d, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x12, 0x25, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b,
	0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xa7, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x12, 0x2b, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x50, 0x12, 0x4e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xd0, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x2a, 0x4e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xfc, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x3a, 0x01, 0x2a, 0x22, 0x59, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x69, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0xc9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x0b,
	0x41, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x69, 0x6f, 0x2f, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x6b, 0x65, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x41, 0x58, 0xaa, 0x02, 0x10, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79,
	0x2e, 0x41, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x41, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x5c, 0x41, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c,
	0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x5c, 0x41, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apikey_v1_apikey_proto_rawDescOnce sync.Once
	file_apikey_v1_apikey_proto_rawDescData = file_apikey_v1_apikey_proto_rawDesc
)

func file_apikey_v1_apikey_proto_rawDescGZIP() []byte {
	file_apikey_v1_apikey_proto_rawDescOnce.Do(func() {
		file_apikey_v1_apikey_proto_rawDescData = protoimpl.X.CompressGZIP(file_apikey_v1_apikey_proto_rawDescData)
	})
	return file_apikey_v1_apikey_proto_rawDescData
}

var file_apikey_v1_apikey_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_apikey_v1_apikey_proto_goTypes = []interface{}{
	(*GetWorkspaceAPIKeyRequest)(nil),               // 0: akuity.apikey.v1.GetWorkspaceAPIKeyRequest
	(*GetWorkspaceAPIKeyResponse)(nil),              // 1: akuity.apikey.v1.GetWorkspaceAPIKeyResponse
	(*DeleteWorkspaceAPIKeyRequest)(nil),            // 2: akuity.apikey.v1.DeleteWorkspaceAPIKeyRequest
	(*DeleteWorkspaceAPIKeyResponse)(nil),           // 3: akuity.apikey.v1.DeleteWorkspaceAPIKeyResponse
	(*RegenerateWorkspaceAPIKeySecretRequest)(nil),  // 4: akuity.apikey.v1.RegenerateWorkspaceAPIKeySecretRequest
	(*RegenerateWorkspaceAPIKeySecretResponse)(nil), // 5: akuity.apikey.v1.RegenerateWorkspaceAPIKeySecretResponse
	(*GetAPIKeyRequest)(nil),                        // 6: akuity.apikey.v1.GetAPIKeyRequest
	(*GetAPIKeyResponse)(nil),                       // 7: akuity.apikey.v1.GetAPIKeyResponse
	(*DeleteAPIKeyRequest)(nil),                     // 8: akuity.apikey.v1.DeleteAPIKeyRequest
	(*DeleteAPIKeyResponse)(nil),                    // 9: akuity.apikey.v1.DeleteAPIKeyResponse
	(*RegenerateAPIKeySecretRequest)(nil),           // 10: akuity.apikey.v1.RegenerateAPIKeySecretRequest
	(*RegenerateAPIKeySecretResponse)(nil),          // 11: akuity.apikey.v1.RegenerateAPIKeySecretResponse
	(*APIKey)(nil),                                  // 12: akuity.apikey.v1.APIKey
	(*v1.Permissions)(nil),                          // 13: akuity.accesscontrol.v1.Permissions
	(*timestamppb.Timestamp)(nil),                   // 14: google.protobuf.Timestamp
}
var file_apikey_v1_apikey_proto_depIdxs = []int32{
	12, // 0: akuity.apikey.v1.GetWorkspaceAPIKeyResponse.api_key:type_name -> akuity.apikey.v1.APIKey
	12, // 1: akuity.apikey.v1.RegenerateWorkspaceAPIKeySecretResponse.api_key:type_name -> akuity.apikey.v1.APIKey
	12, // 2: akuity.apikey.v1.GetAPIKeyResponse.api_key:type_name -> akuity.apikey.v1.APIKey
	12, // 3: akuity.apikey.v1.RegenerateAPIKeySecretResponse.api_key:type_name -> akuity.apikey.v1.APIKey
	13, // 4: akuity.apikey.v1.APIKey.permissions:type_name -> akuity.accesscontrol.v1.Permissions
	14, // 5: akuity.apikey.v1.APIKey.create_time:type_name -> google.protobuf.Timestamp
	14, // 6: akuity.apikey.v1.APIKey.expire_time:type_name -> google.protobuf.Timestamp
	6,  // 7: akuity.apikey.v1.APIKeyService.GetAPIKey:input_type -> akuity.apikey.v1.GetAPIKeyRequest
	8,  // 8: akuity.apikey.v1.APIKeyService.DeleteAPIKey:input_type -> akuity.apikey.v1.DeleteAPIKeyRequest
	10, // 9: akuity.apikey.v1.APIKeyService.RegenerateAPIKeySecret:input_type -> akuity.apikey.v1.RegenerateAPIKeySecretRequest
	0,  // 10: akuity.apikey.v1.APIKeyService.GetWorkspaceAPIKey:input_type -> akuity.apikey.v1.GetWorkspaceAPIKeyRequest
	2,  // 11: akuity.apikey.v1.APIKeyService.DeleteWorkspaceAPIKey:input_type -> akuity.apikey.v1.DeleteWorkspaceAPIKeyRequest
	4,  // 12: akuity.apikey.v1.APIKeyService.RegenerateWorkspaceAPIKeySecret:input_type -> akuity.apikey.v1.RegenerateWorkspaceAPIKeySecretRequest
	7,  // 13: akuity.apikey.v1.APIKeyService.GetAPIKey:output_type -> akuity.apikey.v1.GetAPIKeyResponse
	9,  // 14: akuity.apikey.v1.APIKeyService.DeleteAPIKey:output_type -> akuity.apikey.v1.DeleteAPIKeyResponse
	11, // 15: akuity.apikey.v1.APIKeyService.RegenerateAPIKeySecret:output_type -> akuity.apikey.v1.RegenerateAPIKeySecretResponse
	1,  // 16: akuity.apikey.v1.APIKeyService.GetWorkspaceAPIKey:output_type -> akuity.apikey.v1.GetWorkspaceAPIKeyResponse
	3,  // 17: akuity.apikey.v1.APIKeyService.DeleteWorkspaceAPIKey:output_type -> akuity.apikey.v1.DeleteWorkspaceAPIKeyResponse
	5,  // 18: akuity.apikey.v1.APIKeyService.RegenerateWorkspaceAPIKeySecret:output_type -> akuity.apikey.v1.RegenerateWorkspaceAPIKeySecretResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_apikey_v1_apikey_proto_init() }
func file_apikey_v1_apikey_proto_init() {
	if File_apikey_v1_apikey_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apikey_v1_apikey_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceAPIKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceAPIKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkspaceAPIKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkspaceAPIKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateWorkspaceAPIKeySecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateWorkspaceAPIKeySecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAPIKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAPIKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAPIKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAPIKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateAPIKeySecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateAPIKeySecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apikey_v1_apikey_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apikey_v1_apikey_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apikey_v1_apikey_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apikey_v1_apikey_proto_goTypes,
		DependencyIndexes: file_apikey_v1_apikey_proto_depIdxs,
		MessageInfos:      file_apikey_v1_apikey_proto_msgTypes,
	}.Build()
	File_apikey_v1_apikey_proto = out.File
	file_apikey_v1_apikey_proto_rawDesc = nil
	file_apikey_v1_apikey_proto_goTypes = nil
	file_apikey_v1_apikey_proto_depIdxs = nil
}
