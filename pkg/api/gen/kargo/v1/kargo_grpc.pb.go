// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kargo/v1/kargo.proto

package kargov1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KargoService_ListKargoInstances_FullMethodName               = "/akuity.kargo.v1.KargoService/ListKargoInstances"
	KargoService_WatchKargoInstances_FullMethodName              = "/akuity.kargo.v1.KargoService/WatchKargoInstances"
	KargoService_CreateKargoInstance_FullMethodName              = "/akuity.kargo.v1.KargoService/CreateKargoInstance"
	KargoService_PatchKargoInstance_FullMethodName               = "/akuity.kargo.v1.KargoService/PatchKargoInstance"
	KargoService_GetKargoInstance_FullMethodName                 = "/akuity.kargo.v1.KargoService/GetKargoInstance"
	KargoService_ListKargoInstanceClusters_FullMethodName        = "/akuity.kargo.v1.KargoService/ListKargoInstanceClusters"
	KargoService_WatchKargoInstanceClusters_FullMethodName       = "/akuity.kargo.v1.KargoService/WatchKargoInstanceClusters"
	KargoService_CreateKargoInstanceCluster_FullMethodName       = "/akuity.kargo.v1.KargoService/CreateKargoInstanceCluster"
	KargoService_UpdateKargoInstanceCluster_FullMethodName       = "/akuity.kargo.v1.KargoService/UpdateKargoInstanceCluster"
	KargoService_GetKargoInstanceCluster_FullMethodName          = "/akuity.kargo.v1.KargoService/GetKargoInstanceCluster"
	KargoService_GetKargoInstanceClusterManifests_FullMethodName = "/akuity.kargo.v1.KargoService/GetKargoInstanceClusterManifests"
)

// KargoServiceClient is the client API for KargoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KargoServiceClient interface {
	ListKargoInstances(ctx context.Context, in *ListKargoInstancesRequest, opts ...grpc.CallOption) (*ListKargoInstancesResponse, error)
	WatchKargoInstances(ctx context.Context, in *WatchKargoInstancesRequest, opts ...grpc.CallOption) (KargoService_WatchKargoInstancesClient, error)
	CreateKargoInstance(ctx context.Context, in *CreateKargoInstanceRequest, opts ...grpc.CallOption) (*CreateKargoInstanceResponse, error)
	PatchKargoInstance(ctx context.Context, in *PatchKargoInstanceRequest, opts ...grpc.CallOption) (*PatchKargoInstanceResponse, error)
	GetKargoInstance(ctx context.Context, in *GetKargoInstanceRequest, opts ...grpc.CallOption) (*GetKargoInstanceResponse, error)
	ListKargoInstanceClusters(ctx context.Context, in *ListKargoInstanceClustersRequest, opts ...grpc.CallOption) (*ListKargoInstanceClustersResponse, error)
	WatchKargoInstanceClusters(ctx context.Context, in *WatchKargoInstanceClustersRequest, opts ...grpc.CallOption) (KargoService_WatchKargoInstanceClustersClient, error)
	CreateKargoInstanceCluster(ctx context.Context, in *CreateKargoInstanceClusterRequest, opts ...grpc.CallOption) (*CreateKargoInstanceClusterResponse, error)
	UpdateKargoInstanceCluster(ctx context.Context, in *UpdateKargoInstanceClusterRequest, opts ...grpc.CallOption) (*UpdateKargoInstanceClusterResponse, error)
	GetKargoInstanceCluster(ctx context.Context, in *GetKargoInstanceClusterRequest, opts ...grpc.CallOption) (*GetKargoInstanceClusterResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetKargoInstanceClusterManifests(ctx context.Context, in *GetKargoInstanceClusterManifestsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type kargoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKargoServiceClient(cc grpc.ClientConnInterface) KargoServiceClient {
	return &kargoServiceClient{cc}
}

func (c *kargoServiceClient) ListKargoInstances(ctx context.Context, in *ListKargoInstancesRequest, opts ...grpc.CallOption) (*ListKargoInstancesResponse, error) {
	out := new(ListKargoInstancesResponse)
	err := c.cc.Invoke(ctx, KargoService_ListKargoInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kargoServiceClient) WatchKargoInstances(ctx context.Context, in *WatchKargoInstancesRequest, opts ...grpc.CallOption) (KargoService_WatchKargoInstancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &KargoService_ServiceDesc.Streams[0], KargoService_WatchKargoInstances_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kargoServiceWatchKargoInstancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KargoService_WatchKargoInstancesClient interface {
	Recv() (*WatchKargoInstancesResponse, error)
	grpc.ClientStream
}

type kargoServiceWatchKargoInstancesClient struct {
	grpc.ClientStream
}

func (x *kargoServiceWatchKargoInstancesClient) Recv() (*WatchKargoInstancesResponse, error) {
	m := new(WatchKargoInstancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kargoServiceClient) CreateKargoInstance(ctx context.Context, in *CreateKargoInstanceRequest, opts ...grpc.CallOption) (*CreateKargoInstanceResponse, error) {
	out := new(CreateKargoInstanceResponse)
	err := c.cc.Invoke(ctx, KargoService_CreateKargoInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kargoServiceClient) PatchKargoInstance(ctx context.Context, in *PatchKargoInstanceRequest, opts ...grpc.CallOption) (*PatchKargoInstanceResponse, error) {
	out := new(PatchKargoInstanceResponse)
	err := c.cc.Invoke(ctx, KargoService_PatchKargoInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kargoServiceClient) GetKargoInstance(ctx context.Context, in *GetKargoInstanceRequest, opts ...grpc.CallOption) (*GetKargoInstanceResponse, error) {
	out := new(GetKargoInstanceResponse)
	err := c.cc.Invoke(ctx, KargoService_GetKargoInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kargoServiceClient) ListKargoInstanceClusters(ctx context.Context, in *ListKargoInstanceClustersRequest, opts ...grpc.CallOption) (*ListKargoInstanceClustersResponse, error) {
	out := new(ListKargoInstanceClustersResponse)
	err := c.cc.Invoke(ctx, KargoService_ListKargoInstanceClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kargoServiceClient) WatchKargoInstanceClusters(ctx context.Context, in *WatchKargoInstanceClustersRequest, opts ...grpc.CallOption) (KargoService_WatchKargoInstanceClustersClient, error) {
	stream, err := c.cc.NewStream(ctx, &KargoService_ServiceDesc.Streams[1], KargoService_WatchKargoInstanceClusters_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kargoServiceWatchKargoInstanceClustersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KargoService_WatchKargoInstanceClustersClient interface {
	Recv() (*WatchKargoInstanceClustersResponse, error)
	grpc.ClientStream
}

type kargoServiceWatchKargoInstanceClustersClient struct {
	grpc.ClientStream
}

func (x *kargoServiceWatchKargoInstanceClustersClient) Recv() (*WatchKargoInstanceClustersResponse, error) {
	m := new(WatchKargoInstanceClustersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kargoServiceClient) CreateKargoInstanceCluster(ctx context.Context, in *CreateKargoInstanceClusterRequest, opts ...grpc.CallOption) (*CreateKargoInstanceClusterResponse, error) {
	out := new(CreateKargoInstanceClusterResponse)
	err := c.cc.Invoke(ctx, KargoService_CreateKargoInstanceCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kargoServiceClient) UpdateKargoInstanceCluster(ctx context.Context, in *UpdateKargoInstanceClusterRequest, opts ...grpc.CallOption) (*UpdateKargoInstanceClusterResponse, error) {
	out := new(UpdateKargoInstanceClusterResponse)
	err := c.cc.Invoke(ctx, KargoService_UpdateKargoInstanceCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kargoServiceClient) GetKargoInstanceCluster(ctx context.Context, in *GetKargoInstanceClusterRequest, opts ...grpc.CallOption) (*GetKargoInstanceClusterResponse, error) {
	out := new(GetKargoInstanceClusterResponse)
	err := c.cc.Invoke(ctx, KargoService_GetKargoInstanceCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kargoServiceClient) GetKargoInstanceClusterManifests(ctx context.Context, in *GetKargoInstanceClusterManifestsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, KargoService_GetKargoInstanceClusterManifests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KargoServiceServer is the server API for KargoService service.
// All implementations must embed UnimplementedKargoServiceServer
// for forward compatibility
type KargoServiceServer interface {
	ListKargoInstances(context.Context, *ListKargoInstancesRequest) (*ListKargoInstancesResponse, error)
	WatchKargoInstances(*WatchKargoInstancesRequest, KargoService_WatchKargoInstancesServer) error
	CreateKargoInstance(context.Context, *CreateKargoInstanceRequest) (*CreateKargoInstanceResponse, error)
	PatchKargoInstance(context.Context, *PatchKargoInstanceRequest) (*PatchKargoInstanceResponse, error)
	GetKargoInstance(context.Context, *GetKargoInstanceRequest) (*GetKargoInstanceResponse, error)
	ListKargoInstanceClusters(context.Context, *ListKargoInstanceClustersRequest) (*ListKargoInstanceClustersResponse, error)
	WatchKargoInstanceClusters(*WatchKargoInstanceClustersRequest, KargoService_WatchKargoInstanceClustersServer) error
	CreateKargoInstanceCluster(context.Context, *CreateKargoInstanceClusterRequest) (*CreateKargoInstanceClusterResponse, error)
	UpdateKargoInstanceCluster(context.Context, *UpdateKargoInstanceClusterRequest) (*UpdateKargoInstanceClusterResponse, error)
	GetKargoInstanceCluster(context.Context, *GetKargoInstanceClusterRequest) (*GetKargoInstanceClusterResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetKargoInstanceClusterManifests(context.Context, *GetKargoInstanceClusterManifestsRequest) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedKargoServiceServer()
}

// UnimplementedKargoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKargoServiceServer struct {
}

func (UnimplementedKargoServiceServer) ListKargoInstances(context.Context, *ListKargoInstancesRequest) (*ListKargoInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKargoInstances not implemented")
}
func (UnimplementedKargoServiceServer) WatchKargoInstances(*WatchKargoInstancesRequest, KargoService_WatchKargoInstancesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchKargoInstances not implemented")
}
func (UnimplementedKargoServiceServer) CreateKargoInstance(context.Context, *CreateKargoInstanceRequest) (*CreateKargoInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKargoInstance not implemented")
}
func (UnimplementedKargoServiceServer) PatchKargoInstance(context.Context, *PatchKargoInstanceRequest) (*PatchKargoInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchKargoInstance not implemented")
}
func (UnimplementedKargoServiceServer) GetKargoInstance(context.Context, *GetKargoInstanceRequest) (*GetKargoInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKargoInstance not implemented")
}
func (UnimplementedKargoServiceServer) ListKargoInstanceClusters(context.Context, *ListKargoInstanceClustersRequest) (*ListKargoInstanceClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKargoInstanceClusters not implemented")
}
func (UnimplementedKargoServiceServer) WatchKargoInstanceClusters(*WatchKargoInstanceClustersRequest, KargoService_WatchKargoInstanceClustersServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchKargoInstanceClusters not implemented")
}
func (UnimplementedKargoServiceServer) CreateKargoInstanceCluster(context.Context, *CreateKargoInstanceClusterRequest) (*CreateKargoInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKargoInstanceCluster not implemented")
}
func (UnimplementedKargoServiceServer) UpdateKargoInstanceCluster(context.Context, *UpdateKargoInstanceClusterRequest) (*UpdateKargoInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKargoInstanceCluster not implemented")
}
func (UnimplementedKargoServiceServer) GetKargoInstanceCluster(context.Context, *GetKargoInstanceClusterRequest) (*GetKargoInstanceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKargoInstanceCluster not implemented")
}
func (UnimplementedKargoServiceServer) GetKargoInstanceClusterManifests(context.Context, *GetKargoInstanceClusterManifestsRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKargoInstanceClusterManifests not implemented")
}
func (UnimplementedKargoServiceServer) mustEmbedUnimplementedKargoServiceServer() {}

// UnsafeKargoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KargoServiceServer will
// result in compilation errors.
type UnsafeKargoServiceServer interface {
	mustEmbedUnimplementedKargoServiceServer()
}

func RegisterKargoServiceServer(s grpc.ServiceRegistrar, srv KargoServiceServer) {
	s.RegisterService(&KargoService_ServiceDesc, srv)
}

func _KargoService_ListKargoInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKargoInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KargoServiceServer).ListKargoInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KargoService_ListKargoInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KargoServiceServer).ListKargoInstances(ctx, req.(*ListKargoInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KargoService_WatchKargoInstances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchKargoInstancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KargoServiceServer).WatchKargoInstances(m, &kargoServiceWatchKargoInstancesServer{stream})
}

type KargoService_WatchKargoInstancesServer interface {
	Send(*WatchKargoInstancesResponse) error
	grpc.ServerStream
}

type kargoServiceWatchKargoInstancesServer struct {
	grpc.ServerStream
}

func (x *kargoServiceWatchKargoInstancesServer) Send(m *WatchKargoInstancesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KargoService_CreateKargoInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKargoInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KargoServiceServer).CreateKargoInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KargoService_CreateKargoInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KargoServiceServer).CreateKargoInstance(ctx, req.(*CreateKargoInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KargoService_PatchKargoInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchKargoInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KargoServiceServer).PatchKargoInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KargoService_PatchKargoInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KargoServiceServer).PatchKargoInstance(ctx, req.(*PatchKargoInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KargoService_GetKargoInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKargoInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KargoServiceServer).GetKargoInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KargoService_GetKargoInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KargoServiceServer).GetKargoInstance(ctx, req.(*GetKargoInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KargoService_ListKargoInstanceClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKargoInstanceClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KargoServiceServer).ListKargoInstanceClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KargoService_ListKargoInstanceClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KargoServiceServer).ListKargoInstanceClusters(ctx, req.(*ListKargoInstanceClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KargoService_WatchKargoInstanceClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchKargoInstanceClustersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KargoServiceServer).WatchKargoInstanceClusters(m, &kargoServiceWatchKargoInstanceClustersServer{stream})
}

type KargoService_WatchKargoInstanceClustersServer interface {
	Send(*WatchKargoInstanceClustersResponse) error
	grpc.ServerStream
}

type kargoServiceWatchKargoInstanceClustersServer struct {
	grpc.ServerStream
}

func (x *kargoServiceWatchKargoInstanceClustersServer) Send(m *WatchKargoInstanceClustersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KargoService_CreateKargoInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKargoInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KargoServiceServer).CreateKargoInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KargoService_CreateKargoInstanceCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KargoServiceServer).CreateKargoInstanceCluster(ctx, req.(*CreateKargoInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KargoService_UpdateKargoInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKargoInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KargoServiceServer).UpdateKargoInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KargoService_UpdateKargoInstanceCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KargoServiceServer).UpdateKargoInstanceCluster(ctx, req.(*UpdateKargoInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KargoService_GetKargoInstanceCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKargoInstanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KargoServiceServer).GetKargoInstanceCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KargoService_GetKargoInstanceCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KargoServiceServer).GetKargoInstanceCluster(ctx, req.(*GetKargoInstanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KargoService_GetKargoInstanceClusterManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKargoInstanceClusterManifestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KargoServiceServer).GetKargoInstanceClusterManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KargoService_GetKargoInstanceClusterManifests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KargoServiceServer).GetKargoInstanceClusterManifests(ctx, req.(*GetKargoInstanceClusterManifestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KargoService_ServiceDesc is the grpc.ServiceDesc for KargoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KargoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akuity.kargo.v1.KargoService",
	HandlerType: (*KargoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKargoInstances",
			Handler:    _KargoService_ListKargoInstances_Handler,
		},
		{
			MethodName: "CreateKargoInstance",
			Handler:    _KargoService_CreateKargoInstance_Handler,
		},
		{
			MethodName: "PatchKargoInstance",
			Handler:    _KargoService_PatchKargoInstance_Handler,
		},
		{
			MethodName: "GetKargoInstance",
			Handler:    _KargoService_GetKargoInstance_Handler,
		},
		{
			MethodName: "ListKargoInstanceClusters",
			Handler:    _KargoService_ListKargoInstanceClusters_Handler,
		},
		{
			MethodName: "CreateKargoInstanceCluster",
			Handler:    _KargoService_CreateKargoInstanceCluster_Handler,
		},
		{
			MethodName: "UpdateKargoInstanceCluster",
			Handler:    _KargoService_UpdateKargoInstanceCluster_Handler,
		},
		{
			MethodName: "GetKargoInstanceCluster",
			Handler:    _KargoService_GetKargoInstanceCluster_Handler,
		},
		{
			MethodName: "GetKargoInstanceClusterManifests",
			Handler:    _KargoService_GetKargoInstanceClusterManifests_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchKargoInstances",
			Handler:       _KargoService_WatchKargoInstances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchKargoInstanceClusters",
			Handler:       _KargoService_WatchKargoInstanceClusters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kargo/v1/kargo.proto",
}
