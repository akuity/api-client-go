// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: kargo/v1/kargo.proto

package kargov1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	url "net/url"
)

// KargoServiceGatewayClient is the interface for KargoService service client.
type KargoServiceGatewayClient interface {
	ListKargoInstances(context.Context, *ListKargoInstancesRequest) (*ListKargoInstancesResponse, error)
	WatchKargoInstances(context.Context, *WatchKargoInstancesRequest) (<-chan *WatchKargoInstancesResponse, <-chan error, error)
	CreateKargoInstance(context.Context, *CreateKargoInstanceRequest) (*CreateKargoInstanceResponse, error)
	PatchKargoInstance(context.Context, *PatchKargoInstanceRequest) (*PatchKargoInstanceResponse, error)
	GetKargoInstance(context.Context, *GetKargoInstanceRequest) (*GetKargoInstanceResponse, error)
	ListKargoInstanceAgents(context.Context, *ListKargoInstanceAgentsRequest) (*ListKargoInstanceAgentsResponse, error)
	WatchKargoInstanceAgents(context.Context, *WatchKargoInstanceAgentsRequest) (<-chan *WatchKargoInstanceAgentsResponse, <-chan error, error)
	CreateKargoInstanceAgent(context.Context, *CreateKargoInstanceAgentRequest) (*CreateKargoInstanceAgentResponse, error)
	UpdateKargoInstanceAgent(context.Context, *UpdateKargoInstanceAgentRequest) (*UpdateKargoInstanceAgentResponse, error)
	UpdateKargoInstanceAgents(context.Context, *UpdateKargoInstanceAgentsRequest) (*UpdateKargoInstanceAgentsResponse, error)
	GetKargoInstanceAgent(context.Context, *GetKargoInstanceAgentRequest) (*GetKargoInstanceAgentResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetKargoInstanceAgentManifests(context.Context, *GetKargoInstanceAgentManifestsRequest) (<-chan *httpbody.HttpBody, <-chan error, error)
	GetInstanceAgentCommand(context.Context, *GetInstanceAgentCommandRequest) (*GetInstanceAgentCommandResponse, error)
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error)
	DeleteInstanceAgent(context.Context, *DeleteInstanceAgentRequest) (*DeleteInstanceAgentResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	RotateInstanceAgentCredentials(context.Context, *RotateInstanceAgentCredentialsRequest) (*RotateInstanceAgentCredentialsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	UpdateInstanceAgentVersion(context.Context, *UpdateInstanceAgentVersionRequest) (*UpdateInstanceAgentVersionResponse, error)
	GetPromotionStats(context.Context, *GetPromotionStatsRequest) (*GetPromotionStatsResponse, error)
	GetPromotionEvents(context.Context, *GetPromotionEventsRequest) (*GetPromotionEventsResponse, error)
	GetStageSpecificStats(context.Context, *GetStageSpecificStatsRequest) (*GetStageSpecificStatsResponse, error)
}

func NewKargoServiceGatewayClient(c gateway.Client) KargoServiceGatewayClient {
	return &kargoServiceGatewayClient{
		gwc: c,
	}
}

type kargoServiceGatewayClient struct {
	gwc gateway.Client
}

func (c *kargoServiceGatewayClient) ListKargoInstances(ctx context.Context, req *ListKargoInstancesRequest) (*ListKargoInstancesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	q := url.Values{}
	if req.WorkspaceId != nil {
		q.Add("workspaceId", fmt.Sprintf("%v", *req.WorkspaceId))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListKargoInstancesResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) WatchKargoInstances(ctx context.Context, req *WatchKargoInstancesRequest) (<-chan *WatchKargoInstancesResponse, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/stream/orgs/{organization_id}/kargo/instances")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	q := url.Values{}
	if req.InstanceId != nil {
		q.Add("instanceId", fmt.Sprintf("%v", *req.InstanceId))
	}
	if req.WorkspaceId != nil {
		q.Add("workspaceId", fmt.Sprintf("%v", *req.WorkspaceId))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoStreamingRequest[WatchKargoInstancesResponse](ctx, c.gwc, gwReq)
}

func (c *kargoServiceGatewayClient) CreateKargoInstance(ctx context.Context, req *CreateKargoInstanceRequest) (*CreateKargoInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateKargoInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) PatchKargoInstance(ctx context.Context, req *PatchKargoInstanceRequest) (*PatchKargoInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/orgs/{organization_id}/kargo/instances/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req.Patch)
	return gateway.DoRequest[PatchKargoInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetKargoInstance(ctx context.Context, req *GetKargoInstanceRequest) (*GetKargoInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{name}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("name", fmt.Sprintf("%v", req.Name))
	return gateway.DoRequest[GetKargoInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) ListKargoInstanceAgents(ctx context.Context, req *ListKargoInstanceAgentsRequest) (*ListKargoInstanceAgentsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	q := url.Values{}
	if req.Filter != nil {
		if req.Filter.NameLike != nil {
			q.Add("filter.nameLike", fmt.Sprintf("%v", *req.Filter.NameLike))
		}
		for _, v := range req.Filter.AgentStatus {
			q.Add("filter.agentStatus", v.String())
		}
		for _, v := range req.Filter.AgentVersion {
			q.Add("filter.agentVersion", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filter.KargoVersion {
			q.Add("filter.kargoVersion", fmt.Sprintf("%v", v))
		}
		if req.Filter.Limit != nil {
			q.Add("filter.limit", fmt.Sprintf("%v", *req.Filter.Limit))
		}
		if req.Filter.Offset != nil {
			q.Add("filter.offset", fmt.Sprintf("%v", *req.Filter.Offset))
		}
		if req.Filter.ExcludeAgentVersion != nil {
			q.Add("filter.excludeAgentVersion", fmt.Sprintf("%v", *req.Filter.ExcludeAgentVersion))
		}
		if req.Filter.OutdatedManifest != nil {
			q.Add("filter.outdatedManifest", fmt.Sprintf("%v", *req.Filter.OutdatedManifest))
		}
		for _, v := range req.Filter.Namespace {
			q.Add("filter.namespace", fmt.Sprintf("%v", v))
		}
		for k, v := range req.Filter.Labels {
			key := fmt.Sprintf("filter.labels[%v]", k)
			q.Add(key, fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filter.RemoteArgocdIds {
			q.Add("filter.remoteArgocdIds", fmt.Sprintf("%v", v))
		}
		if req.Filter.SelfManaged != nil {
			q.Add("filter.selfManaged", fmt.Sprintf("%v", *req.Filter.SelfManaged))
		}
		if req.Filter.NeedReapply != nil {
			q.Add("filter.needReapply", fmt.Sprintf("%v", *req.Filter.NeedReapply))
		}
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListKargoInstanceAgentsResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) WatchKargoInstanceAgents(ctx context.Context, req *WatchKargoInstanceAgentsRequest) (<-chan *WatchKargoInstanceAgentsResponse, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/stream/orgs/{organization_id}/kargo/instances/{instance_id}/agents")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	q := url.Values{}
	if req.AgentId != nil {
		q.Add("agentId", fmt.Sprintf("%v", *req.AgentId))
	}
	if req.MinAgentName != nil {
		q.Add("minAgentName", fmt.Sprintf("%v", *req.MinAgentName))
	}
	if req.MaxAgentName != nil {
		q.Add("maxAgentName", fmt.Sprintf("%v", *req.MaxAgentName))
	}
	if req.Filter != nil {
		if req.Filter.NameLike != nil {
			q.Add("filter.nameLike", fmt.Sprintf("%v", *req.Filter.NameLike))
		}
		for _, v := range req.Filter.AgentStatus {
			q.Add("filter.agentStatus", v.String())
		}
		for _, v := range req.Filter.AgentVersion {
			q.Add("filter.agentVersion", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filter.KargoVersion {
			q.Add("filter.kargoVersion", fmt.Sprintf("%v", v))
		}
		if req.Filter.Limit != nil {
			q.Add("filter.limit", fmt.Sprintf("%v", *req.Filter.Limit))
		}
		if req.Filter.Offset != nil {
			q.Add("filter.offset", fmt.Sprintf("%v", *req.Filter.Offset))
		}
		if req.Filter.ExcludeAgentVersion != nil {
			q.Add("filter.excludeAgentVersion", fmt.Sprintf("%v", *req.Filter.ExcludeAgentVersion))
		}
		if req.Filter.OutdatedManifest != nil {
			q.Add("filter.outdatedManifest", fmt.Sprintf("%v", *req.Filter.OutdatedManifest))
		}
		for _, v := range req.Filter.Namespace {
			q.Add("filter.namespace", fmt.Sprintf("%v", v))
		}
		for k, v := range req.Filter.Labels {
			key := fmt.Sprintf("filter.labels[%v]", k)
			q.Add(key, fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filter.RemoteArgocdIds {
			q.Add("filter.remoteArgocdIds", fmt.Sprintf("%v", v))
		}
		if req.Filter.SelfManaged != nil {
			q.Add("filter.selfManaged", fmt.Sprintf("%v", *req.Filter.SelfManaged))
		}
		if req.Filter.NeedReapply != nil {
			q.Add("filter.needReapply", fmt.Sprintf("%v", *req.Filter.NeedReapply))
		}
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoStreamingRequest[WatchKargoInstanceAgentsResponse](ctx, c.gwc, gwReq)
}

func (c *kargoServiceGatewayClient) CreateKargoInstanceAgent(ctx context.Context, req *CreateKargoInstanceAgentRequest) (*CreateKargoInstanceAgentResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateKargoInstanceAgentResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) UpdateKargoInstanceAgent(ctx context.Context, req *UpdateKargoInstanceAgentRequest) (*UpdateKargoInstanceAgentResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateKargoInstanceAgentResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) UpdateKargoInstanceAgents(ctx context.Context, req *UpdateKargoInstanceAgentsRequest) (*UpdateKargoInstanceAgentsResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateKargoInstanceAgentsResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetKargoInstanceAgent(ctx context.Context, req *GetKargoInstanceAgentRequest) (*GetKargoInstanceAgentResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetKargoInstanceAgentResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetKargoInstanceAgentManifests(ctx context.Context, req *GetKargoInstanceAgentManifestsRequest) (<-chan *httpbody.HttpBody, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/{id}/manifests")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	q := url.Values{}
	if req.SkipNamespace != nil {
		q.Add("skipNamespace", fmt.Sprintf("%v", *req.SkipNamespace))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoStreamingRequest[httpbody.HttpBody](ctx, c.gwc, gwReq)
}

func (c *kargoServiceGatewayClient) GetInstanceAgentCommand(ctx context.Context, req *GetInstanceAgentCommandRequest) (*GetInstanceAgentCommandResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/{id}/command")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	q := url.Values{}
	q.Add("locationOrigin", fmt.Sprintf("%v", req.LocationOrigin))
	q.Add("type", fmt.Sprintf("%v", req.Type))
	if req.SkipNamespace != nil {
		q.Add("skipNamespace", fmt.Sprintf("%v", *req.SkipNamespace))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[GetInstanceAgentCommandResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) DeleteInstance(ctx context.Context, req *DeleteInstanceRequest) (*DeleteInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/orgs/{organization_id}/kargo/instances/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[DeleteInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) DeleteInstanceAgent(ctx context.Context, req *DeleteInstanceAgentRequest) (*DeleteInstanceAgentResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[DeleteInstanceAgentResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) RotateInstanceAgentCredentials(ctx context.Context, req *RotateInstanceAgentCredentialsRequest) (*RotateInstanceAgentCredentialsResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/rotate-credentials")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetBody(req)
	return gateway.DoRequest[RotateInstanceAgentCredentialsResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) UpdateInstanceAgentVersion(ctx context.Context, req *UpdateInstanceAgentVersionRequest) (*UpdateInstanceAgentVersionResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/version")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateInstanceAgentVersionResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetPromotionStats(ctx context.Context, req *GetPromotionStatsRequest) (*GetPromotionStatsResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances/promotions-stats")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[GetPromotionStatsResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetPromotionEvents(ctx context.Context, req *GetPromotionEventsRequest) (*GetPromotionEventsResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances/promotions-events")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[GetPromotionEventsResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetStageSpecificStats(ctx context.Context, req *GetStageSpecificStatsRequest) (*GetStageSpecificStatsResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances/stage-specific-stats")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[GetStageSpecificStatsResponse](ctx, gwReq)
}
