// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: kargo/v1/kargo.proto

package kargov1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	url "net/url"
)

// KargoServiceGatewayClient is the interface for KargoService service client.
type KargoServiceGatewayClient interface {
	ListKargoInstances(context.Context, *ListKargoInstancesRequest) (*ListKargoInstancesResponse, error)
	WatchKargoInstances(context.Context, *WatchKargoInstancesRequest) (<-chan *WatchKargoInstancesResponse, <-chan error, error)
	CreateKargoInstance(context.Context, *CreateKargoInstanceRequest) (*CreateKargoInstanceResponse, error)
	PatchKargoInstance(context.Context, *PatchKargoInstanceRequest) (*PatchKargoInstanceResponse, error)
	GetKargoInstance(context.Context, *GetKargoInstanceRequest) (*GetKargoInstanceResponse, error)
	ListKargoInstanceClusters(context.Context, *ListKargoInstanceClustersRequest) (*ListKargoInstanceClustersResponse, error)
	WatchKargoInstanceClusters(context.Context, *WatchKargoInstanceClustersRequest) (<-chan *WatchKargoInstanceClustersResponse, <-chan error, error)
	CreateKargoInstanceCluster(context.Context, *CreateKargoInstanceClusterRequest) (*CreateKargoInstanceClusterResponse, error)
	UpdateKargoInstanceCluster(context.Context, *UpdateKargoInstanceClusterRequest) (*UpdateKargoInstanceClusterResponse, error)
	GetKargoInstanceCluster(context.Context, *GetKargoInstanceClusterRequest) (*GetKargoInstanceClusterResponse, error)
}

func NewKargoServiceGatewayClient(c gateway.Client) KargoServiceGatewayClient {
	return &kargoServiceGatewayClient{
		gwc: c,
	}
}

type kargoServiceGatewayClient struct {
	gwc gateway.Client
}

func (c *kargoServiceGatewayClient) ListKargoInstances(ctx context.Context, req *ListKargoInstancesRequest) (*ListKargoInstancesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	return gateway.DoRequest[ListKargoInstancesResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) WatchKargoInstances(ctx context.Context, req *WatchKargoInstancesRequest) (<-chan *WatchKargoInstancesResponse, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/stream/orgs/{organization_id}/kargo/instances")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	q := url.Values{}
	if req.InstanceId != nil {
		q.Add("instanceId", fmt.Sprintf("%v", *req.InstanceId))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoStreamingRequest[WatchKargoInstancesResponse](ctx, c.gwc, gwReq)
}

func (c *kargoServiceGatewayClient) CreateKargoInstance(ctx context.Context, req *CreateKargoInstanceRequest) (*CreateKargoInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateKargoInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) PatchKargoInstance(ctx context.Context, req *PatchKargoInstanceRequest) (*PatchKargoInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/orgs/{organization_id}/kargo/instances/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req.Patch)
	return gateway.DoRequest[PatchKargoInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetKargoInstance(ctx context.Context, req *GetKargoInstanceRequest) (*GetKargoInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{name}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("name", fmt.Sprintf("%v", req.Name))
	return gateway.DoRequest[GetKargoInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) ListKargoInstanceClusters(ctx context.Context, req *ListKargoInstanceClustersRequest) (*ListKargoInstanceClustersResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/clusters")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	q := url.Values{}
	if req.Filter != nil {
		if req.Filter.NameLike != nil {
			q.Add("filter.nameLike", fmt.Sprintf("%v", *req.Filter.NameLike))
		}
		if req.Filter.Limit != nil {
			q.Add("filter.limit", fmt.Sprintf("%v", *req.Filter.Limit))
		}
		if req.Filter.Offset != nil {
			q.Add("filter.offset", fmt.Sprintf("%v", *req.Filter.Offset))
		}
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListKargoInstanceClustersResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) WatchKargoInstanceClusters(ctx context.Context, req *WatchKargoInstanceClustersRequest) (<-chan *WatchKargoInstanceClustersResponse, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/stream/orgs/{organization_id}/kargo/instances/{instance_id}/clusters")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	q := url.Values{}
	if req.ClusterId != nil {
		q.Add("clusterId", fmt.Sprintf("%v", *req.ClusterId))
	}
	if req.MinClusterName != nil {
		q.Add("minClusterName", fmt.Sprintf("%v", *req.MinClusterName))
	}
	if req.MaxClusterName != nil {
		q.Add("maxClusterName", fmt.Sprintf("%v", *req.MaxClusterName))
	}
	if req.Filter != nil {
		if req.Filter.NameLike != nil {
			q.Add("filter.nameLike", fmt.Sprintf("%v", *req.Filter.NameLike))
		}
		if req.Filter.Limit != nil {
			q.Add("filter.limit", fmt.Sprintf("%v", *req.Filter.Limit))
		}
		if req.Filter.Offset != nil {
			q.Add("filter.offset", fmt.Sprintf("%v", *req.Filter.Offset))
		}
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoStreamingRequest[WatchKargoInstanceClustersResponse](ctx, c.gwc, gwReq)
}

func (c *kargoServiceGatewayClient) CreateKargoInstanceCluster(ctx context.Context, req *CreateKargoInstanceClusterRequest) (*CreateKargoInstanceClusterResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/clusters")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateKargoInstanceClusterResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) UpdateKargoInstanceCluster(ctx context.Context, req *UpdateKargoInstanceClusterRequest) (*UpdateKargoInstanceClusterResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/clusters/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateKargoInstanceClusterResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetKargoInstanceCluster(ctx context.Context, req *GetKargoInstanceClusterRequest) (*GetKargoInstanceClusterResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/clusters/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetKargoInstanceClusterResponse](ctx, gwReq)
}
