// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: kargo/v1/kargo.proto

package kargov1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	url "net/url"
)

// KargoServiceGatewayClient is the interface for KargoService service client.
type KargoServiceGatewayClient interface {
	ListKargoInstances(context.Context, *ListKargoInstancesRequest) (*ListKargoInstancesResponse, error)
	WatchKargoInstances(context.Context, *WatchKargoInstancesRequest) (<-chan *WatchKargoInstancesResponse, <-chan error, error)
	CreateKargoInstance(context.Context, *CreateKargoInstanceRequest) (*CreateKargoInstanceResponse, error)
	PatchKargoInstance(context.Context, *PatchKargoInstanceRequest) (*PatchKargoInstanceResponse, error)
	GetKargoInstance(context.Context, *GetKargoInstanceRequest) (*GetKargoInstanceResponse, error)
	ListKargoInstanceAgents(context.Context, *ListKargoInstanceAgentsRequest) (*ListKargoInstanceAgentsResponse, error)
	WatchKargoInstanceAgents(context.Context, *WatchKargoInstanceAgentsRequest) (<-chan *WatchKargoInstanceAgentsResponse, <-chan error, error)
	CreateKargoInstanceAgent(context.Context, *CreateKargoInstanceAgentRequest) (*CreateKargoInstanceAgentResponse, error)
	UpdateKargoInstanceAgent(context.Context, *UpdateKargoInstanceAgentRequest) (*UpdateKargoInstanceAgentResponse, error)
	GetKargoInstanceAgent(context.Context, *GetKargoInstanceAgentRequest) (*GetKargoInstanceAgentResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetKargoInstanceAgentManifests(context.Context, *GetKargoInstanceAgentManifestsRequest) (<-chan *httpbody.HttpBody, <-chan error, error)
}

func NewKargoServiceGatewayClient(c gateway.Client) KargoServiceGatewayClient {
	return &kargoServiceGatewayClient{
		gwc: c,
	}
}

type kargoServiceGatewayClient struct {
	gwc gateway.Client
}

func (c *kargoServiceGatewayClient) ListKargoInstances(ctx context.Context, req *ListKargoInstancesRequest) (*ListKargoInstancesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	return gateway.DoRequest[ListKargoInstancesResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) WatchKargoInstances(ctx context.Context, req *WatchKargoInstancesRequest) (<-chan *WatchKargoInstancesResponse, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/stream/orgs/{organization_id}/kargo/instances")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	q := url.Values{}
	if req.InstanceId != nil {
		q.Add("instanceId", fmt.Sprintf("%v", *req.InstanceId))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoStreamingRequest[WatchKargoInstancesResponse](ctx, c.gwc, gwReq)
}

func (c *kargoServiceGatewayClient) CreateKargoInstance(ctx context.Context, req *CreateKargoInstanceRequest) (*CreateKargoInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateKargoInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) PatchKargoInstance(ctx context.Context, req *PatchKargoInstanceRequest) (*PatchKargoInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/orgs/{organization_id}/kargo/instances/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req.Patch)
	return gateway.DoRequest[PatchKargoInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetKargoInstance(ctx context.Context, req *GetKargoInstanceRequest) (*GetKargoInstanceResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{name}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("name", fmt.Sprintf("%v", req.Name))
	return gateway.DoRequest[GetKargoInstanceResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) ListKargoInstanceAgents(ctx context.Context, req *ListKargoInstanceAgentsRequest) (*ListKargoInstanceAgentsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	q := url.Values{}
	if req.Filter != nil {
		if req.Filter.NameLike != nil {
			q.Add("filter.nameLike", fmt.Sprintf("%v", *req.Filter.NameLike))
		}
		if req.Filter.Limit != nil {
			q.Add("filter.limit", fmt.Sprintf("%v", *req.Filter.Limit))
		}
		if req.Filter.Offset != nil {
			q.Add("filter.offset", fmt.Sprintf("%v", *req.Filter.Offset))
		}
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListKargoInstanceAgentsResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) WatchKargoInstanceAgents(ctx context.Context, req *WatchKargoInstanceAgentsRequest) (<-chan *WatchKargoInstanceAgentsResponse, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/stream/orgs/{organization_id}/kargo/instances/{instance_id}/agents")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	q := url.Values{}
	if req.AgentId != nil {
		q.Add("agentId", fmt.Sprintf("%v", *req.AgentId))
	}
	if req.MinAgentName != nil {
		q.Add("minAgentName", fmt.Sprintf("%v", *req.MinAgentName))
	}
	if req.MaxAgentName != nil {
		q.Add("maxAgentName", fmt.Sprintf("%v", *req.MaxAgentName))
	}
	if req.Filter != nil {
		if req.Filter.NameLike != nil {
			q.Add("filter.nameLike", fmt.Sprintf("%v", *req.Filter.NameLike))
		}
		if req.Filter.Limit != nil {
			q.Add("filter.limit", fmt.Sprintf("%v", *req.Filter.Limit))
		}
		if req.Filter.Offset != nil {
			q.Add("filter.offset", fmt.Sprintf("%v", *req.Filter.Offset))
		}
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoStreamingRequest[WatchKargoInstanceAgentsResponse](ctx, c.gwc, gwReq)
}

func (c *kargoServiceGatewayClient) CreateKargoInstanceAgent(ctx context.Context, req *CreateKargoInstanceAgentRequest) (*CreateKargoInstanceAgentResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateKargoInstanceAgentResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) UpdateKargoInstanceAgent(ctx context.Context, req *UpdateKargoInstanceAgentRequest) (*UpdateKargoInstanceAgentResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateKargoInstanceAgentResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetKargoInstanceAgent(ctx context.Context, req *GetKargoInstanceAgentRequest) (*GetKargoInstanceAgentResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetKargoInstanceAgentResponse](ctx, gwReq)
}

func (c *kargoServiceGatewayClient) GetKargoInstanceAgentManifests(ctx context.Context, req *GetKargoInstanceAgentManifestsRequest) (<-chan *httpbody.HttpBody, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/kargo/instances/{instance_id}/agents/{id}/manifests")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("instance_id", fmt.Sprintf("%v", req.InstanceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoStreamingRequest[httpbody.HttpBody](ctx, c.gwc, gwReq)
}
