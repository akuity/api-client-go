// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: organization/v1/organization.proto

package organizationv1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganizationService_ListAuthenticatedUserOrganizations_FullMethodName   = "/akuity.organization.v1.OrganizationService/ListAuthenticatedUserOrganizations"
	OrganizationService_GetOrganization_FullMethodName                      = "/akuity.organization.v1.OrganizationService/GetOrganization"
	OrganizationService_GetOrganizationPermissions_FullMethodName           = "/akuity.organization.v1.OrganizationService/GetOrganizationPermissions"
	OrganizationService_CreateOrganization_FullMethodName                   = "/akuity.organization.v1.OrganizationService/CreateOrganization"
	OrganizationService_UpdateOrganization_FullMethodName                   = "/akuity.organization.v1.OrganizationService/UpdateOrganization"
	OrganizationService_DeleteOrganization_FullMethodName                   = "/akuity.organization.v1.OrganizationService/DeleteOrganization"
	OrganizationService_ListOrganizationMembers_FullMethodName              = "/akuity.organization.v1.OrganizationService/ListOrganizationMembers"
	OrganizationService_ListOrganizationInvitees_FullMethodName             = "/akuity.organization.v1.OrganizationService/ListOrganizationInvitees"
	OrganizationService_GetUserRoleInOrganization_FullMethodName            = "/akuity.organization.v1.OrganizationService/GetUserRoleInOrganization"
	OrganizationService_InviteMembers_FullMethodName                        = "/akuity.organization.v1.OrganizationService/InviteMembers"
	OrganizationService_UninviteOrganizationMember_FullMethodName           = "/akuity.organization.v1.OrganizationService/UninviteOrganizationMember"
	OrganizationService_RemoveOrganizationMember_FullMethodName             = "/akuity.organization.v1.OrganizationService/RemoveOrganizationMember"
	OrganizationService_UpdateOrganizationMemberRole_FullMethodName         = "/akuity.organization.v1.OrganizationService/UpdateOrganizationMemberRole"
	OrganizationService_JoinOrganization_FullMethodName                     = "/akuity.organization.v1.OrganizationService/JoinOrganization"
	OrganizationService_RejectOrganization_FullMethodName                   = "/akuity.organization.v1.OrganizationService/RejectOrganization"
	OrganizationService_ListOrganizationAPIKeys_FullMethodName              = "/akuity.organization.v1.OrganizationService/ListOrganizationAPIKeys"
	OrganizationService_CreateOrganizationAPIKey_FullMethodName             = "/akuity.organization.v1.OrganizationService/CreateOrganizationAPIKey"
	OrganizationService_ListWorkspaceAPIKeys_FullMethodName                 = "/akuity.organization.v1.OrganizationService/ListWorkspaceAPIKeys"
	OrganizationService_CreateWorkspaceAPIKey_FullMethodName                = "/akuity.organization.v1.OrganizationService/CreateWorkspaceAPIKey"
	OrganizationService_GetAuditLogs_FullMethodName                         = "/akuity.organization.v1.OrganizationService/GetAuditLogs"
	OrganizationService_ListAuditLogsArchives_FullMethodName                = "/akuity.organization.v1.OrganizationService/ListAuditLogsArchives"
	OrganizationService_GetAuditLogsInCSV_FullMethodName                    = "/akuity.organization.v1.OrganizationService/GetAuditLogsInCSV"
	OrganizationService_GetCustomerDetails_FullMethodName                   = "/akuity.organization.v1.OrganizationService/GetCustomerDetails"
	OrganizationService_UpdateBillingDetails_FullMethodName                 = "/akuity.organization.v1.OrganizationService/UpdateBillingDetails"
	OrganizationService_BillingCheckout_FullMethodName                      = "/akuity.organization.v1.OrganizationService/BillingCheckout"
	OrganizationService_UpdateSubscription_FullMethodName                   = "/akuity.organization.v1.OrganizationService/UpdateSubscription"
	OrganizationService_GetAvailableAddons_FullMethodName                   = "/akuity.organization.v1.OrganizationService/GetAvailableAddons"
	OrganizationService_GetSSOConfiguration_FullMethodName                  = "/akuity.organization.v1.OrganizationService/GetSSOConfiguration"
	OrganizationService_EnsureSSOConfiguration_FullMethodName               = "/akuity.organization.v1.OrganizationService/EnsureSSOConfiguration"
	OrganizationService_DeleteSSOConfiguration_FullMethodName               = "/akuity.organization.v1.OrganizationService/DeleteSSOConfiguration"
	OrganizationService_GetFeatureGates_FullMethodName                      = "/akuity.organization.v1.OrganizationService/GetFeatureGates"
	OrganizationService_GetOIDCMap_FullMethodName                           = "/akuity.organization.v1.OrganizationService/GetOIDCMap"
	OrganizationService_UpdateOIDCMap_FullMethodName                        = "/akuity.organization.v1.OrganizationService/UpdateOIDCMap"
	OrganizationService_CreateCustomRole_FullMethodName                     = "/akuity.organization.v1.OrganizationService/CreateCustomRole"
	OrganizationService_UpdateCustomRole_FullMethodName                     = "/akuity.organization.v1.OrganizationService/UpdateCustomRole"
	OrganizationService_GetCustomRole_FullMethodName                        = "/akuity.organization.v1.OrganizationService/GetCustomRole"
	OrganizationService_ListCustomRoles_FullMethodName                      = "/akuity.organization.v1.OrganizationService/ListCustomRoles"
	OrganizationService_DeleteCustomRole_FullMethodName                     = "/akuity.organization.v1.OrganizationService/DeleteCustomRole"
	OrganizationService_CreateTeam_FullMethodName                           = "/akuity.organization.v1.OrganizationService/CreateTeam"
	OrganizationService_UpdateTeam_FullMethodName                           = "/akuity.organization.v1.OrganizationService/UpdateTeam"
	OrganizationService_GetTeam_FullMethodName                              = "/akuity.organization.v1.OrganizationService/GetTeam"
	OrganizationService_ListTeams_FullMethodName                            = "/akuity.organization.v1.OrganizationService/ListTeams"
	OrganizationService_DeleteTeam_FullMethodName                           = "/akuity.organization.v1.OrganizationService/DeleteTeam"
	OrganizationService_AddTeamMember_FullMethodName                        = "/akuity.organization.v1.OrganizationService/AddTeamMember"
	OrganizationService_GetTeamMember_FullMethodName                        = "/akuity.organization.v1.OrganizationService/GetTeamMember"
	OrganizationService_ListTeamMembers_FullMethodName                      = "/akuity.organization.v1.OrganizationService/ListTeamMembers"
	OrganizationService_RemoveTeamMember_FullMethodName                     = "/akuity.organization.v1.OrganizationService/RemoveTeamMember"
	OrganizationService_CreateWorkspace_FullMethodName                      = "/akuity.organization.v1.OrganizationService/CreateWorkspace"
	OrganizationService_ListWorkspaces_FullMethodName                       = "/akuity.organization.v1.OrganizationService/ListWorkspaces"
	OrganizationService_GetWorkspace_FullMethodName                         = "/akuity.organization.v1.OrganizationService/GetWorkspace"
	OrganizationService_UpdateWorkspace_FullMethodName                      = "/akuity.organization.v1.OrganizationService/UpdateWorkspace"
	OrganizationService_DeleteWorkspace_FullMethodName                      = "/akuity.organization.v1.OrganizationService/DeleteWorkspace"
	OrganizationService_AddWorkspaceMember_FullMethodName                   = "/akuity.organization.v1.OrganizationService/AddWorkspaceMember"
	OrganizationService_ListWorkspaceMembers_FullMethodName                 = "/akuity.organization.v1.OrganizationService/ListWorkspaceMembers"
	OrganizationService_UpdateWorkspaceMembers_FullMethodName               = "/akuity.organization.v1.OrganizationService/UpdateWorkspaceMembers"
	OrganizationService_GetWorkspaceMember_FullMethodName                   = "/akuity.organization.v1.OrganizationService/GetWorkspaceMember"
	OrganizationService_UpdateWorkspaceMember_FullMethodName                = "/akuity.organization.v1.OrganizationService/UpdateWorkspaceMember"
	OrganizationService_RemoveWorkspaceMember_FullMethodName                = "/akuity.organization.v1.OrganizationService/RemoveWorkspaceMember"
	OrganizationService_CancelSubscription_FullMethodName                   = "/akuity.organization.v1.OrganizationService/CancelSubscription"
	OrganizationService_ListKubernetesResourceTypes_FullMethodName          = "/akuity.organization.v1.OrganizationService/ListKubernetesResourceTypes"
	OrganizationService_ListKubernetesResources_FullMethodName              = "/akuity.organization.v1.OrganizationService/ListKubernetesResources"
	OrganizationService_ListNotificationConfigs_FullMethodName              = "/akuity.organization.v1.OrganizationService/ListNotificationConfigs"
	OrganizationService_GetNotificationConfig_FullMethodName                = "/akuity.organization.v1.OrganizationService/GetNotificationConfig"
	OrganizationService_CreateNotificationConfig_FullMethodName             = "/akuity.organization.v1.OrganizationService/CreateNotificationConfig"
	OrganizationService_UpdateNotificationConfig_FullMethodName             = "/akuity.organization.v1.OrganizationService/UpdateNotificationConfig"
	OrganizationService_DeleteNotificationConfig_FullMethodName             = "/akuity.organization.v1.OrganizationService/DeleteNotificationConfig"
	OrganizationService_ListNotificationDeliveryHistory_FullMethodName      = "/akuity.organization.v1.OrganizationService/ListNotificationDeliveryHistory"
	OrganizationService_GetNotificationDeliveryHistoryDetail_FullMethodName = "/akuity.organization.v1.OrganizationService/GetNotificationDeliveryHistoryDetail"
	OrganizationService_PingNotificationConfig_FullMethodName               = "/akuity.organization.v1.OrganizationService/PingNotificationConfig"
)

// OrganizationServiceClient is the client API for OrganizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationServiceClient interface {
	ListAuthenticatedUserOrganizations(ctx context.Context, in *ListAuthenticatedUserOrganizationsRequest, opts ...grpc.CallOption) (*ListAuthenticatedUserOrganizationsResponse, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	GetOrganizationPermissions(ctx context.Context, in *GetOrganizationPermissionsRequest, opts ...grpc.CallOption) (*GetOrganizationPermissionsResponse, error)
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	ListOrganizationMembers(ctx context.Context, in *ListOrganizationMembersRequest, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error)
	ListOrganizationInvitees(ctx context.Context, in *ListOrganizationInviteesRequest, opts ...grpc.CallOption) (*ListOrganizationInviteesResponse, error)
	GetUserRoleInOrganization(ctx context.Context, in *GetUserRoleInOrganizationRequest, opts ...grpc.CallOption) (*GetUserRoleInOrganizationResponse, error)
	InviteMembers(ctx context.Context, in *InviteMembersRequest, opts ...grpc.CallOption) (*InviteMembersResponse, error)
	UninviteOrganizationMember(ctx context.Context, in *UninviteOrganizationMemberRequest, opts ...grpc.CallOption) (*UninviteOrganizationMemberResponse, error)
	RemoveOrganizationMember(ctx context.Context, in *RemoveOrganizationMemberRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberResponse, error)
	UpdateOrganizationMemberRole(ctx context.Context, in *UpdateOrganizationMemberRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationMemberRoleResponse, error)
	JoinOrganization(ctx context.Context, in *JoinOrganizationRequest, opts ...grpc.CallOption) (*JoinOrganizationResponse, error)
	RejectOrganization(ctx context.Context, in *RejectOrganizationRequest, opts ...grpc.CallOption) (*RejectOrganizationResponse, error)
	ListOrganizationAPIKeys(ctx context.Context, in *ListOrganizationAPIKeysRequest, opts ...grpc.CallOption) (*ListOrganizationAPIKeysResponse, error)
	CreateOrganizationAPIKey(ctx context.Context, in *CreateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*CreateOrganizationAPIKeyResponse, error)
	ListWorkspaceAPIKeys(ctx context.Context, in *ListWorkspaceAPIKeysRequest, opts ...grpc.CallOption) (*ListWorkspaceAPIKeysResponse, error)
	CreateWorkspaceAPIKey(ctx context.Context, in *CreateWorkspaceAPIKeyRequest, opts ...grpc.CallOption) (*CreateWorkspaceAPIKeyResponse, error)
	GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error)
	ListAuditLogsArchives(ctx context.Context, in *ListAuditLogsArchivesRequest, opts ...grpc.CallOption) (*ListAuditLogsArchivesResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetAuditLogsInCSV(ctx context.Context, in *GetAuditLogsInCSVRequest, opts ...grpc.CallOption) (OrganizationService_GetAuditLogsInCSVClient, error)
	GetCustomerDetails(ctx context.Context, in *GetCustomerDetailsRequest, opts ...grpc.CallOption) (*GetCustomerDetailsResponse, error)
	UpdateBillingDetails(ctx context.Context, in *UpdateBillingDetailsRequest, opts ...grpc.CallOption) (*UpdateBillingDetailsResponse, error)
	BillingCheckout(ctx context.Context, in *BillingCheckoutRequest, opts ...grpc.CallOption) (*BillingCheckoutResponse, error)
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error)
	GetAvailableAddons(ctx context.Context, in *GetAvailableAddonsRequest, opts ...grpc.CallOption) (*GetAvailableAddonsResponse, error)
	GetSSOConfiguration(ctx context.Context, in *GetSSOConfigurationRequest, opts ...grpc.CallOption) (*GetSSOConfigurationResponse, error)
	EnsureSSOConfiguration(ctx context.Context, in *EnsureSSOConfigurationRequest, opts ...grpc.CallOption) (*EnsureSSOConfigurationResponse, error)
	DeleteSSOConfiguration(ctx context.Context, in *DeleteSSOConfigurationRequest, opts ...grpc.CallOption) (*DeleteSSOConfigurationResponse, error)
	GetFeatureGates(ctx context.Context, in *GetFeatureGatesRequest, opts ...grpc.CallOption) (*GetFeatureGatesResponse, error)
	GetOIDCMap(ctx context.Context, in *GetOIDCMapRequest, opts ...grpc.CallOption) (*GetOIDCMapResponse, error)
	UpdateOIDCMap(ctx context.Context, in *UpdateOIDCMapRequest, opts ...grpc.CallOption) (*UpdateOIDCMapResponse, error)
	CreateCustomRole(ctx context.Context, in *CreateCustomRoleRequest, opts ...grpc.CallOption) (*CreateCustomRoleResponse, error)
	UpdateCustomRole(ctx context.Context, in *UpdateCustomRoleRequest, opts ...grpc.CallOption) (*UpdateCustomRoleResponse, error)
	GetCustomRole(ctx context.Context, in *GetCustomRoleRequest, opts ...grpc.CallOption) (*GetCustomRoleResponse, error)
	ListCustomRoles(ctx context.Context, in *ListCustomRolesRequest, opts ...grpc.CallOption) (*ListCustomRolesResponse, error)
	DeleteCustomRole(ctx context.Context, in *DeleteCustomRoleRequest, opts ...grpc.CallOption) (*DeleteCustomRoleResponse, error)
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error)
	ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*ListTeamsResponse, error)
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
	AddTeamMember(ctx context.Context, in *AddTeamMemberRequest, opts ...grpc.CallOption) (*AddTeamMemberResponse, error)
	GetTeamMember(ctx context.Context, in *GetTeamMemberRequest, opts ...grpc.CallOption) (*GetTeamMemberResponse, error)
	ListTeamMembers(ctx context.Context, in *ListTeamMembersRequest, opts ...grpc.CallOption) (*ListTeamMembersResponse, error)
	RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberResponse, error)
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error)
	ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error)
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error)
	DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error)
	AddWorkspaceMember(ctx context.Context, in *AddWorkspaceMemberRequest, opts ...grpc.CallOption) (*AddWorkspaceMemberResponse, error)
	ListWorkspaceMembers(ctx context.Context, in *ListWorkspaceMembersRequest, opts ...grpc.CallOption) (*ListWorkspaceMembersResponse, error)
	UpdateWorkspaceMembers(ctx context.Context, in *UpdateWorkspaceMembersRequest, opts ...grpc.CallOption) (*UpdateWorkspaceMembersResponse, error)
	GetWorkspaceMember(ctx context.Context, in *GetWorkspaceMemberRequest, opts ...grpc.CallOption) (*GetWorkspaceMemberResponse, error)
	UpdateWorkspaceMember(ctx context.Context, in *UpdateWorkspaceMemberRequest, opts ...grpc.CallOption) (*UpdateWorkspaceMemberResponse, error)
	RemoveWorkspaceMember(ctx context.Context, in *RemoveWorkspaceMemberRequest, opts ...grpc.CallOption) (*RemoveWorkspaceMemberResponse, error)
	CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error)
	ListKubernetesResourceTypes(ctx context.Context, in *ListKubernetesResourceTypesRequest, opts ...grpc.CallOption) (*ListKubernetesResourceTypesResponse, error)
	ListKubernetesResources(ctx context.Context, in *ListKubernetesResourcesRequest, opts ...grpc.CallOption) (*ListKubernetesResourcesResponse, error)
	// Notification Configs
	ListNotificationConfigs(ctx context.Context, in *ListNotificationConfigsRequest, opts ...grpc.CallOption) (*ListNotificationConfigsResponse, error)
	GetNotificationConfig(ctx context.Context, in *GetNotificationConfigRequest, opts ...grpc.CallOption) (*GetNotificationConfigResponse, error)
	CreateNotificationConfig(ctx context.Context, in *CreateNotificationConfigRequest, opts ...grpc.CallOption) (*CreateNotificationConfigResponse, error)
	UpdateNotificationConfig(ctx context.Context, in *UpdateNotificationConfigRequest, opts ...grpc.CallOption) (*UpdateNotificationConfigResponse, error)
	DeleteNotificationConfig(ctx context.Context, in *DeleteNotificationConfigRequest, opts ...grpc.CallOption) (*DeleteNotificationConfigResponse, error)
	ListNotificationDeliveryHistory(ctx context.Context, in *ListNotificationDeliveryHistoryRequest, opts ...grpc.CallOption) (*ListNotificationDeliveryHistoryResponse, error)
	GetNotificationDeliveryHistoryDetail(ctx context.Context, in *GetNotificationDeliveryHistoryDetailRequest, opts ...grpc.CallOption) (*GetNotificationDeliveryHistoryDetailResponse, error)
	PingNotificationConfig(ctx context.Context, in *PingNotificationConfigRequest, opts ...grpc.CallOption) (*PingNotificationConfigResponse, error)
}

type organizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationServiceClient(cc grpc.ClientConnInterface) OrganizationServiceClient {
	return &organizationServiceClient{cc}
}

func (c *organizationServiceClient) ListAuthenticatedUserOrganizations(ctx context.Context, in *ListAuthenticatedUserOrganizationsRequest, opts ...grpc.CallOption) (*ListAuthenticatedUserOrganizationsResponse, error) {
	out := new(ListAuthenticatedUserOrganizationsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListAuthenticatedUserOrganizations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrganizationPermissions(ctx context.Context, in *GetOrganizationPermissionsRequest, opts ...grpc.CallOption) (*GetOrganizationPermissionsResponse, error) {
	out := new(GetOrganizationPermissionsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetOrganizationPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListOrganizationMembers(ctx context.Context, in *ListOrganizationMembersRequest, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error) {
	out := new(ListOrganizationMembersResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListOrganizationMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListOrganizationInvitees(ctx context.Context, in *ListOrganizationInviteesRequest, opts ...grpc.CallOption) (*ListOrganizationInviteesResponse, error) {
	out := new(ListOrganizationInviteesResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListOrganizationInvitees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetUserRoleInOrganization(ctx context.Context, in *GetUserRoleInOrganizationRequest, opts ...grpc.CallOption) (*GetUserRoleInOrganizationResponse, error) {
	out := new(GetUserRoleInOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetUserRoleInOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) InviteMembers(ctx context.Context, in *InviteMembersRequest, opts ...grpc.CallOption) (*InviteMembersResponse, error) {
	out := new(InviteMembersResponse)
	err := c.cc.Invoke(ctx, OrganizationService_InviteMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UninviteOrganizationMember(ctx context.Context, in *UninviteOrganizationMemberRequest, opts ...grpc.CallOption) (*UninviteOrganizationMemberResponse, error) {
	out := new(UninviteOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UninviteOrganizationMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) RemoveOrganizationMember(ctx context.Context, in *RemoveOrganizationMemberRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberResponse, error) {
	out := new(RemoveOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_RemoveOrganizationMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateOrganizationMemberRole(ctx context.Context, in *UpdateOrganizationMemberRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationMemberRoleResponse, error) {
	out := new(UpdateOrganizationMemberRoleResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateOrganizationMemberRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) JoinOrganization(ctx context.Context, in *JoinOrganizationRequest, opts ...grpc.CallOption) (*JoinOrganizationResponse, error) {
	out := new(JoinOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_JoinOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) RejectOrganization(ctx context.Context, in *RejectOrganizationRequest, opts ...grpc.CallOption) (*RejectOrganizationResponse, error) {
	out := new(RejectOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_RejectOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListOrganizationAPIKeys(ctx context.Context, in *ListOrganizationAPIKeysRequest, opts ...grpc.CallOption) (*ListOrganizationAPIKeysResponse, error) {
	out := new(ListOrganizationAPIKeysResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListOrganizationAPIKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateOrganizationAPIKey(ctx context.Context, in *CreateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*CreateOrganizationAPIKeyResponse, error) {
	out := new(CreateOrganizationAPIKeyResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateOrganizationAPIKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListWorkspaceAPIKeys(ctx context.Context, in *ListWorkspaceAPIKeysRequest, opts ...grpc.CallOption) (*ListWorkspaceAPIKeysResponse, error) {
	out := new(ListWorkspaceAPIKeysResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListWorkspaceAPIKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateWorkspaceAPIKey(ctx context.Context, in *CreateWorkspaceAPIKeyRequest, opts ...grpc.CallOption) (*CreateWorkspaceAPIKeyResponse, error) {
	out := new(CreateWorkspaceAPIKeyResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateWorkspaceAPIKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error) {
	out := new(GetAuditLogsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetAuditLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListAuditLogsArchives(ctx context.Context, in *ListAuditLogsArchivesRequest, opts ...grpc.CallOption) (*ListAuditLogsArchivesResponse, error) {
	out := new(ListAuditLogsArchivesResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListAuditLogsArchives_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetAuditLogsInCSV(ctx context.Context, in *GetAuditLogsInCSVRequest, opts ...grpc.CallOption) (OrganizationService_GetAuditLogsInCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrganizationService_ServiceDesc.Streams[0], OrganizationService_GetAuditLogsInCSV_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &organizationServiceGetAuditLogsInCSVClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrganizationService_GetAuditLogsInCSVClient interface {
	Recv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type organizationServiceGetAuditLogsInCSVClient struct {
	grpc.ClientStream
}

func (x *organizationServiceGetAuditLogsInCSVClient) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *organizationServiceClient) GetCustomerDetails(ctx context.Context, in *GetCustomerDetailsRequest, opts ...grpc.CallOption) (*GetCustomerDetailsResponse, error) {
	out := new(GetCustomerDetailsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetCustomerDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateBillingDetails(ctx context.Context, in *UpdateBillingDetailsRequest, opts ...grpc.CallOption) (*UpdateBillingDetailsResponse, error) {
	out := new(UpdateBillingDetailsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateBillingDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) BillingCheckout(ctx context.Context, in *BillingCheckoutRequest, opts ...grpc.CallOption) (*BillingCheckoutResponse, error) {
	out := new(BillingCheckoutResponse)
	err := c.cc.Invoke(ctx, OrganizationService_BillingCheckout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error) {
	out := new(UpdateSubscriptionResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetAvailableAddons(ctx context.Context, in *GetAvailableAddonsRequest, opts ...grpc.CallOption) (*GetAvailableAddonsResponse, error) {
	out := new(GetAvailableAddonsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetAvailableAddons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetSSOConfiguration(ctx context.Context, in *GetSSOConfigurationRequest, opts ...grpc.CallOption) (*GetSSOConfigurationResponse, error) {
	out := new(GetSSOConfigurationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetSSOConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) EnsureSSOConfiguration(ctx context.Context, in *EnsureSSOConfigurationRequest, opts ...grpc.CallOption) (*EnsureSSOConfigurationResponse, error) {
	out := new(EnsureSSOConfigurationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_EnsureSSOConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteSSOConfiguration(ctx context.Context, in *DeleteSSOConfigurationRequest, opts ...grpc.CallOption) (*DeleteSSOConfigurationResponse, error) {
	out := new(DeleteSSOConfigurationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteSSOConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetFeatureGates(ctx context.Context, in *GetFeatureGatesRequest, opts ...grpc.CallOption) (*GetFeatureGatesResponse, error) {
	out := new(GetFeatureGatesResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetFeatureGates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOIDCMap(ctx context.Context, in *GetOIDCMapRequest, opts ...grpc.CallOption) (*GetOIDCMapResponse, error) {
	out := new(GetOIDCMapResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetOIDCMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateOIDCMap(ctx context.Context, in *UpdateOIDCMapRequest, opts ...grpc.CallOption) (*UpdateOIDCMapResponse, error) {
	out := new(UpdateOIDCMapResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateOIDCMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateCustomRole(ctx context.Context, in *CreateCustomRoleRequest, opts ...grpc.CallOption) (*CreateCustomRoleResponse, error) {
	out := new(CreateCustomRoleResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateCustomRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateCustomRole(ctx context.Context, in *UpdateCustomRoleRequest, opts ...grpc.CallOption) (*UpdateCustomRoleResponse, error) {
	out := new(UpdateCustomRoleResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateCustomRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetCustomRole(ctx context.Context, in *GetCustomRoleRequest, opts ...grpc.CallOption) (*GetCustomRoleResponse, error) {
	out := new(GetCustomRoleResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetCustomRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListCustomRoles(ctx context.Context, in *ListCustomRolesRequest, opts ...grpc.CallOption) (*ListCustomRolesResponse, error) {
	out := new(ListCustomRolesResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListCustomRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteCustomRole(ctx context.Context, in *DeleteCustomRoleRequest, opts ...grpc.CallOption) (*DeleteCustomRoleResponse, error) {
	out := new(DeleteCustomRoleResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteCustomRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error) {
	out := new(UpdateTeamResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error) {
	out := new(GetTeamResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*ListTeamsResponse, error) {
	out := new(ListTeamsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListTeams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	out := new(DeleteTeamResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) AddTeamMember(ctx context.Context, in *AddTeamMemberRequest, opts ...grpc.CallOption) (*AddTeamMemberResponse, error) {
	out := new(AddTeamMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_AddTeamMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetTeamMember(ctx context.Context, in *GetTeamMemberRequest, opts ...grpc.CallOption) (*GetTeamMemberResponse, error) {
	out := new(GetTeamMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetTeamMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListTeamMembers(ctx context.Context, in *ListTeamMembersRequest, opts ...grpc.CallOption) (*ListTeamMembersResponse, error) {
	out := new(ListTeamMembersResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListTeamMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberResponse, error) {
	out := new(RemoveTeamMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_RemoveTeamMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error) {
	out := new(CreateWorkspaceResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error) {
	out := new(ListWorkspacesResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListWorkspaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error) {
	out := new(UpdateWorkspaceResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error) {
	out := new(DeleteWorkspaceResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) AddWorkspaceMember(ctx context.Context, in *AddWorkspaceMemberRequest, opts ...grpc.CallOption) (*AddWorkspaceMemberResponse, error) {
	out := new(AddWorkspaceMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_AddWorkspaceMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListWorkspaceMembers(ctx context.Context, in *ListWorkspaceMembersRequest, opts ...grpc.CallOption) (*ListWorkspaceMembersResponse, error) {
	out := new(ListWorkspaceMembersResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListWorkspaceMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateWorkspaceMembers(ctx context.Context, in *UpdateWorkspaceMembersRequest, opts ...grpc.CallOption) (*UpdateWorkspaceMembersResponse, error) {
	out := new(UpdateWorkspaceMembersResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateWorkspaceMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetWorkspaceMember(ctx context.Context, in *GetWorkspaceMemberRequest, opts ...grpc.CallOption) (*GetWorkspaceMemberResponse, error) {
	out := new(GetWorkspaceMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetWorkspaceMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateWorkspaceMember(ctx context.Context, in *UpdateWorkspaceMemberRequest, opts ...grpc.CallOption) (*UpdateWorkspaceMemberResponse, error) {
	out := new(UpdateWorkspaceMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateWorkspaceMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) RemoveWorkspaceMember(ctx context.Context, in *RemoveWorkspaceMemberRequest, opts ...grpc.CallOption) (*RemoveWorkspaceMemberResponse, error) {
	out := new(RemoveWorkspaceMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_RemoveWorkspaceMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error) {
	out := new(CancelSubscriptionResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CancelSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListKubernetesResourceTypes(ctx context.Context, in *ListKubernetesResourceTypesRequest, opts ...grpc.CallOption) (*ListKubernetesResourceTypesResponse, error) {
	out := new(ListKubernetesResourceTypesResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListKubernetesResourceTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListKubernetesResources(ctx context.Context, in *ListKubernetesResourcesRequest, opts ...grpc.CallOption) (*ListKubernetesResourcesResponse, error) {
	out := new(ListKubernetesResourcesResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListKubernetesResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListNotificationConfigs(ctx context.Context, in *ListNotificationConfigsRequest, opts ...grpc.CallOption) (*ListNotificationConfigsResponse, error) {
	out := new(ListNotificationConfigsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListNotificationConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetNotificationConfig(ctx context.Context, in *GetNotificationConfigRequest, opts ...grpc.CallOption) (*GetNotificationConfigResponse, error) {
	out := new(GetNotificationConfigResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetNotificationConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateNotificationConfig(ctx context.Context, in *CreateNotificationConfigRequest, opts ...grpc.CallOption) (*CreateNotificationConfigResponse, error) {
	out := new(CreateNotificationConfigResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateNotificationConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateNotificationConfig(ctx context.Context, in *UpdateNotificationConfigRequest, opts ...grpc.CallOption) (*UpdateNotificationConfigResponse, error) {
	out := new(UpdateNotificationConfigResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateNotificationConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteNotificationConfig(ctx context.Context, in *DeleteNotificationConfigRequest, opts ...grpc.CallOption) (*DeleteNotificationConfigResponse, error) {
	out := new(DeleteNotificationConfigResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteNotificationConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListNotificationDeliveryHistory(ctx context.Context, in *ListNotificationDeliveryHistoryRequest, opts ...grpc.CallOption) (*ListNotificationDeliveryHistoryResponse, error) {
	out := new(ListNotificationDeliveryHistoryResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListNotificationDeliveryHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetNotificationDeliveryHistoryDetail(ctx context.Context, in *GetNotificationDeliveryHistoryDetailRequest, opts ...grpc.CallOption) (*GetNotificationDeliveryHistoryDetailResponse, error) {
	out := new(GetNotificationDeliveryHistoryDetailResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetNotificationDeliveryHistoryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) PingNotificationConfig(ctx context.Context, in *PingNotificationConfigRequest, opts ...grpc.CallOption) (*PingNotificationConfigResponse, error) {
	out := new(PingNotificationConfigResponse)
	err := c.cc.Invoke(ctx, OrganizationService_PingNotificationConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServiceServer is the server API for OrganizationService service.
// All implementations must embed UnimplementedOrganizationServiceServer
// for forward compatibility
type OrganizationServiceServer interface {
	ListAuthenticatedUserOrganizations(context.Context, *ListAuthenticatedUserOrganizationsRequest) (*ListAuthenticatedUserOrganizationsResponse, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	GetOrganizationPermissions(context.Context, *GetOrganizationPermissionsRequest) (*GetOrganizationPermissionsResponse, error)
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error)
	ListOrganizationInvitees(context.Context, *ListOrganizationInviteesRequest) (*ListOrganizationInviteesResponse, error)
	GetUserRoleInOrganization(context.Context, *GetUserRoleInOrganizationRequest) (*GetUserRoleInOrganizationResponse, error)
	InviteMembers(context.Context, *InviteMembersRequest) (*InviteMembersResponse, error)
	UninviteOrganizationMember(context.Context, *UninviteOrganizationMemberRequest) (*UninviteOrganizationMemberResponse, error)
	RemoveOrganizationMember(context.Context, *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error)
	UpdateOrganizationMemberRole(context.Context, *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error)
	JoinOrganization(context.Context, *JoinOrganizationRequest) (*JoinOrganizationResponse, error)
	RejectOrganization(context.Context, *RejectOrganizationRequest) (*RejectOrganizationResponse, error)
	ListOrganizationAPIKeys(context.Context, *ListOrganizationAPIKeysRequest) (*ListOrganizationAPIKeysResponse, error)
	CreateOrganizationAPIKey(context.Context, *CreateOrganizationAPIKeyRequest) (*CreateOrganizationAPIKeyResponse, error)
	ListWorkspaceAPIKeys(context.Context, *ListWorkspaceAPIKeysRequest) (*ListWorkspaceAPIKeysResponse, error)
	CreateWorkspaceAPIKey(context.Context, *CreateWorkspaceAPIKeyRequest) (*CreateWorkspaceAPIKeyResponse, error)
	GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error)
	ListAuditLogsArchives(context.Context, *ListAuditLogsArchivesRequest) (*ListAuditLogsArchivesResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetAuditLogsInCSV(*GetAuditLogsInCSVRequest, OrganizationService_GetAuditLogsInCSVServer) error
	GetCustomerDetails(context.Context, *GetCustomerDetailsRequest) (*GetCustomerDetailsResponse, error)
	UpdateBillingDetails(context.Context, *UpdateBillingDetailsRequest) (*UpdateBillingDetailsResponse, error)
	BillingCheckout(context.Context, *BillingCheckoutRequest) (*BillingCheckoutResponse, error)
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error)
	GetAvailableAddons(context.Context, *GetAvailableAddonsRequest) (*GetAvailableAddonsResponse, error)
	GetSSOConfiguration(context.Context, *GetSSOConfigurationRequest) (*GetSSOConfigurationResponse, error)
	EnsureSSOConfiguration(context.Context, *EnsureSSOConfigurationRequest) (*EnsureSSOConfigurationResponse, error)
	DeleteSSOConfiguration(context.Context, *DeleteSSOConfigurationRequest) (*DeleteSSOConfigurationResponse, error)
	GetFeatureGates(context.Context, *GetFeatureGatesRequest) (*GetFeatureGatesResponse, error)
	GetOIDCMap(context.Context, *GetOIDCMapRequest) (*GetOIDCMapResponse, error)
	UpdateOIDCMap(context.Context, *UpdateOIDCMapRequest) (*UpdateOIDCMapResponse, error)
	CreateCustomRole(context.Context, *CreateCustomRoleRequest) (*CreateCustomRoleResponse, error)
	UpdateCustomRole(context.Context, *UpdateCustomRoleRequest) (*UpdateCustomRoleResponse, error)
	GetCustomRole(context.Context, *GetCustomRoleRequest) (*GetCustomRoleResponse, error)
	ListCustomRoles(context.Context, *ListCustomRolesRequest) (*ListCustomRolesResponse, error)
	DeleteCustomRole(context.Context, *DeleteCustomRoleRequest) (*DeleteCustomRoleResponse, error)
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error)
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error)
	ListTeams(context.Context, *ListTeamsRequest) (*ListTeamsResponse, error)
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
	AddTeamMember(context.Context, *AddTeamMemberRequest) (*AddTeamMemberResponse, error)
	GetTeamMember(context.Context, *GetTeamMemberRequest) (*GetTeamMemberResponse, error)
	ListTeamMembers(context.Context, *ListTeamMembersRequest) (*ListTeamMembersResponse, error)
	RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error)
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error)
	ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error)
	DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error)
	AddWorkspaceMember(context.Context, *AddWorkspaceMemberRequest) (*AddWorkspaceMemberResponse, error)
	ListWorkspaceMembers(context.Context, *ListWorkspaceMembersRequest) (*ListWorkspaceMembersResponse, error)
	UpdateWorkspaceMembers(context.Context, *UpdateWorkspaceMembersRequest) (*UpdateWorkspaceMembersResponse, error)
	GetWorkspaceMember(context.Context, *GetWorkspaceMemberRequest) (*GetWorkspaceMemberResponse, error)
	UpdateWorkspaceMember(context.Context, *UpdateWorkspaceMemberRequest) (*UpdateWorkspaceMemberResponse, error)
	RemoveWorkspaceMember(context.Context, *RemoveWorkspaceMemberRequest) (*RemoveWorkspaceMemberResponse, error)
	CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error)
	ListKubernetesResourceTypes(context.Context, *ListKubernetesResourceTypesRequest) (*ListKubernetesResourceTypesResponse, error)
	ListKubernetesResources(context.Context, *ListKubernetesResourcesRequest) (*ListKubernetesResourcesResponse, error)
	// Notification Configs
	ListNotificationConfigs(context.Context, *ListNotificationConfigsRequest) (*ListNotificationConfigsResponse, error)
	GetNotificationConfig(context.Context, *GetNotificationConfigRequest) (*GetNotificationConfigResponse, error)
	CreateNotificationConfig(context.Context, *CreateNotificationConfigRequest) (*CreateNotificationConfigResponse, error)
	UpdateNotificationConfig(context.Context, *UpdateNotificationConfigRequest) (*UpdateNotificationConfigResponse, error)
	DeleteNotificationConfig(context.Context, *DeleteNotificationConfigRequest) (*DeleteNotificationConfigResponse, error)
	ListNotificationDeliveryHistory(context.Context, *ListNotificationDeliveryHistoryRequest) (*ListNotificationDeliveryHistoryResponse, error)
	GetNotificationDeliveryHistoryDetail(context.Context, *GetNotificationDeliveryHistoryDetailRequest) (*GetNotificationDeliveryHistoryDetailResponse, error)
	PingNotificationConfig(context.Context, *PingNotificationConfigRequest) (*PingNotificationConfigResponse, error)
	mustEmbedUnimplementedOrganizationServiceServer()
}

// UnimplementedOrganizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationServiceServer struct {
}

func (UnimplementedOrganizationServiceServer) ListAuthenticatedUserOrganizations(context.Context, *ListAuthenticatedUserOrganizationsRequest) (*ListAuthenticatedUserOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthenticatedUserOrganizations not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOrganizationPermissions(context.Context, *GetOrganizationPermissionsRequest) (*GetOrganizationPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationPermissions not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMembers not implemented")
}
func (UnimplementedOrganizationServiceServer) ListOrganizationInvitees(context.Context, *ListOrganizationInviteesRequest) (*ListOrganizationInviteesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationInvitees not implemented")
}
func (UnimplementedOrganizationServiceServer) GetUserRoleInOrganization(context.Context, *GetUserRoleInOrganizationRequest) (*GetUserRoleInOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleInOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) InviteMembers(context.Context, *InviteMembersRequest) (*InviteMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMembers not implemented")
}
func (UnimplementedOrganizationServiceServer) UninviteOrganizationMember(context.Context, *UninviteOrganizationMemberRequest) (*UninviteOrganizationMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninviteOrganizationMember not implemented")
}
func (UnimplementedOrganizationServiceServer) RemoveOrganizationMember(context.Context, *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationMember not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateOrganizationMemberRole(context.Context, *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMemberRole not implemented")
}
func (UnimplementedOrganizationServiceServer) JoinOrganization(context.Context, *JoinOrganizationRequest) (*JoinOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) RejectOrganization(context.Context, *RejectOrganizationRequest) (*RejectOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) ListOrganizationAPIKeys(context.Context, *ListOrganizationAPIKeysRequest) (*ListOrganizationAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationAPIKeys not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateOrganizationAPIKey(context.Context, *CreateOrganizationAPIKeyRequest) (*CreateOrganizationAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationAPIKey not implemented")
}
func (UnimplementedOrganizationServiceServer) ListWorkspaceAPIKeys(context.Context, *ListWorkspaceAPIKeysRequest) (*ListWorkspaceAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaceAPIKeys not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateWorkspaceAPIKey(context.Context, *CreateWorkspaceAPIKeyRequest) (*CreateWorkspaceAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspaceAPIKey not implemented")
}
func (UnimplementedOrganizationServiceServer) GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogs not implemented")
}
func (UnimplementedOrganizationServiceServer) ListAuditLogsArchives(context.Context, *ListAuditLogsArchivesRequest) (*ListAuditLogsArchivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogsArchives not implemented")
}
func (UnimplementedOrganizationServiceServer) GetAuditLogsInCSV(*GetAuditLogsInCSVRequest, OrganizationService_GetAuditLogsInCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAuditLogsInCSV not implemented")
}
func (UnimplementedOrganizationServiceServer) GetCustomerDetails(context.Context, *GetCustomerDetailsRequest) (*GetCustomerDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerDetails not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateBillingDetails(context.Context, *UpdateBillingDetailsRequest) (*UpdateBillingDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingDetails not implemented")
}
func (UnimplementedOrganizationServiceServer) BillingCheckout(context.Context, *BillingCheckoutRequest) (*BillingCheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BillingCheckout not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (UnimplementedOrganizationServiceServer) GetAvailableAddons(context.Context, *GetAvailableAddonsRequest) (*GetAvailableAddonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableAddons not implemented")
}
func (UnimplementedOrganizationServiceServer) GetSSOConfiguration(context.Context, *GetSSOConfigurationRequest) (*GetSSOConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSOConfiguration not implemented")
}
func (UnimplementedOrganizationServiceServer) EnsureSSOConfiguration(context.Context, *EnsureSSOConfigurationRequest) (*EnsureSSOConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureSSOConfiguration not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteSSOConfiguration(context.Context, *DeleteSSOConfigurationRequest) (*DeleteSSOConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSSOConfiguration not implemented")
}
func (UnimplementedOrganizationServiceServer) GetFeatureGates(context.Context, *GetFeatureGatesRequest) (*GetFeatureGatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureGates not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOIDCMap(context.Context, *GetOIDCMapRequest) (*GetOIDCMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOIDCMap not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateOIDCMap(context.Context, *UpdateOIDCMapRequest) (*UpdateOIDCMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOIDCMap not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateCustomRole(context.Context, *CreateCustomRoleRequest) (*CreateCustomRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomRole not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateCustomRole(context.Context, *UpdateCustomRoleRequest) (*UpdateCustomRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomRole not implemented")
}
func (UnimplementedOrganizationServiceServer) GetCustomRole(context.Context, *GetCustomRoleRequest) (*GetCustomRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomRole not implemented")
}
func (UnimplementedOrganizationServiceServer) ListCustomRoles(context.Context, *ListCustomRolesRequest) (*ListCustomRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomRoles not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteCustomRole(context.Context, *DeleteCustomRoleRequest) (*DeleteCustomRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomRole not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedOrganizationServiceServer) GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedOrganizationServiceServer) ListTeams(context.Context, *ListTeamsRequest) (*ListTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedOrganizationServiceServer) AddTeamMember(context.Context, *AddTeamMemberRequest) (*AddTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamMember not implemented")
}
func (UnimplementedOrganizationServiceServer) GetTeamMember(context.Context, *GetTeamMemberRequest) (*GetTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMember not implemented")
}
func (UnimplementedOrganizationServiceServer) ListTeamMembers(context.Context, *ListTeamMembersRequest) (*ListTeamMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamMembers not implemented")
}
func (UnimplementedOrganizationServiceServer) RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamMember not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedOrganizationServiceServer) ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaces not implemented")
}
func (UnimplementedOrganizationServiceServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspace not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspace not implemented")
}
func (UnimplementedOrganizationServiceServer) AddWorkspaceMember(context.Context, *AddWorkspaceMemberRequest) (*AddWorkspaceMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkspaceMember not implemented")
}
func (UnimplementedOrganizationServiceServer) ListWorkspaceMembers(context.Context, *ListWorkspaceMembersRequest) (*ListWorkspaceMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaceMembers not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateWorkspaceMembers(context.Context, *UpdateWorkspaceMembersRequest) (*UpdateWorkspaceMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspaceMembers not implemented")
}
func (UnimplementedOrganizationServiceServer) GetWorkspaceMember(context.Context, *GetWorkspaceMemberRequest) (*GetWorkspaceMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceMember not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateWorkspaceMember(context.Context, *UpdateWorkspaceMemberRequest) (*UpdateWorkspaceMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspaceMember not implemented")
}
func (UnimplementedOrganizationServiceServer) RemoveWorkspaceMember(context.Context, *RemoveWorkspaceMemberRequest) (*RemoveWorkspaceMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkspaceMember not implemented")
}
func (UnimplementedOrganizationServiceServer) CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedOrganizationServiceServer) ListKubernetesResourceTypes(context.Context, *ListKubernetesResourceTypesRequest) (*ListKubernetesResourceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKubernetesResourceTypes not implemented")
}
func (UnimplementedOrganizationServiceServer) ListKubernetesResources(context.Context, *ListKubernetesResourcesRequest) (*ListKubernetesResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKubernetesResources not implemented")
}
func (UnimplementedOrganizationServiceServer) ListNotificationConfigs(context.Context, *ListNotificationConfigsRequest) (*ListNotificationConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationConfigs not implemented")
}
func (UnimplementedOrganizationServiceServer) GetNotificationConfig(context.Context, *GetNotificationConfigRequest) (*GetNotificationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationConfig not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateNotificationConfig(context.Context, *CreateNotificationConfigRequest) (*CreateNotificationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationConfig not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateNotificationConfig(context.Context, *UpdateNotificationConfigRequest) (*UpdateNotificationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationConfig not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteNotificationConfig(context.Context, *DeleteNotificationConfigRequest) (*DeleteNotificationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationConfig not implemented")
}
func (UnimplementedOrganizationServiceServer) ListNotificationDeliveryHistory(context.Context, *ListNotificationDeliveryHistoryRequest) (*ListNotificationDeliveryHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationDeliveryHistory not implemented")
}
func (UnimplementedOrganizationServiceServer) GetNotificationDeliveryHistoryDetail(context.Context, *GetNotificationDeliveryHistoryDetailRequest) (*GetNotificationDeliveryHistoryDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationDeliveryHistoryDetail not implemented")
}
func (UnimplementedOrganizationServiceServer) PingNotificationConfig(context.Context, *PingNotificationConfigRequest) (*PingNotificationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingNotificationConfig not implemented")
}
func (UnimplementedOrganizationServiceServer) mustEmbedUnimplementedOrganizationServiceServer() {}

// UnsafeOrganizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServiceServer will
// result in compilation errors.
type UnsafeOrganizationServiceServer interface {
	mustEmbedUnimplementedOrganizationServiceServer()
}

func RegisterOrganizationServiceServer(s grpc.ServiceRegistrar, srv OrganizationServiceServer) {
	s.RegisterService(&OrganizationService_ServiceDesc, srv)
}

func _OrganizationService_ListAuthenticatedUserOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthenticatedUserOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListAuthenticatedUserOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListAuthenticatedUserOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListAuthenticatedUserOrganizations(ctx, req.(*ListAuthenticatedUserOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOrganizationPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrganizationPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetOrganizationPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrganizationPermissions(ctx, req.(*GetOrganizationPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListOrganizationMembers(ctx, req.(*ListOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListOrganizationInvitees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationInviteesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListOrganizationInvitees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListOrganizationInvitees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListOrganizationInvitees(ctx, req.(*ListOrganizationInviteesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetUserRoleInOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleInOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetUserRoleInOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetUserRoleInOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetUserRoleInOrganization(ctx, req.(*GetUserRoleInOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_InviteMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).InviteMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_InviteMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).InviteMembers(ctx, req.(*InviteMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UninviteOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninviteOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UninviteOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UninviteOrganizationMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UninviteOrganizationMember(ctx, req.(*UninviteOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_RemoveOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).RemoveOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_RemoveOrganizationMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).RemoveOrganizationMember(ctx, req.(*RemoveOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateOrganizationMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateOrganizationMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateOrganizationMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateOrganizationMemberRole(ctx, req.(*UpdateOrganizationMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_JoinOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).JoinOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_JoinOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).JoinOrganization(ctx, req.(*JoinOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_RejectOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).RejectOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_RejectOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).RejectOrganization(ctx, req.(*RejectOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListOrganizationAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListOrganizationAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListOrganizationAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListOrganizationAPIKeys(ctx, req.(*ListOrganizationAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateOrganizationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateOrganizationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateOrganizationAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateOrganizationAPIKey(ctx, req.(*CreateOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListWorkspaceAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspaceAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListWorkspaceAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListWorkspaceAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListWorkspaceAPIKeys(ctx, req.(*ListWorkspaceAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateWorkspaceAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateWorkspaceAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateWorkspaceAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateWorkspaceAPIKey(ctx, req.(*CreateWorkspaceAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetAuditLogs(ctx, req.(*GetAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListAuditLogsArchives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogsArchivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListAuditLogsArchives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListAuditLogsArchives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListAuditLogsArchives(ctx, req.(*ListAuditLogsArchivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetAuditLogsInCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAuditLogsInCSVRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrganizationServiceServer).GetAuditLogsInCSV(m, &organizationServiceGetAuditLogsInCSVServer{stream})
}

type OrganizationService_GetAuditLogsInCSVServer interface {
	Send(*httpbody.HttpBody) error
	grpc.ServerStream
}

type organizationServiceGetAuditLogsInCSVServer struct {
	grpc.ServerStream
}

func (x *organizationServiceGetAuditLogsInCSVServer) Send(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

func _OrganizationService_GetCustomerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetCustomerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetCustomerDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetCustomerDetails(ctx, req.(*GetCustomerDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateBillingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateBillingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateBillingDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateBillingDetails(ctx, req.(*UpdateBillingDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_BillingCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingCheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).BillingCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_BillingCheckout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).BillingCheckout(ctx, req.(*BillingCheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetAvailableAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableAddonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetAvailableAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetAvailableAddons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetAvailableAddons(ctx, req.(*GetAvailableAddonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetSSOConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSOConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetSSOConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetSSOConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetSSOConfiguration(ctx, req.(*GetSSOConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_EnsureSSOConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureSSOConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).EnsureSSOConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_EnsureSSOConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).EnsureSSOConfiguration(ctx, req.(*EnsureSSOConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteSSOConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSSOConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteSSOConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteSSOConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteSSOConfiguration(ctx, req.(*DeleteSSOConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetFeatureGates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureGatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetFeatureGates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetFeatureGates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetFeatureGates(ctx, req.(*GetFeatureGatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOIDCMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOIDCMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOIDCMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetOIDCMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOIDCMap(ctx, req.(*GetOIDCMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateOIDCMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOIDCMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateOIDCMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateOIDCMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateOIDCMap(ctx, req.(*UpdateOIDCMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateCustomRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateCustomRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateCustomRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateCustomRole(ctx, req.(*CreateCustomRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateCustomRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateCustomRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateCustomRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateCustomRole(ctx, req.(*UpdateCustomRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetCustomRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetCustomRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetCustomRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetCustomRole(ctx, req.(*GetCustomRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListCustomRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListCustomRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListCustomRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListCustomRoles(ctx, req.(*ListCustomRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteCustomRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteCustomRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteCustomRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteCustomRole(ctx, req.(*DeleteCustomRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListTeams(ctx, req.(*ListTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_AddTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).AddTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_AddTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).AddTeamMember(ctx, req.(*AddTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetTeamMember(ctx, req.(*GetTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListTeamMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListTeamMembers(ctx, req.(*ListTeamMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_RemoveTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).RemoveTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_RemoveTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).RemoveTeamMember(ctx, req.(*RemoveTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateWorkspace(ctx, req.(*CreateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListWorkspaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListWorkspaces(ctx, req.(*ListWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateWorkspace(ctx, req.(*UpdateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteWorkspace(ctx, req.(*DeleteWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_AddWorkspaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkspaceMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).AddWorkspaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_AddWorkspaceMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).AddWorkspaceMember(ctx, req.(*AddWorkspaceMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListWorkspaceMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspaceMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListWorkspaceMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListWorkspaceMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListWorkspaceMembers(ctx, req.(*ListWorkspaceMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateWorkspaceMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateWorkspaceMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateWorkspaceMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateWorkspaceMembers(ctx, req.(*UpdateWorkspaceMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetWorkspaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetWorkspaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetWorkspaceMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetWorkspaceMember(ctx, req.(*GetWorkspaceMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateWorkspaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateWorkspaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateWorkspaceMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateWorkspaceMember(ctx, req.(*UpdateWorkspaceMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_RemoveWorkspaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWorkspaceMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).RemoveWorkspaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_RemoveWorkspaceMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).RemoveWorkspaceMember(ctx, req.(*RemoveWorkspaceMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CancelSubscription(ctx, req.(*CancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListKubernetesResourceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKubernetesResourceTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListKubernetesResourceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListKubernetesResourceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListKubernetesResourceTypes(ctx, req.(*ListKubernetesResourceTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListKubernetesResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKubernetesResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListKubernetesResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListKubernetesResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListKubernetesResources(ctx, req.(*ListKubernetesResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListNotificationConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListNotificationConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListNotificationConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListNotificationConfigs(ctx, req.(*ListNotificationConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetNotificationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetNotificationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetNotificationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetNotificationConfig(ctx, req.(*GetNotificationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateNotificationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateNotificationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateNotificationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateNotificationConfig(ctx, req.(*CreateNotificationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateNotificationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateNotificationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateNotificationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateNotificationConfig(ctx, req.(*UpdateNotificationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteNotificationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteNotificationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteNotificationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteNotificationConfig(ctx, req.(*DeleteNotificationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListNotificationDeliveryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationDeliveryHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListNotificationDeliveryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListNotificationDeliveryHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListNotificationDeliveryHistory(ctx, req.(*ListNotificationDeliveryHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetNotificationDeliveryHistoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationDeliveryHistoryDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetNotificationDeliveryHistoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetNotificationDeliveryHistoryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetNotificationDeliveryHistoryDetail(ctx, req.(*GetNotificationDeliveryHistoryDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_PingNotificationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingNotificationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).PingNotificationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_PingNotificationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).PingNotificationConfig(ctx, req.(*PingNotificationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationService_ServiceDesc is the grpc.ServiceDesc for OrganizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akuity.organization.v1.OrganizationService",
	HandlerType: (*OrganizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAuthenticatedUserOrganizations",
			Handler:    _OrganizationService_ListAuthenticatedUserOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationService_GetOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationPermissions",
			Handler:    _OrganizationService_GetOrganizationPermissions_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _OrganizationService_CreateOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _OrganizationService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _OrganizationService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationMembers",
			Handler:    _OrganizationService_ListOrganizationMembers_Handler,
		},
		{
			MethodName: "ListOrganizationInvitees",
			Handler:    _OrganizationService_ListOrganizationInvitees_Handler,
		},
		{
			MethodName: "GetUserRoleInOrganization",
			Handler:    _OrganizationService_GetUserRoleInOrganization_Handler,
		},
		{
			MethodName: "InviteMembers",
			Handler:    _OrganizationService_InviteMembers_Handler,
		},
		{
			MethodName: "UninviteOrganizationMember",
			Handler:    _OrganizationService_UninviteOrganizationMember_Handler,
		},
		{
			MethodName: "RemoveOrganizationMember",
			Handler:    _OrganizationService_RemoveOrganizationMember_Handler,
		},
		{
			MethodName: "UpdateOrganizationMemberRole",
			Handler:    _OrganizationService_UpdateOrganizationMemberRole_Handler,
		},
		{
			MethodName: "JoinOrganization",
			Handler:    _OrganizationService_JoinOrganization_Handler,
		},
		{
			MethodName: "RejectOrganization",
			Handler:    _OrganizationService_RejectOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationAPIKeys",
			Handler:    _OrganizationService_ListOrganizationAPIKeys_Handler,
		},
		{
			MethodName: "CreateOrganizationAPIKey",
			Handler:    _OrganizationService_CreateOrganizationAPIKey_Handler,
		},
		{
			MethodName: "ListWorkspaceAPIKeys",
			Handler:    _OrganizationService_ListWorkspaceAPIKeys_Handler,
		},
		{
			MethodName: "CreateWorkspaceAPIKey",
			Handler:    _OrganizationService_CreateWorkspaceAPIKey_Handler,
		},
		{
			MethodName: "GetAuditLogs",
			Handler:    _OrganizationService_GetAuditLogs_Handler,
		},
		{
			MethodName: "ListAuditLogsArchives",
			Handler:    _OrganizationService_ListAuditLogsArchives_Handler,
		},
		{
			MethodName: "GetCustomerDetails",
			Handler:    _OrganizationService_GetCustomerDetails_Handler,
		},
		{
			MethodName: "UpdateBillingDetails",
			Handler:    _OrganizationService_UpdateBillingDetails_Handler,
		},
		{
			MethodName: "BillingCheckout",
			Handler:    _OrganizationService_BillingCheckout_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _OrganizationService_UpdateSubscription_Handler,
		},
		{
			MethodName: "GetAvailableAddons",
			Handler:    _OrganizationService_GetAvailableAddons_Handler,
		},
		{
			MethodName: "GetSSOConfiguration",
			Handler:    _OrganizationService_GetSSOConfiguration_Handler,
		},
		{
			MethodName: "EnsureSSOConfiguration",
			Handler:    _OrganizationService_EnsureSSOConfiguration_Handler,
		},
		{
			MethodName: "DeleteSSOConfiguration",
			Handler:    _OrganizationService_DeleteSSOConfiguration_Handler,
		},
		{
			MethodName: "GetFeatureGates",
			Handler:    _OrganizationService_GetFeatureGates_Handler,
		},
		{
			MethodName: "GetOIDCMap",
			Handler:    _OrganizationService_GetOIDCMap_Handler,
		},
		{
			MethodName: "UpdateOIDCMap",
			Handler:    _OrganizationService_UpdateOIDCMap_Handler,
		},
		{
			MethodName: "CreateCustomRole",
			Handler:    _OrganizationService_CreateCustomRole_Handler,
		},
		{
			MethodName: "UpdateCustomRole",
			Handler:    _OrganizationService_UpdateCustomRole_Handler,
		},
		{
			MethodName: "GetCustomRole",
			Handler:    _OrganizationService_GetCustomRole_Handler,
		},
		{
			MethodName: "ListCustomRoles",
			Handler:    _OrganizationService_ListCustomRoles_Handler,
		},
		{
			MethodName: "DeleteCustomRole",
			Handler:    _OrganizationService_DeleteCustomRole_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _OrganizationService_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _OrganizationService_UpdateTeam_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _OrganizationService_GetTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _OrganizationService_ListTeams_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _OrganizationService_DeleteTeam_Handler,
		},
		{
			MethodName: "AddTeamMember",
			Handler:    _OrganizationService_AddTeamMember_Handler,
		},
		{
			MethodName: "GetTeamMember",
			Handler:    _OrganizationService_GetTeamMember_Handler,
		},
		{
			MethodName: "ListTeamMembers",
			Handler:    _OrganizationService_ListTeamMembers_Handler,
		},
		{
			MethodName: "RemoveTeamMember",
			Handler:    _OrganizationService_RemoveTeamMember_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _OrganizationService_CreateWorkspace_Handler,
		},
		{
			MethodName: "ListWorkspaces",
			Handler:    _OrganizationService_ListWorkspaces_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _OrganizationService_GetWorkspace_Handler,
		},
		{
			MethodName: "UpdateWorkspace",
			Handler:    _OrganizationService_UpdateWorkspace_Handler,
		},
		{
			MethodName: "DeleteWorkspace",
			Handler:    _OrganizationService_DeleteWorkspace_Handler,
		},
		{
			MethodName: "AddWorkspaceMember",
			Handler:    _OrganizationService_AddWorkspaceMember_Handler,
		},
		{
			MethodName: "ListWorkspaceMembers",
			Handler:    _OrganizationService_ListWorkspaceMembers_Handler,
		},
		{
			MethodName: "UpdateWorkspaceMembers",
			Handler:    _OrganizationService_UpdateWorkspaceMembers_Handler,
		},
		{
			MethodName: "GetWorkspaceMember",
			Handler:    _OrganizationService_GetWorkspaceMember_Handler,
		},
		{
			MethodName: "UpdateWorkspaceMember",
			Handler:    _OrganizationService_UpdateWorkspaceMember_Handler,
		},
		{
			MethodName: "RemoveWorkspaceMember",
			Handler:    _OrganizationService_RemoveWorkspaceMember_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _OrganizationService_CancelSubscription_Handler,
		},
		{
			MethodName: "ListKubernetesResourceTypes",
			Handler:    _OrganizationService_ListKubernetesResourceTypes_Handler,
		},
		{
			MethodName: "ListKubernetesResources",
			Handler:    _OrganizationService_ListKubernetesResources_Handler,
		},
		{
			MethodName: "ListNotificationConfigs",
			Handler:    _OrganizationService_ListNotificationConfigs_Handler,
		},
		{
			MethodName: "GetNotificationConfig",
			Handler:    _OrganizationService_GetNotificationConfig_Handler,
		},
		{
			MethodName: "CreateNotificationConfig",
			Handler:    _OrganizationService_CreateNotificationConfig_Handler,
		},
		{
			MethodName: "UpdateNotificationConfig",
			Handler:    _OrganizationService_UpdateNotificationConfig_Handler,
		},
		{
			MethodName: "DeleteNotificationConfig",
			Handler:    _OrganizationService_DeleteNotificationConfig_Handler,
		},
		{
			MethodName: "ListNotificationDeliveryHistory",
			Handler:    _OrganizationService_ListNotificationDeliveryHistory_Handler,
		},
		{
			MethodName: "GetNotificationDeliveryHistoryDetail",
			Handler:    _OrganizationService_GetNotificationDeliveryHistoryDetail_Handler,
		},
		{
			MethodName: "PingNotificationConfig",
			Handler:    _OrganizationService_PingNotificationConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAuditLogsInCSV",
			Handler:       _OrganizationService_GetAuditLogsInCSV_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "organization/v1/organization.proto",
}
