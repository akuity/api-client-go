// Code generated by protoc-gen-gw-client. DO NOT EDIT.
// source: organization/v1/organization.proto

package organizationv1

import (
	context "context"
	fmt "fmt"
	client "github.com/akuity/api-client-go/pkg/api/gateway/client"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	url "net/url"
)

// OrganizationServiceGatewayClient is the client for OrganizationService service.
type OrganizationServiceGatewayClient interface {
	ListAuthenticatedUserOrganizations(context.Context, *ListAuthenticatedUserOrganizationsRequest) (*ListAuthenticatedUserOrganizationsResponse, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error)
	ListOrganizationInvitees(context.Context, *ListOrganizationInviteesRequest) (*ListOrganizationInviteesResponse, error)
	GetUserRoleInOrganization(context.Context, *GetUserRoleInOrganizationRequest) (*GetUserRoleInOrganizationResponse, error)
	InviteMembers(context.Context, *InviteMembersRequest) (*InviteMembersResponse, error)
	UninviteOrganizationMember(context.Context, *UninviteOrganizationMemberRequest) (*UninviteOrganizationMemberResponse, error)
	RemoveOrganizationMember(context.Context, *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error)
	UpdateOrganizationMemberRole(context.Context, *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error)
	JoinOrganization(context.Context, *JoinOrganizationRequest) (*JoinOrganizationResponse, error)
	RejectOrganization(context.Context, *RejectOrganizationRequest) (*RejectOrganizationResponse, error)
	ListOrganizationAPIKeys(context.Context, *ListOrganizationAPIKeysRequest) (*ListOrganizationAPIKeysResponse, error)
	CreateOrganizationAPIKey(context.Context, *CreateOrganizationAPIKeyRequest) (*CreateOrganizationAPIKeyResponse, error)
	GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetAuditLogsInCSV(context.Context, *GetAuditLogsInCSVRequest) (<-chan *httpbody.HttpBody, <-chan error, error)
	GetCustomerDetails(context.Context, *GetCustomerDetailsRequest) (*GetCustomerDetailsResponse, error)
	UpdateBillingDetails(context.Context, *UpdateBillingDetailsRequest) (*UpdateBillingDetailsResponse, error)
	DeleteBillingCustomer(context.Context, *DeleteBillingCustomerRequest) (*DeleteBillingCustomerResponse, error)
	BillingCheckout(context.Context, *BillingCheckoutRequest) (*BillingCheckoutResponse, error)
}

func NewOrganizationServiceGatewayClient(c client.Client) OrganizationServiceGatewayClient {
	return &organizationServiceGatewayClient{
		gwc: c,
	}
}

type organizationServiceGatewayClient struct {
	gwc client.Client
}

func (c *organizationServiceGatewayClient) ListAuthenticatedUserOrganizations(ctx context.Context, req *ListAuthenticatedUserOrganizationsRequest) (*ListAuthenticatedUserOrganizationsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations")
	return client.DoRequest[ListAuthenticatedUserOrganizationsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetOrganization(ctx context.Context, req *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	q := url.Values{}
	q.Add("idType", req.IdType.String())
	gwReq.SetQueryParamsFromValues(q)
	return client.DoRequest[GetOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) CreateOrganization(ctx context.Context, req *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations")
	gwReq.SetBody(req)
	return client.DoRequest[CreateOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateOrganization(ctx context.Context, req *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/organizations/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return client.DoRequest[UpdateOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) DeleteOrganization(ctx context.Context, req *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/organizations/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return client.DoRequest[DeleteOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListOrganizationMembers(ctx context.Context, req *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/members")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return client.DoRequest[ListOrganizationMembersResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListOrganizationInvitees(ctx context.Context, req *ListOrganizationInviteesRequest) (*ListOrganizationInviteesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/invitees")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return client.DoRequest[ListOrganizationInviteesResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetUserRoleInOrganization(ctx context.Context, req *GetUserRoleInOrganizationRequest) (*GetUserRoleInOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/role")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return client.DoRequest[GetUserRoleInOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) InviteMembers(ctx context.Context, req *InviteMembersRequest) (*InviteMembersResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/members/invite")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return client.DoRequest[InviteMembersResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UninviteOrganizationMember(ctx context.Context, req *UninviteOrganizationMemberRequest) (*UninviteOrganizationMemberResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/members/uninvite")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return client.DoRequest[UninviteOrganizationMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) RemoveOrganizationMember(ctx context.Context, req *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/organizations/{id}/members/{member_id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetPathParam("member_id", fmt.Sprintf("%v", req.MemberId))
	return client.DoRequest[RemoveOrganizationMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateOrganizationMemberRole(ctx context.Context, req *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/organizations/{id}/members/{member_id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetPathParam("member_id", fmt.Sprintf("%v", req.MemberId))
	gwReq.SetBody(req)
	return client.DoRequest[UpdateOrganizationMemberRoleResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) JoinOrganization(ctx context.Context, req *JoinOrganizationRequest) (*JoinOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/join")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return client.DoRequest[JoinOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) RejectOrganization(ctx context.Context, req *RejectOrganizationRequest) (*RejectOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/reject")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return client.DoRequest[RejectOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListOrganizationAPIKeys(ctx context.Context, req *ListOrganizationAPIKeysRequest) (*ListOrganizationAPIKeysResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/apikeys")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return client.DoRequest[ListOrganizationAPIKeysResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) CreateOrganizationAPIKey(ctx context.Context, req *CreateOrganizationAPIKeyRequest) (*CreateOrganizationAPIKeyResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/apikeys")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return client.DoRequest[CreateOrganizationAPIKeyResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetAuditLogs(ctx context.Context, req *GetAuditLogsRequest) (*GetAuditLogsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/audit-logs")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return client.DoRequest[GetAuditLogsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetAuditLogsInCSV(ctx context.Context, req *GetAuditLogsInCSVRequest) (<-chan *httpbody.HttpBody, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/csv-audit-logs")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return client.DoStreamingRequest[httpbody.HttpBody](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetCustomerDetails(ctx context.Context, req *GetCustomerDetailsRequest) (*GetCustomerDetailsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/billing/customer")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return client.DoRequest[GetCustomerDetailsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateBillingDetails(ctx context.Context, req *UpdateBillingDetailsRequest) (*UpdateBillingDetailsResponse, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/organizations/{id}/billing")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return client.DoRequest[UpdateBillingDetailsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) DeleteBillingCustomer(ctx context.Context, req *DeleteBillingCustomerRequest) (*DeleteBillingCustomerResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/organizations/{id}/billing/customer")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return client.DoRequest[DeleteBillingCustomerResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) BillingCheckout(ctx context.Context, req *BillingCheckoutRequest) (*BillingCheckoutResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/checkout")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	q := url.Values{}
	q.Add("billingName", fmt.Sprintf("%v", req.BillingName))
	q.Add("billingEmail", fmt.Sprintf("%v", req.BillingEmail))
	gwReq.SetQueryParamsFromValues(q)
	return client.DoRequest[BillingCheckoutResponse](ctx, gwReq)
}
