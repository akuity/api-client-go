// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: organization/v1/organization.proto

package organizationv1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	url "net/url"
)

// OrganizationServiceGatewayClient is the interface for OrganizationService service client.
type OrganizationServiceGatewayClient interface {
	ListAuthenticatedUserOrganizations(context.Context, *ListAuthenticatedUserOrganizationsRequest) (*ListAuthenticatedUserOrganizationsResponse, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error)
	ListOrganizationInvitees(context.Context, *ListOrganizationInviteesRequest) (*ListOrganizationInviteesResponse, error)
	GetUserRoleInOrganization(context.Context, *GetUserRoleInOrganizationRequest) (*GetUserRoleInOrganizationResponse, error)
	InviteMembers(context.Context, *InviteMembersRequest) (*InviteMembersResponse, error)
	UninviteOrganizationMember(context.Context, *UninviteOrganizationMemberRequest) (*UninviteOrganizationMemberResponse, error)
	RemoveOrganizationMember(context.Context, *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error)
	UpdateOrganizationMemberRole(context.Context, *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error)
	JoinOrganization(context.Context, *JoinOrganizationRequest) (*JoinOrganizationResponse, error)
	RejectOrganization(context.Context, *RejectOrganizationRequest) (*RejectOrganizationResponse, error)
	ListOrganizationAPIKeys(context.Context, *ListOrganizationAPIKeysRequest) (*ListOrganizationAPIKeysResponse, error)
	CreateOrganizationAPIKey(context.Context, *CreateOrganizationAPIKeyRequest) (*CreateOrganizationAPIKeyResponse, error)
	GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error)
	ListAuditLogsArchives(context.Context, *ListAuditLogsArchivesRequest) (*ListAuditLogsArchivesResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	GetAuditLogsInCSV(context.Context, *GetAuditLogsInCSVRequest) (<-chan *httpbody.HttpBody, <-chan error, error)
	GetCustomerDetails(context.Context, *GetCustomerDetailsRequest) (*GetCustomerDetailsResponse, error)
	UpdateBillingDetails(context.Context, *UpdateBillingDetailsRequest) (*UpdateBillingDetailsResponse, error)
	DeleteBillingCustomer(context.Context, *DeleteBillingCustomerRequest) (*DeleteBillingCustomerResponse, error)
	BillingCheckout(context.Context, *BillingCheckoutRequest) (*BillingCheckoutResponse, error)
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error)
	GetAvailableAddons(context.Context, *GetAvailableAddonsRequest) (*GetAvailableAddonsResponse, error)
	GetSSOConfiguration(context.Context, *GetSSOConfigurationRequest) (*GetSSOConfigurationResponse, error)
	EnsureSSOConfiguration(context.Context, *EnsureSSOConfigurationRequest) (*EnsureSSOConfigurationResponse, error)
	DeleteSSOConfiguration(context.Context, *DeleteSSOConfigurationRequest) (*DeleteSSOConfigurationResponse, error)
	GetFeatureGates(context.Context, *GetFeatureGatesRequest) (*GetFeatureGatesResponse, error)
	GetOIDCMap(context.Context, *GetOIDCMapRequest) (*GetOIDCMapResponse, error)
	UpdateOIDCMap(context.Context, *UpdateOIDCMapRequest) (*UpdateOIDCMapResponse, error)
	CreateCustomRole(context.Context, *CreateCustomRoleRequest) (*CreateCustomRoleResponse, error)
	UpdateCustomRole(context.Context, *UpdateCustomRoleRequest) (*UpdateCustomRoleResponse, error)
	GetCustomRole(context.Context, *GetCustomRoleRequest) (*GetCustomRoleResponse, error)
	ListCustomRoles(context.Context, *ListCustomRolesRequest) (*ListCustomRolesResponse, error)
	DeleteCustomRole(context.Context, *DeleteCustomRoleRequest) (*DeleteCustomRoleResponse, error)
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error)
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error)
	ListTeams(context.Context, *ListTeamsRequest) (*ListTeamsResponse, error)
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
	AddTeamMember(context.Context, *AddTeamMemberRequest) (*AddTeamMemberResponse, error)
	GetTeamMember(context.Context, *GetTeamMemberRequest) (*GetTeamMemberResponse, error)
	ListTeamMembers(context.Context, *ListTeamMembersRequest) (*ListTeamMembersResponse, error)
	RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error)
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error)
	ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error)
	DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error)
	AddWorkspaceMember(context.Context, *AddWorkspaceMemberRequest) (*AddWorkspaceMemberResponse, error)
	ListWorkspaceMembers(context.Context, *ListWorkspaceMembersRequest) (*ListWorkspaceMembersResponse, error)
	UpdateWorkspaceMembers(context.Context, *UpdateWorkspaceMembersRequest) (*UpdateWorkspaceMembersResponse, error)
	GetWorkspaceMember(context.Context, *GetWorkspaceMemberRequest) (*GetWorkspaceMemberResponse, error)
	UpdateWorkspaceMember(context.Context, *UpdateWorkspaceMemberRequest) (*UpdateWorkspaceMemberResponse, error)
	RemoveWorkspaceMember(context.Context, *RemoveWorkspaceMemberRequest) (*RemoveWorkspaceMemberResponse, error)
}

func NewOrganizationServiceGatewayClient(c gateway.Client) OrganizationServiceGatewayClient {
	return &organizationServiceGatewayClient{
		gwc: c,
	}
}

type organizationServiceGatewayClient struct {
	gwc gateway.Client
}

func (c *organizationServiceGatewayClient) ListAuthenticatedUserOrganizations(ctx context.Context, req *ListAuthenticatedUserOrganizationsRequest) (*ListAuthenticatedUserOrganizationsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations")
	return gateway.DoRequest[ListAuthenticatedUserOrganizationsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetOrganization(ctx context.Context, req *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	q := url.Values{}
	q.Add("idType", req.IdType.String())
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[GetOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) CreateOrganization(ctx context.Context, req *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations")
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateOrganization(ctx context.Context, req *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/organizations/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) DeleteOrganization(ctx context.Context, req *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/organizations/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[DeleteOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListOrganizationMembers(ctx context.Context, req *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/members")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[ListOrganizationMembersResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListOrganizationInvitees(ctx context.Context, req *ListOrganizationInviteesRequest) (*ListOrganizationInviteesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/invitees")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[ListOrganizationInviteesResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetUserRoleInOrganization(ctx context.Context, req *GetUserRoleInOrganizationRequest) (*GetUserRoleInOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/role")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetUserRoleInOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) InviteMembers(ctx context.Context, req *InviteMembersRequest) (*InviteMembersResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/members/invite")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[InviteMembersResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UninviteOrganizationMember(ctx context.Context, req *UninviteOrganizationMemberRequest) (*UninviteOrganizationMemberResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/members/uninvite")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UninviteOrganizationMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) RemoveOrganizationMember(ctx context.Context, req *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/organizations/{id}/members/{member_id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetPathParam("member_id", fmt.Sprintf("%v", req.MemberId))
	gwReq.SetBody(req)
	return gateway.DoRequest[RemoveOrganizationMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateOrganizationMemberRole(ctx context.Context, req *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/organizations/{id}/members/{member_id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetPathParam("member_id", fmt.Sprintf("%v", req.MemberId))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateOrganizationMemberRoleResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) JoinOrganization(ctx context.Context, req *JoinOrganizationRequest) (*JoinOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/join")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[JoinOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) RejectOrganization(ctx context.Context, req *RejectOrganizationRequest) (*RejectOrganizationResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/reject")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[RejectOrganizationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListOrganizationAPIKeys(ctx context.Context, req *ListOrganizationAPIKeysRequest) (*ListOrganizationAPIKeysResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/apikeys")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[ListOrganizationAPIKeysResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) CreateOrganizationAPIKey(ctx context.Context, req *CreateOrganizationAPIKeyRequest) (*CreateOrganizationAPIKeyResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/apikeys")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateOrganizationAPIKeyResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetAuditLogs(ctx context.Context, req *GetAuditLogsRequest) (*GetAuditLogsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/audit-logs")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	q := url.Values{}
	for _, v := range req.Filters.ActorId {
		q.Add("filters.actorId", fmt.Sprintf("%v", v))
	}
	if req.Filters.K8SResource != nil {
		for _, v := range req.Filters.K8SResource.ObjectName {
			q.Add("filters.k8sResource.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectKind {
			q.Add("filters.k8sResource.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectGroup {
			q.Add("filters.k8sResource.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectParentName {
			q.Add("filters.k8sResource.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectParentParentName {
			q.Add("filters.k8sResource.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectParentApplicationName {
			q.Add("filters.k8sResource.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.K8SResource.Enabled != nil {
			q.Add("filters.k8sResource.enabled", fmt.Sprintf("%v", *req.Filters.K8SResource.Enabled))
		}
	}
	if req.Filters.ArgocdApplication != nil {
		for _, v := range req.Filters.ArgocdApplication.ObjectName {
			q.Add("filters.argocdApplication.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectKind {
			q.Add("filters.argocdApplication.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectGroup {
			q.Add("filters.argocdApplication.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectParentName {
			q.Add("filters.argocdApplication.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectParentParentName {
			q.Add("filters.argocdApplication.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectParentApplicationName {
			q.Add("filters.argocdApplication.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.ArgocdApplication.Enabled != nil {
			q.Add("filters.argocdApplication.enabled", fmt.Sprintf("%v", *req.Filters.ArgocdApplication.Enabled))
		}
	}
	if req.Filters.ArgocdCluster != nil {
		for _, v := range req.Filters.ArgocdCluster.ObjectName {
			q.Add("filters.argocdCluster.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectKind {
			q.Add("filters.argocdCluster.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectGroup {
			q.Add("filters.argocdCluster.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectParentName {
			q.Add("filters.argocdCluster.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectParentParentName {
			q.Add("filters.argocdCluster.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectParentApplicationName {
			q.Add("filters.argocdCluster.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.ArgocdCluster.Enabled != nil {
			q.Add("filters.argocdCluster.enabled", fmt.Sprintf("%v", *req.Filters.ArgocdCluster.Enabled))
		}
	}
	if req.Filters.ArgocdInstance != nil {
		for _, v := range req.Filters.ArgocdInstance.ObjectName {
			q.Add("filters.argocdInstance.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectKind {
			q.Add("filters.argocdInstance.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectGroup {
			q.Add("filters.argocdInstance.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectParentName {
			q.Add("filters.argocdInstance.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectParentParentName {
			q.Add("filters.argocdInstance.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectParentApplicationName {
			q.Add("filters.argocdInstance.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.ArgocdInstance.Enabled != nil {
			q.Add("filters.argocdInstance.enabled", fmt.Sprintf("%v", *req.Filters.ArgocdInstance.Enabled))
		}
	}
	if req.Filters.ArgocdProject != nil {
		for _, v := range req.Filters.ArgocdProject.ObjectName {
			q.Add("filters.argocdProject.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectKind {
			q.Add("filters.argocdProject.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectGroup {
			q.Add("filters.argocdProject.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectParentName {
			q.Add("filters.argocdProject.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectParentParentName {
			q.Add("filters.argocdProject.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectParentApplicationName {
			q.Add("filters.argocdProject.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.ArgocdProject.Enabled != nil {
			q.Add("filters.argocdProject.enabled", fmt.Sprintf("%v", *req.Filters.ArgocdProject.Enabled))
		}
	}
	if req.Filters.Member != nil {
		for _, v := range req.Filters.Member.ObjectName {
			q.Add("filters.member.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectKind {
			q.Add("filters.member.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectGroup {
			q.Add("filters.member.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectParentName {
			q.Add("filters.member.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectParentParentName {
			q.Add("filters.member.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectParentApplicationName {
			q.Add("filters.member.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.Member.Enabled != nil {
			q.Add("filters.member.enabled", fmt.Sprintf("%v", *req.Filters.Member.Enabled))
		}
	}
	if req.Filters.OrganizationInvite != nil {
		for _, v := range req.Filters.OrganizationInvite.ObjectName {
			q.Add("filters.organizationInvite.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectKind {
			q.Add("filters.organizationInvite.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectGroup {
			q.Add("filters.organizationInvite.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectParentName {
			q.Add("filters.organizationInvite.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectParentParentName {
			q.Add("filters.organizationInvite.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectParentApplicationName {
			q.Add("filters.organizationInvite.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.OrganizationInvite.Enabled != nil {
			q.Add("filters.organizationInvite.enabled", fmt.Sprintf("%v", *req.Filters.OrganizationInvite.Enabled))
		}
	}
	for _, v := range req.Filters.Action {
		q.Add("filters.action", fmt.Sprintf("%v", v))
	}
	for _, v := range req.Filters.ActorType {
		q.Add("filters.actorType", fmt.Sprintf("%v", v))
	}
	if req.Filters.StartTime != nil {
		q.Add("filters.startTime", fmt.Sprintf("%v", *req.Filters.StartTime))
	}
	if req.Filters.EndTime != nil {
		q.Add("filters.endTime", fmt.Sprintf("%v", *req.Filters.EndTime))
	}
	if req.Filters.Limit != nil {
		q.Add("filters.limit", fmt.Sprintf("%v", *req.Filters.Limit))
	}
	if req.Filters.Offset != nil {
		q.Add("filters.offset", fmt.Sprintf("%v", *req.Filters.Offset))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[GetAuditLogsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListAuditLogsArchives(ctx context.Context, req *ListAuditLogsArchivesRequest) (*ListAuditLogsArchivesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/audit-logs-archives")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	q := url.Values{}
	if req.Filters.StartDate != nil {
		q.Add("filters.startDate", fmt.Sprintf("%v", *req.Filters.StartDate))
	}
	if req.Filters.EndDate != nil {
		q.Add("filters.endDate", fmt.Sprintf("%v", *req.Filters.EndDate))
	}
	if req.Filters.Limit != nil {
		q.Add("filters.limit", fmt.Sprintf("%v", *req.Filters.Limit))
	}
	if req.Filters.Offset != nil {
		q.Add("filters.offset", fmt.Sprintf("%v", *req.Filters.Offset))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListAuditLogsArchivesResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetAuditLogsInCSV(ctx context.Context, req *GetAuditLogsInCSVRequest) (<-chan *httpbody.HttpBody, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/csv-audit-logs")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	q := url.Values{}
	for _, v := range req.Filters.ActorId {
		q.Add("filters.actorId", fmt.Sprintf("%v", v))
	}
	if req.Filters.K8SResource != nil {
		for _, v := range req.Filters.K8SResource.ObjectName {
			q.Add("filters.k8sResource.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectKind {
			q.Add("filters.k8sResource.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectGroup {
			q.Add("filters.k8sResource.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectParentName {
			q.Add("filters.k8sResource.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectParentParentName {
			q.Add("filters.k8sResource.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.K8SResource.ObjectParentApplicationName {
			q.Add("filters.k8sResource.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.K8SResource.Enabled != nil {
			q.Add("filters.k8sResource.enabled", fmt.Sprintf("%v", *req.Filters.K8SResource.Enabled))
		}
	}
	if req.Filters.ArgocdApplication != nil {
		for _, v := range req.Filters.ArgocdApplication.ObjectName {
			q.Add("filters.argocdApplication.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectKind {
			q.Add("filters.argocdApplication.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectGroup {
			q.Add("filters.argocdApplication.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectParentName {
			q.Add("filters.argocdApplication.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectParentParentName {
			q.Add("filters.argocdApplication.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdApplication.ObjectParentApplicationName {
			q.Add("filters.argocdApplication.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.ArgocdApplication.Enabled != nil {
			q.Add("filters.argocdApplication.enabled", fmt.Sprintf("%v", *req.Filters.ArgocdApplication.Enabled))
		}
	}
	if req.Filters.ArgocdCluster != nil {
		for _, v := range req.Filters.ArgocdCluster.ObjectName {
			q.Add("filters.argocdCluster.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectKind {
			q.Add("filters.argocdCluster.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectGroup {
			q.Add("filters.argocdCluster.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectParentName {
			q.Add("filters.argocdCluster.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectParentParentName {
			q.Add("filters.argocdCluster.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdCluster.ObjectParentApplicationName {
			q.Add("filters.argocdCluster.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.ArgocdCluster.Enabled != nil {
			q.Add("filters.argocdCluster.enabled", fmt.Sprintf("%v", *req.Filters.ArgocdCluster.Enabled))
		}
	}
	if req.Filters.ArgocdInstance != nil {
		for _, v := range req.Filters.ArgocdInstance.ObjectName {
			q.Add("filters.argocdInstance.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectKind {
			q.Add("filters.argocdInstance.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectGroup {
			q.Add("filters.argocdInstance.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectParentName {
			q.Add("filters.argocdInstance.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectParentParentName {
			q.Add("filters.argocdInstance.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdInstance.ObjectParentApplicationName {
			q.Add("filters.argocdInstance.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.ArgocdInstance.Enabled != nil {
			q.Add("filters.argocdInstance.enabled", fmt.Sprintf("%v", *req.Filters.ArgocdInstance.Enabled))
		}
	}
	if req.Filters.ArgocdProject != nil {
		for _, v := range req.Filters.ArgocdProject.ObjectName {
			q.Add("filters.argocdProject.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectKind {
			q.Add("filters.argocdProject.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectGroup {
			q.Add("filters.argocdProject.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectParentName {
			q.Add("filters.argocdProject.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectParentParentName {
			q.Add("filters.argocdProject.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.ArgocdProject.ObjectParentApplicationName {
			q.Add("filters.argocdProject.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.ArgocdProject.Enabled != nil {
			q.Add("filters.argocdProject.enabled", fmt.Sprintf("%v", *req.Filters.ArgocdProject.Enabled))
		}
	}
	if req.Filters.Member != nil {
		for _, v := range req.Filters.Member.ObjectName {
			q.Add("filters.member.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectKind {
			q.Add("filters.member.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectGroup {
			q.Add("filters.member.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectParentName {
			q.Add("filters.member.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectParentParentName {
			q.Add("filters.member.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.Member.ObjectParentApplicationName {
			q.Add("filters.member.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.Member.Enabled != nil {
			q.Add("filters.member.enabled", fmt.Sprintf("%v", *req.Filters.Member.Enabled))
		}
	}
	if req.Filters.OrganizationInvite != nil {
		for _, v := range req.Filters.OrganizationInvite.ObjectName {
			q.Add("filters.organizationInvite.objectName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectKind {
			q.Add("filters.organizationInvite.objectKind", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectGroup {
			q.Add("filters.organizationInvite.objectGroup", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectParentName {
			q.Add("filters.organizationInvite.objectParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectParentParentName {
			q.Add("filters.organizationInvite.objectParentParentName", fmt.Sprintf("%v", v))
		}
		for _, v := range req.Filters.OrganizationInvite.ObjectParentApplicationName {
			q.Add("filters.organizationInvite.objectParentApplicationName", fmt.Sprintf("%v", v))
		}
		if req.Filters.OrganizationInvite.Enabled != nil {
			q.Add("filters.organizationInvite.enabled", fmt.Sprintf("%v", *req.Filters.OrganizationInvite.Enabled))
		}
	}
	for _, v := range req.Filters.Action {
		q.Add("filters.action", fmt.Sprintf("%v", v))
	}
	for _, v := range req.Filters.ActorType {
		q.Add("filters.actorType", fmt.Sprintf("%v", v))
	}
	if req.Filters.StartTime != nil {
		q.Add("filters.startTime", fmt.Sprintf("%v", *req.Filters.StartTime))
	}
	if req.Filters.EndTime != nil {
		q.Add("filters.endTime", fmt.Sprintf("%v", *req.Filters.EndTime))
	}
	if req.Filters.Limit != nil {
		q.Add("filters.limit", fmt.Sprintf("%v", *req.Filters.Limit))
	}
	if req.Filters.Offset != nil {
		q.Add("filters.offset", fmt.Sprintf("%v", *req.Filters.Offset))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoStreamingRequest[httpbody.HttpBody](ctx, c.gwc, gwReq)
}

func (c *organizationServiceGatewayClient) GetCustomerDetails(ctx context.Context, req *GetCustomerDetailsRequest) (*GetCustomerDetailsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/billing/customer")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetCustomerDetailsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateBillingDetails(ctx context.Context, req *UpdateBillingDetailsRequest) (*UpdateBillingDetailsResponse, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/organizations/{id}/billing")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateBillingDetailsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) DeleteBillingCustomer(ctx context.Context, req *DeleteBillingCustomerRequest) (*DeleteBillingCustomerResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/organizations/{id}/billing/customer")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[DeleteBillingCustomerResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) BillingCheckout(ctx context.Context, req *BillingCheckoutRequest) (*BillingCheckoutResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{id}/checkout")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[BillingCheckoutResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateSubscription(ctx context.Context, req *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/organizations/{id}/billing/subscription")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateSubscriptionResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetAvailableAddons(ctx context.Context, req *GetAvailableAddonsRequest) (*GetAvailableAddonsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/billing/{plan}/addons")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetPathParam("plan", fmt.Sprintf("%v", req.Plan))
	return gateway.DoRequest[GetAvailableAddonsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetSSOConfiguration(ctx context.Context, req *GetSSOConfigurationRequest) (*GetSSOConfigurationResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/sso/configuration")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetSSOConfigurationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) EnsureSSOConfiguration(ctx context.Context, req *EnsureSSOConfigurationRequest) (*EnsureSSOConfigurationResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/organizations/{id}/sso/configuration")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[EnsureSSOConfigurationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) DeleteSSOConfiguration(ctx context.Context, req *DeleteSSOConfigurationRequest) (*DeleteSSOConfigurationResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/organizations/{id}/sso/configuration")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[DeleteSSOConfigurationResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetFeatureGates(ctx context.Context, req *GetFeatureGatesRequest) (*GetFeatureGatesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/feature-gates")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetFeatureGatesResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetOIDCMap(ctx context.Context, req *GetOIDCMapRequest) (*GetOIDCMapResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{id}/oidc-map")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetOIDCMapResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateOIDCMap(ctx context.Context, req *UpdateOIDCMapRequest) (*UpdateOIDCMapResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/organizations/{id}/oidc-map")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateOIDCMapResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) CreateCustomRole(ctx context.Context, req *CreateCustomRoleRequest) (*CreateCustomRoleResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/organizations/{organization_id}/custom-roles")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateCustomRoleResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateCustomRole(ctx context.Context, req *UpdateCustomRoleRequest) (*UpdateCustomRoleResponse, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/organizations/{organization_id}/custom-roles/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateCustomRoleResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetCustomRole(ctx context.Context, req *GetCustomRoleRequest) (*GetCustomRoleResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{organization_id}/custom-roles/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetCustomRoleResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListCustomRoles(ctx context.Context, req *ListCustomRolesRequest) (*ListCustomRolesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/organizations/{organization_id}/custom-roles")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	q := url.Values{}
	if req.Limit != nil {
		q.Add("limit", fmt.Sprintf("%v", *req.Limit))
	}
	if req.Offset != nil {
		q.Add("offset", fmt.Sprintf("%v", *req.Offset))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListCustomRolesResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) DeleteCustomRole(ctx context.Context, req *DeleteCustomRoleRequest) (*DeleteCustomRoleResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/organizations/{organization_id}/custom-roles/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[DeleteCustomRoleResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) CreateTeam(ctx context.Context, req *CreateTeamRequest) (*CreateTeamResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/teams")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateTeamResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateTeam(ctx context.Context, req *UpdateTeamRequest) (*UpdateTeamResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/orgs/{organization_id}/teams/{name}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateTeamResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetTeam(ctx context.Context, req *GetTeamRequest) (*GetTeamResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/teams/{name}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("name", fmt.Sprintf("%v", req.Name))
	return gateway.DoRequest[GetTeamResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListTeams(ctx context.Context, req *ListTeamsRequest) (*ListTeamsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/teams")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	q := url.Values{}
	if req.Limit != nil {
		q.Add("limit", fmt.Sprintf("%v", *req.Limit))
	}
	if req.Offset != nil {
		q.Add("offset", fmt.Sprintf("%v", *req.Offset))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListTeamsResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) DeleteTeam(ctx context.Context, req *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/orgs/{organization_id}/teams/{name}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetBody(req)
	return gateway.DoRequest[DeleteTeamResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) AddTeamMember(ctx context.Context, req *AddTeamMemberRequest) (*AddTeamMemberResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/teams/{team_name}/members")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("team_name", fmt.Sprintf("%v", req.TeamName))
	gwReq.SetBody(req)
	return gateway.DoRequest[AddTeamMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetTeamMember(ctx context.Context, req *GetTeamMemberRequest) (*GetTeamMemberResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/teams/{team_name}/members/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("team_name", fmt.Sprintf("%v", req.TeamName))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetTeamMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListTeamMembers(ctx context.Context, req *ListTeamMembersRequest) (*ListTeamMembersResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/teams/{team_name}/members")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("team_name", fmt.Sprintf("%v", req.TeamName))
	q := url.Values{}
	if req.Limit != nil {
		q.Add("limit", fmt.Sprintf("%v", *req.Limit))
	}
	if req.Offset != nil {
		q.Add("offset", fmt.Sprintf("%v", *req.Offset))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListTeamMembersResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) RemoveTeamMember(ctx context.Context, req *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/orgs/{organization_id}/teams/{team_name}/members/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("team_name", fmt.Sprintf("%v", req.TeamName))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[RemoveTeamMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) CreateWorkspace(ctx context.Context, req *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/workspaces")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetBody(req)
	return gateway.DoRequest[CreateWorkspaceResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListWorkspaces(ctx context.Context, req *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/workspaces")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	q := url.Values{}
	if req.Limit != nil {
		q.Add("limit", fmt.Sprintf("%v", *req.Limit))
	}
	if req.Offset != nil {
		q.Add("offset", fmt.Sprintf("%v", *req.Offset))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListWorkspacesResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetWorkspace(ctx context.Context, req *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/workspaces/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetWorkspaceResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateWorkspace(ctx context.Context, req *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/orgs/{organization_id}/workspaces/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateWorkspaceResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) DeleteWorkspace(ctx context.Context, req *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/orgs/{organization_id}/workspaces/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[DeleteWorkspaceResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) AddWorkspaceMember(ctx context.Context, req *AddWorkspaceMemberRequest) (*AddWorkspaceMemberResponse, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/orgs/{organization_id}/workspaces/{workspace_id}/member")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("workspace_id", fmt.Sprintf("%v", req.WorkspaceId))
	gwReq.SetBody(req)
	return gateway.DoRequest[AddWorkspaceMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) ListWorkspaceMembers(ctx context.Context, req *ListWorkspaceMembersRequest) (*ListWorkspaceMembersResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/workspaces/{workspace_id}/members")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("workspace_id", fmt.Sprintf("%v", req.WorkspaceId))
	q := url.Values{}
	if req.Limit != nil {
		q.Add("limit", fmt.Sprintf("%v", *req.Limit))
	}
	if req.Offset != nil {
		q.Add("offset", fmt.Sprintf("%v", *req.Offset))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListWorkspaceMembersResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateWorkspaceMembers(ctx context.Context, req *UpdateWorkspaceMembersRequest) (*UpdateWorkspaceMembersResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/orgs/{organization_id}/workspaces/{workspace_id}/members")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("workspace_id", fmt.Sprintf("%v", req.WorkspaceId))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateWorkspaceMembersResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) GetWorkspaceMember(ctx context.Context, req *GetWorkspaceMemberRequest) (*GetWorkspaceMemberResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/orgs/{organization_id}/workspaces/{workspace_id}/members/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("workspace_id", fmt.Sprintf("%v", req.WorkspaceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[GetWorkspaceMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) UpdateWorkspaceMember(ctx context.Context, req *UpdateWorkspaceMemberRequest) (*UpdateWorkspaceMemberResponse, error) {
	gwReq := c.gwc.NewRequest("PUT", "/api/v1/orgs/{organization_id}/workspaces/{workspace_id}/members/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("workspace_id", fmt.Sprintf("%v", req.WorkspaceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[UpdateWorkspaceMemberResponse](ctx, gwReq)
}

func (c *organizationServiceGatewayClient) RemoveWorkspaceMember(ctx context.Context, req *RemoveWorkspaceMemberRequest) (*RemoveWorkspaceMemberResponse, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/orgs/{organization_id}/workspaces/{workspace_id}/members/{id}")
	gwReq.SetPathParam("organization_id", fmt.Sprintf("%v", req.OrganizationId))
	gwReq.SetPathParam("workspace_id", fmt.Sprintf("%v", req.WorkspaceId))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[RemoveWorkspaceMemberResponse](ctx, gwReq)
}
