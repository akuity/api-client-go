// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: system/v1/system.proto

package systemv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SystemService_GetVersion_FullMethodName                     = "/akuity.system.v1.SystemService/GetVersion"
	SystemService_GetAgentVersion_FullMethodName                = "/akuity.system.v1.SystemService/GetAgentVersion"
	SystemService_GetSettings_FullMethodName                    = "/akuity.system.v1.SystemService/GetSettings"
	SystemService_ListAgentVersions_FullMethodName              = "/akuity.system.v1.SystemService/ListAgentVersions"
	SystemService_GetStatus_FullMethodName                      = "/akuity.system.v1.SystemService/GetStatus"
	SystemService_ListArgoCDVersions_FullMethodName             = "/akuity.system.v1.SystemService/ListArgoCDVersions"
	SystemService_ListKargoVersions_FullMethodName              = "/akuity.system.v1.SystemService/ListKargoVersions"
	SystemService_ListArgoCDExtensions_FullMethodName           = "/akuity.system.v1.SystemService/ListArgoCDExtensions"
	SystemService_GetAnnouncement_FullMethodName                = "/akuity.system.v1.SystemService/GetAnnouncement"
	SystemService_ListValidWebhookEvents_FullMethodName         = "/akuity.system.v1.SystemService/ListValidWebhookEvents"
	SystemService_GetArgoCDAgentSizeSpec_FullMethodName         = "/akuity.system.v1.SystemService/GetArgoCDAgentSizeSpec"
	SystemService_GetKargoAgentSizeSpec_FullMethodName          = "/akuity.system.v1.SystemService/GetKargoAgentSizeSpec"
	SystemService_ListArgoCDImageUpadterVersions_FullMethodName = "/akuity.system.v1.SystemService/ListArgoCDImageUpadterVersions"
)

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemServiceClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	GetAgentVersion(ctx context.Context, in *GetAgentVersionRequest, opts ...grpc.CallOption) (*GetAgentVersionResponse, error)
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListAgentVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAgentVersionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListArgoCDVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArgoCDVersionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListKargoVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListKargoVersionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListArgoCDExtensions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArgoCDExtensionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetAnnouncement(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAnnouncementResponse, error)
	ListValidWebhookEvents(ctx context.Context, in *ListValidWebhookEventsRequest, opts ...grpc.CallOption) (*ListValidWebhookEventsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetArgoCDAgentSizeSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetArgoCDAgentSizeSpecResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetKargoAgentSizeSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetKargoAgentSizeSpecResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListArgoCDImageUpadterVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArgoCDImageUpadterVersionsResponse, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, SystemService_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetAgentVersion(ctx context.Context, in *GetAgentVersionRequest, opts ...grpc.CallOption) (*GetAgentVersionResponse, error) {
	out := new(GetAgentVersionResponse)
	err := c.cc.Invoke(ctx, SystemService_GetAgentVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, SystemService_GetSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ListAgentVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAgentVersionsResponse, error) {
	out := new(ListAgentVersionsResponse)
	err := c.cc.Invoke(ctx, SystemService_ListAgentVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, SystemService_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ListArgoCDVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArgoCDVersionsResponse, error) {
	out := new(ListArgoCDVersionsResponse)
	err := c.cc.Invoke(ctx, SystemService_ListArgoCDVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ListKargoVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListKargoVersionsResponse, error) {
	out := new(ListKargoVersionsResponse)
	err := c.cc.Invoke(ctx, SystemService_ListKargoVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ListArgoCDExtensions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArgoCDExtensionsResponse, error) {
	out := new(ListArgoCDExtensionsResponse)
	err := c.cc.Invoke(ctx, SystemService_ListArgoCDExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetAnnouncement(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAnnouncementResponse, error) {
	out := new(GetAnnouncementResponse)
	err := c.cc.Invoke(ctx, SystemService_GetAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ListValidWebhookEvents(ctx context.Context, in *ListValidWebhookEventsRequest, opts ...grpc.CallOption) (*ListValidWebhookEventsResponse, error) {
	out := new(ListValidWebhookEventsResponse)
	err := c.cc.Invoke(ctx, SystemService_ListValidWebhookEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetArgoCDAgentSizeSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetArgoCDAgentSizeSpecResponse, error) {
	out := new(GetArgoCDAgentSizeSpecResponse)
	err := c.cc.Invoke(ctx, SystemService_GetArgoCDAgentSizeSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetKargoAgentSizeSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetKargoAgentSizeSpecResponse, error) {
	out := new(GetKargoAgentSizeSpecResponse)
	err := c.cc.Invoke(ctx, SystemService_GetKargoAgentSizeSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ListArgoCDImageUpadterVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArgoCDImageUpadterVersionsResponse, error) {
	out := new(ListArgoCDImageUpadterVersionsResponse)
	err := c.cc.Invoke(ctx, SystemService_ListArgoCDImageUpadterVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
// All implementations must embed UnimplementedSystemServiceServer
// for forward compatibility
type SystemServiceServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	GetAgentVersion(context.Context, *GetAgentVersionRequest) (*GetAgentVersionResponse, error)
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListAgentVersions(context.Context, *emptypb.Empty) (*ListAgentVersionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetStatus(context.Context, *emptypb.Empty) (*GetStatusResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListArgoCDVersions(context.Context, *emptypb.Empty) (*ListArgoCDVersionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListKargoVersions(context.Context, *emptypb.Empty) (*ListKargoVersionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListArgoCDExtensions(context.Context, *emptypb.Empty) (*ListArgoCDExtensionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetAnnouncement(context.Context, *emptypb.Empty) (*GetAnnouncementResponse, error)
	ListValidWebhookEvents(context.Context, *ListValidWebhookEventsRequest) (*ListValidWebhookEventsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetArgoCDAgentSizeSpec(context.Context, *emptypb.Empty) (*GetArgoCDAgentSizeSpecResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetKargoAgentSizeSpec(context.Context, *emptypb.Empty) (*GetKargoAgentSizeSpecResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListArgoCDImageUpadterVersions(context.Context, *emptypb.Empty) (*ListArgoCDImageUpadterVersionsResponse, error)
	mustEmbedUnimplementedSystemServiceServer()
}

// UnimplementedSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServiceServer struct {
}

func (UnimplementedSystemServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedSystemServiceServer) GetAgentVersion(context.Context, *GetAgentVersionRequest) (*GetAgentVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentVersion not implemented")
}
func (UnimplementedSystemServiceServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedSystemServiceServer) ListAgentVersions(context.Context, *emptypb.Empty) (*ListAgentVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentVersions not implemented")
}
func (UnimplementedSystemServiceServer) GetStatus(context.Context, *emptypb.Empty) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSystemServiceServer) ListArgoCDVersions(context.Context, *emptypb.Empty) (*ListArgoCDVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArgoCDVersions not implemented")
}
func (UnimplementedSystemServiceServer) ListKargoVersions(context.Context, *emptypb.Empty) (*ListKargoVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKargoVersions not implemented")
}
func (UnimplementedSystemServiceServer) ListArgoCDExtensions(context.Context, *emptypb.Empty) (*ListArgoCDExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArgoCDExtensions not implemented")
}
func (UnimplementedSystemServiceServer) GetAnnouncement(context.Context, *emptypb.Empty) (*GetAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncement not implemented")
}
func (UnimplementedSystemServiceServer) ListValidWebhookEvents(context.Context, *ListValidWebhookEventsRequest) (*ListValidWebhookEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValidWebhookEvents not implemented")
}
func (UnimplementedSystemServiceServer) GetArgoCDAgentSizeSpec(context.Context, *emptypb.Empty) (*GetArgoCDAgentSizeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArgoCDAgentSizeSpec not implemented")
}
func (UnimplementedSystemServiceServer) GetKargoAgentSizeSpec(context.Context, *emptypb.Empty) (*GetKargoAgentSizeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKargoAgentSizeSpec not implemented")
}
func (UnimplementedSystemServiceServer) ListArgoCDImageUpadterVersions(context.Context, *emptypb.Empty) (*ListArgoCDImageUpadterVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArgoCDImageUpadterVersions not implemented")
}
func (UnimplementedSystemServiceServer) mustEmbedUnimplementedSystemServiceServer() {}

// UnsafeSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServiceServer will
// result in compilation errors.
type UnsafeSystemServiceServer interface {
	mustEmbedUnimplementedSystemServiceServer()
}

func RegisterSystemServiceServer(s grpc.ServiceRegistrar, srv SystemServiceServer) {
	s.RegisterService(&SystemService_ServiceDesc, srv)
}

func _SystemService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetAgentVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetAgentVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetAgentVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetAgentVersion(ctx, req.(*GetAgentVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ListAgentVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ListAgentVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ListAgentVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ListAgentVersions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ListArgoCDVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ListArgoCDVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ListArgoCDVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ListArgoCDVersions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ListKargoVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ListKargoVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ListKargoVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ListKargoVersions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ListArgoCDExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ListArgoCDExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ListArgoCDExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ListArgoCDExtensions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetAnnouncement(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ListValidWebhookEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListValidWebhookEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ListValidWebhookEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ListValidWebhookEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ListValidWebhookEvents(ctx, req.(*ListValidWebhookEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetArgoCDAgentSizeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetArgoCDAgentSizeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetArgoCDAgentSizeSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetArgoCDAgentSizeSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetKargoAgentSizeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetKargoAgentSizeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetKargoAgentSizeSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetKargoAgentSizeSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ListArgoCDImageUpadterVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ListArgoCDImageUpadterVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ListArgoCDImageUpadterVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ListArgoCDImageUpadterVersions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemService_ServiceDesc is the grpc.ServiceDesc for SystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akuity.system.v1.SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _SystemService_GetVersion_Handler,
		},
		{
			MethodName: "GetAgentVersion",
			Handler:    _SystemService_GetAgentVersion_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _SystemService_GetSettings_Handler,
		},
		{
			MethodName: "ListAgentVersions",
			Handler:    _SystemService_ListAgentVersions_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _SystemService_GetStatus_Handler,
		},
		{
			MethodName: "ListArgoCDVersions",
			Handler:    _SystemService_ListArgoCDVersions_Handler,
		},
		{
			MethodName: "ListKargoVersions",
			Handler:    _SystemService_ListKargoVersions_Handler,
		},
		{
			MethodName: "ListArgoCDExtensions",
			Handler:    _SystemService_ListArgoCDExtensions_Handler,
		},
		{
			MethodName: "GetAnnouncement",
			Handler:    _SystemService_GetAnnouncement_Handler,
		},
		{
			MethodName: "ListValidWebhookEvents",
			Handler:    _SystemService_ListValidWebhookEvents_Handler,
		},
		{
			MethodName: "GetArgoCDAgentSizeSpec",
			Handler:    _SystemService_GetArgoCDAgentSizeSpec_Handler,
		},
		{
			MethodName: "GetKargoAgentSizeSpec",
			Handler:    _SystemService_GetKargoAgentSizeSpec_Handler,
		},
		{
			MethodName: "ListArgoCDImageUpadterVersions",
			Handler:    _SystemService_ListArgoCDImageUpadterVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system/v1/system.proto",
}
