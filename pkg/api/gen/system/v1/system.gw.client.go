// Code generated by protoc-gen-gw-client. DO NOT EDIT.
// source: system/v1/system.proto

package systemv1

import (
	context "context"
	fmt "fmt"
	client "github.com/akuity/api-client-go/pkg/api/gateway/client"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	url "net/url"
)

// SystemServiceGatewayClient is the client for SystemService service.
type SystemServiceGatewayClient interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	GetAgentVersion(context.Context, *GetAgentVersionRequest) (*GetAgentVersionResponse, error)
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesResponse, error)
	GetFeatureGates(context.Context, *GetFeatureGatesRequest) (*GetFeatureGatesResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListAgentVersions(context.Context, *emptypb.Empty) (*ListAgentVersionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetStatus(context.Context, *emptypb.Empty) (*GetStatusResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListArgoCDVersions(context.Context, *emptypb.Empty) (*ListArgoCDVersionsResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	ListArgoCDExtensions(context.Context, *emptypb.Empty) (*ListArgoCDExtensionsResponse, error)
}

func NewSystemServiceGatewayClient(c client.Client) SystemServiceGatewayClient {
	return &systemServiceGatewayClient{
		gwc: c,
	}
}

type systemServiceGatewayClient struct {
	gwc client.Client
}

func (c *systemServiceGatewayClient) GetVersion(ctx context.Context, req *GetVersionRequest) (*GetVersionResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/system/version")
	return client.DoRequest[GetVersionResponse](ctx, gwReq)
}

func (c *systemServiceGatewayClient) GetAgentVersion(ctx context.Context, req *GetAgentVersionRequest) (*GetAgentVersionResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/system/agent/version")
	return client.DoRequest[GetAgentVersionResponse](ctx, gwReq)
}

func (c *systemServiceGatewayClient) GetSettings(ctx context.Context, req *GetSettingsRequest) (*GetSettingsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/system/settings")
	return client.DoRequest[GetSettingsResponse](ctx, gwReq)
}

func (c *systemServiceGatewayClient) ListFeatures(ctx context.Context, req *ListFeaturesRequest) (*ListFeaturesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/system/features")
	q := url.Values{}
	for _, v := range req.Names {
		q.Add("names", fmt.Sprintf("%v", v))
	}
	gwReq.SetQueryParamsFromValues(q)
	return client.DoRequest[ListFeaturesResponse](ctx, gwReq)
}

func (c *systemServiceGatewayClient) GetFeatureGates(ctx context.Context, req *GetFeatureGatesRequest) (*GetFeatureGatesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/system/feature-gates")
	return client.DoRequest[GetFeatureGatesResponse](ctx, gwReq)
}

func (c *systemServiceGatewayClient) ListAgentVersions(ctx context.Context, req *emptypb.Empty) (*ListAgentVersionsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/system/agent/versions")
	return client.DoRequest[ListAgentVersionsResponse](ctx, gwReq)
}

func (c *systemServiceGatewayClient) GetStatus(ctx context.Context, req *emptypb.Empty) (*GetStatusResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/system/status")
	return client.DoRequest[GetStatusResponse](ctx, gwReq)
}

func (c *systemServiceGatewayClient) ListArgoCDVersions(ctx context.Context, req *emptypb.Empty) (*ListArgoCDVersionsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/system/cd/versions")
	return client.DoRequest[ListArgoCDVersionsResponse](ctx, gwReq)
}

func (c *systemServiceGatewayClient) ListArgoCDExtensions(ctx context.Context, req *emptypb.Empty) (*ListArgoCDExtensionsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/system/cd/extensions")
	return client.DoRequest[ListArgoCDExtensionsResponse](ctx, gwReq)
}
